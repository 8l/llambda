/************************************************************
 * This file is generated by typegen. Do not edit manually. *
 ************************************************************/

#include "binding/DatumCell.h"
#include "binding/UnitCell.h"
#include "binding/ListElementCell.h"
#include "binding/PairCell.h"
#include "binding/EmptyListCell.h"
#include "binding/StringCell.h"
#include "binding/SymbolCell.h"
#include "binding/BooleanCell.h"
#include "binding/NumericCell.h"
#include "binding/ExactIntegerCell.h"
#include "binding/InexactRationalCell.h"
#include "binding/CharacterCell.h"
#include "binding/VectorCell.h"
#include "binding/BytevectorCell.h"
#include "binding/ProcedureCell.h"

using namespace lliby;

extern "C"
{

bool lliby_is_datum(const DatumCell *value)
{
	return DatumCell::isInstance(value);
}

bool lliby_is_unit(const DatumCell *value)
{
	return UnitCell::isInstance(value);
}

bool lliby_is_list_element(const DatumCell *value)
{
	return ListElementCell::isInstance(value);
}

bool lliby_is_pair(const DatumCell *value)
{
	return PairCell::isInstance(value);
}

bool lliby_is_empty_list(const DatumCell *value)
{
	return EmptyListCell::isInstance(value);
}

bool lliby_is_string(const DatumCell *value)
{
	return StringCell::isInstance(value);
}

bool lliby_is_symbol(const DatumCell *value)
{
	return SymbolCell::isInstance(value);
}

bool lliby_is_boolean(const DatumCell *value)
{
	return BooleanCell::isInstance(value);
}

bool lliby_is_numeric(const DatumCell *value)
{
	return NumericCell::isInstance(value);
}

bool lliby_is_exact_integer(const DatumCell *value)
{
	return ExactIntegerCell::isInstance(value);
}

bool lliby_is_inexact_rational(const DatumCell *value)
{
	return InexactRationalCell::isInstance(value);
}

bool lliby_is_character(const DatumCell *value)
{
	return CharacterCell::isInstance(value);
}

bool lliby_is_vector(const DatumCell *value)
{
	return VectorCell::isInstance(value);
}

bool lliby_is_bytevector(const DatumCell *value)
{
	return BytevectorCell::isInstance(value);
}

bool lliby_is_procedure(const DatumCell *value)
{
	return ProcedureCell::isInstance(value);
}

}
