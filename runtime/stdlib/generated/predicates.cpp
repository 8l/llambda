/*****************************************************************
 * This file is generated by gen-types.py. Do not edit manually. *
 *****************************************************************/

#include "binding/BoxedDatum.h"
#include "binding/BoxedUnspecific.h"
#include "binding/BoxedListElement.h"
#include "binding/BoxedPair.h"
#include "binding/BoxedEmptyList.h"
#include "binding/BoxedStringLike.h"
#include "binding/BoxedString.h"
#include "binding/BoxedSymbol.h"
#include "binding/BoxedBoolean.h"
#include "binding/BoxedNumeric.h"
#include "binding/BoxedExactInteger.h"
#include "binding/BoxedInexactRational.h"
#include "binding/BoxedCharacter.h"
#include "binding/BoxedVector.h"
#include "binding/BoxedBytevector.h"
#include "binding/BoxedRecordLike.h"
#include "binding/BoxedProcedure.h"
#include "binding/BoxedMutableVar.h"

using namespace lliby;

extern "C"
{

bool lliby_is_unspecific(const BoxedDatum *value)
{
	return BoxedUnspecific::isInstance(value);
}

bool lliby_is_list_element(const BoxedDatum *value)
{
	return BoxedListElement::isInstance(value);
}

bool lliby_is_pair(const BoxedDatum *value)
{
	return BoxedPair::isInstance(value);
}

bool lliby_is_empty_list(const BoxedDatum *value)
{
	return BoxedEmptyList::isInstance(value);
}

bool lliby_is_string_like(const BoxedDatum *value)
{
	return BoxedStringLike::isInstance(value);
}

bool lliby_is_string(const BoxedDatum *value)
{
	return BoxedString::isInstance(value);
}

bool lliby_is_symbol(const BoxedDatum *value)
{
	return BoxedSymbol::isInstance(value);
}

bool lliby_is_boolean(const BoxedDatum *value)
{
	return BoxedBoolean::isInstance(value);
}

bool lliby_is_numeric(const BoxedDatum *value)
{
	return BoxedNumeric::isInstance(value);
}

bool lliby_is_exact_integer(const BoxedDatum *value)
{
	return BoxedExactInteger::isInstance(value);
}

bool lliby_is_inexact_rational(const BoxedDatum *value)
{
	return BoxedInexactRational::isInstance(value);
}

bool lliby_is_character(const BoxedDatum *value)
{
	return BoxedCharacter::isInstance(value);
}

bool lliby_is_vector(const BoxedDatum *value)
{
	return BoxedVector::isInstance(value);
}

bool lliby_is_bytevector(const BoxedDatum *value)
{
	return BoxedBytevector::isInstance(value);
}

bool lliby_is_record_like(const BoxedDatum *value)
{
	return BoxedRecordLike::isInstance(value);
}

bool lliby_is_procedure(const BoxedDatum *value)
{
	return BoxedProcedure::isInstance(value);
}

bool lliby_is_mutable_var(const BoxedDatum *value)
{
	return BoxedMutableVar::isInstance(value);
}


}
