/*****************************************************************
 * This file is generated by gen-types.py. Do not edit manually. *
 *****************************************************************/

#include "binding/BoxedValue.h"

using namespace lliby;

extern "C"
{

bool lliby_is_unspecific(const BoxedValue *value)
{
	return value->asUnspecificValue() != nullptr;
}

bool lliby_is_pair(const BoxedValue *value)
{
	return value->asPairValue() != nullptr;
}

bool lliby_is_empty_list(const BoxedValue *value)
{
	return value->asEmptyListValue() != nullptr;
}

bool lliby_is_string(const BoxedValue *value)
{
	return value->asStringValue() != nullptr;
}

bool lliby_is_symbol(const BoxedValue *value)
{
	return value->asSymbolValue() != nullptr;
}

bool lliby_is_boolean(const BoxedValue *value)
{
	return value->asBooleanValue() != nullptr;
}

bool lliby_is_exact_integer(const BoxedValue *value)
{
	return value->asExactIntegerValue() != nullptr;
}

bool lliby_is_inexact_rational(const BoxedValue *value)
{
	return value->asInexactRationalValue() != nullptr;
}

bool lliby_is_character(const BoxedValue *value)
{
	return value->asCharacterValue() != nullptr;
}

bool lliby_is_byte_vector(const BoxedValue *value)
{
	return value->asByteVectorValue() != nullptr;
}

bool lliby_is_procedure(const BoxedValue *value)
{
	return value->asProcedureValue() != nullptr;
}

bool lliby_is_vector_like(const BoxedValue *value)
{
	return value->asVectorLikeValue() != nullptr;
}

bool lliby_is_vector(const BoxedValue *value)
{
	return value->asVectorValue() != nullptr;
}

bool lliby_is_closure(const BoxedValue *value)
{
	return value->asClosureValue() != nullptr;
}


}
