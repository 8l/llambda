/************************************************************
 * This file is generated by typegen. Do not edit manually. *
 ************************************************************/

public:
	std::uint32_t charLength() const
	{
		return m_charLength;
	}

	std::uint32_t byteLength() const
	{
		return m_byteLength;
	}

	std::uint8_t* utf8Data() const
	{
		return m_utf8Data;
	}

public:
	static bool isInstance(const DatumCell *datum)
	{
		return (datum->typeId() == CellTypeId::String) || (datum->typeId() == CellTypeId::Symbol);
	}

	static StringLikeCell* fromDatum(DatumCell *datum)
	{
		if (isInstance(datum))
		{
			return static_cast<StringLikeCell*>(datum);
		}

		return nullptr;
	}

	static const StringLikeCell* fromDatum(const DatumCell *datum)
	{
		if (isInstance(datum))
		{
			return static_cast<const StringLikeCell*>(datum);
		}

		return nullptr;
	}

private:
	std::uint32_t m_charLength;
	std::uint32_t m_byteLength;
	std::uint8_t* m_utf8Data;
