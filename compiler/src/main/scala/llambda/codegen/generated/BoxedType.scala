/*****************************************************************
 * This file is generated by gen-types.py. Do not edit manually. *
 *****************************************************************/

package llambda.codegen.boxedtype

import llambda.codegen.llvmir._
import llambda.InternalCompilerErrorException

sealed abstract class BoxedType {
  val irType : FirstClassType
  val superType : Option[BoxedType]
}

object BoxedDatum extends BoxedType {
  val irType = UserDefinedType("datum")
  val superType = None

  def createConstant(typeId : IrConstant) : StructureConstant = {
    if (typeId.irType != IntegerType(16)) {
       throw new InternalCompilerErrorException("Unexpected type for field typeId")
    }

    StructureConstant(List(
      typeId,
      IntegerConstant(IntegerType(16), 0)
    ), userDefinedType=Some(irType))
  }

  def genPointerToTypeId(block : IrBlockBuilder, boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != PointerType(UserDefinedType("datum"))) {
       throw new InternalCompilerErrorException("Unexpected type for boxed value")
    }

    block.getelementptr("typeId")(
      resultType=IntegerType(16),
      basePointer=boxedValue,
      indices=List(0, 0).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genPointerToGcState(block : IrBlockBuilder, boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != PointerType(UserDefinedType("datum"))) {
       throw new InternalCompilerErrorException("Unexpected type for boxed value")
    }

    block.getelementptr("gcState")(
      resultType=IntegerType(16),
      basePointer=boxedValue,
      indices=List(0, 1).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }
}

object BoxedUnspecific extends BoxedType {
  val irType = UserDefinedType("unspecific")
  val superType = Some(BoxedDatum)
  val typeId = 0

  def genTypeCheck(function : IrFunctionBuilder, entryBlock : IrBlockBuilder, boxedValue : IrValue, successBlock : IrBlockBuilder, failBlock : IrBlockBuilder) {
    val typeIdPointer = genPointerToTypeId(entryBlock, boxedValue)
    val typeId = entryBlock.load("typeId")(typeIdPointer)

    val isUnspecific = entryBlock.icmp("isUnspecific")(ComparisonCond.Equal, None, typeId, IntegerConstant(IntegerType(16), 0))
    entryBlock.condBranch(isUnspecific, successBlock, failBlock)
  }

  def genPointerToTypeId(block : IrBlockBuilder, boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != PointerType(UserDefinedType("unspecific"))) {
       throw new InternalCompilerErrorException("Unexpected type for boxed value")
    }

    block.getelementptr("typeId")(
      resultType=IntegerType(16),
      basePointer=boxedValue,
      indices=List(0, 0, 0).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genPointerToGcState(block : IrBlockBuilder, boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != PointerType(UserDefinedType("unspecific"))) {
       throw new InternalCompilerErrorException("Unexpected type for boxed value")
    }

    block.getelementptr("gcState")(
      resultType=IntegerType(16),
      basePointer=boxedValue,
      indices=List(0, 0, 1).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }
}

object BoxedPair extends BoxedType {
  val irType = UserDefinedType("pair")
  val superType = Some(BoxedDatum)
  val typeId = 1

  def createConstant(car : IrConstant, cdr : IrConstant) : StructureConstant = {
    if (car.irType != PointerType(UserDefinedType("datum"))) {
       throw new InternalCompilerErrorException("Unexpected type for field car")
    }

    if (cdr.irType != PointerType(UserDefinedType("datum"))) {
       throw new InternalCompilerErrorException("Unexpected type for field cdr")
    }

    StructureConstant(List(
      superType.get.createConstant(
        typeId=IntegerConstant(IntegerType(16), typeId)
      ),
      car,
      cdr
    ), userDefinedType=Some(irType))
  }

  def genTypeCheck(function : IrFunctionBuilder, entryBlock : IrBlockBuilder, boxedValue : IrValue, successBlock : IrBlockBuilder, failBlock : IrBlockBuilder) {
    val typeIdPointer = genPointerToTypeId(entryBlock, boxedValue)
    val typeId = entryBlock.load("typeId")(typeIdPointer)

    val isPair = entryBlock.icmp("isPair")(ComparisonCond.Equal, None, typeId, IntegerConstant(IntegerType(16), 1))
    entryBlock.condBranch(isPair, successBlock, failBlock)
  }

  def genPointerToCar(block : IrBlockBuilder, boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != PointerType(UserDefinedType("pair"))) {
       throw new InternalCompilerErrorException("Unexpected type for boxed value")
    }

    block.getelementptr("car")(
      resultType=PointerType(UserDefinedType("datum")),
      basePointer=boxedValue,
      indices=List(0, 0).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genPointerToCdr(block : IrBlockBuilder, boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != PointerType(UserDefinedType("pair"))) {
       throw new InternalCompilerErrorException("Unexpected type for boxed value")
    }

    block.getelementptr("cdr")(
      resultType=PointerType(UserDefinedType("datum")),
      basePointer=boxedValue,
      indices=List(0, 1).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genPointerToTypeId(block : IrBlockBuilder, boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != PointerType(UserDefinedType("pair"))) {
       throw new InternalCompilerErrorException("Unexpected type for boxed value")
    }

    block.getelementptr("typeId")(
      resultType=IntegerType(16),
      basePointer=boxedValue,
      indices=List(0, 0, 0).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genPointerToGcState(block : IrBlockBuilder, boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != PointerType(UserDefinedType("pair"))) {
       throw new InternalCompilerErrorException("Unexpected type for boxed value")
    }

    block.getelementptr("gcState")(
      resultType=IntegerType(16),
      basePointer=boxedValue,
      indices=List(0, 0, 1).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }
}

object BoxedEmptyList extends BoxedType {
  val irType = UserDefinedType("emptyList")
  val superType = Some(BoxedDatum)
  val typeId = 2

  def genTypeCheck(function : IrFunctionBuilder, entryBlock : IrBlockBuilder, boxedValue : IrValue, successBlock : IrBlockBuilder, failBlock : IrBlockBuilder) {
    val typeIdPointer = genPointerToTypeId(entryBlock, boxedValue)
    val typeId = entryBlock.load("typeId")(typeIdPointer)

    val isEmptyList = entryBlock.icmp("isEmptyList")(ComparisonCond.Equal, None, typeId, IntegerConstant(IntegerType(16), 2))
    entryBlock.condBranch(isEmptyList, successBlock, failBlock)
  }

  def genPointerToTypeId(block : IrBlockBuilder, boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != PointerType(UserDefinedType("emptyList"))) {
       throw new InternalCompilerErrorException("Unexpected type for boxed value")
    }

    block.getelementptr("typeId")(
      resultType=IntegerType(16),
      basePointer=boxedValue,
      indices=List(0, 0, 0).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genPointerToGcState(block : IrBlockBuilder, boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != PointerType(UserDefinedType("emptyList"))) {
       throw new InternalCompilerErrorException("Unexpected type for boxed value")
    }

    block.getelementptr("gcState")(
      resultType=IntegerType(16),
      basePointer=boxedValue,
      indices=List(0, 0, 1).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }
}

object BoxedStringLike extends BoxedType {
  val irType = UserDefinedType("stringLike")
  val superType = Some(BoxedDatum)

  def createConstant(charLength : IrConstant, byteLength : IrConstant, utf8Data : IrConstant, typeId : IrConstant) : StructureConstant = {
    if (charLength.irType != IntegerType(32)) {
       throw new InternalCompilerErrorException("Unexpected type for field charLength")
    }

    if (byteLength.irType != IntegerType(32)) {
       throw new InternalCompilerErrorException("Unexpected type for field byteLength")
    }

    if (utf8Data.irType != PointerType(IntegerType(8))) {
       throw new InternalCompilerErrorException("Unexpected type for field utf8Data")
    }

    StructureConstant(List(
      superType.get.createConstant(
        typeId=typeId
      ),
      charLength,
      byteLength,
      utf8Data
    ), userDefinedType=Some(irType))
  }

  def genTypeCheck(function : IrFunctionBuilder, entryBlock : IrBlockBuilder, boxedValue : IrValue, successBlock : IrBlockBuilder, failBlock : IrBlockBuilder) {
    val typeIdPointer = genPointerToTypeId(entryBlock, boxedValue)
    val typeId = entryBlock.load("typeId")(typeIdPointer)

    val isString = entryBlock.icmp("isString")(ComparisonCond.Equal, None, typeId, IntegerConstant(IntegerType(16), 3))
    val notStringBlock = function.startBlock("notString")
    entryBlock.condBranch(isString, successBlock, notStringBlock)

    val isSymbol = notStringBlock.icmp("isSymbol")(ComparisonCond.Equal, None, typeId, IntegerConstant(IntegerType(16), 4))
    notStringBlock.condBranch(isSymbol, successBlock, failBlock)
  }

  def genPointerToCharLength(block : IrBlockBuilder, boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != PointerType(UserDefinedType("stringLike"))) {
       throw new InternalCompilerErrorException("Unexpected type for boxed value")
    }

    block.getelementptr("charLength")(
      resultType=IntegerType(32),
      basePointer=boxedValue,
      indices=List(0, 0).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genPointerToByteLength(block : IrBlockBuilder, boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != PointerType(UserDefinedType("stringLike"))) {
       throw new InternalCompilerErrorException("Unexpected type for boxed value")
    }

    block.getelementptr("byteLength")(
      resultType=IntegerType(32),
      basePointer=boxedValue,
      indices=List(0, 1).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genPointerToUtf8Data(block : IrBlockBuilder, boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != PointerType(UserDefinedType("stringLike"))) {
       throw new InternalCompilerErrorException("Unexpected type for boxed value")
    }

    block.getelementptr("utf8Data")(
      resultType=PointerType(IntegerType(8)),
      basePointer=boxedValue,
      indices=List(0, 2).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genPointerToTypeId(block : IrBlockBuilder, boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != PointerType(UserDefinedType("stringLike"))) {
       throw new InternalCompilerErrorException("Unexpected type for boxed value")
    }

    block.getelementptr("typeId")(
      resultType=IntegerType(16),
      basePointer=boxedValue,
      indices=List(0, 0, 0).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genPointerToGcState(block : IrBlockBuilder, boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != PointerType(UserDefinedType("stringLike"))) {
       throw new InternalCompilerErrorException("Unexpected type for boxed value")
    }

    block.getelementptr("gcState")(
      resultType=IntegerType(16),
      basePointer=boxedValue,
      indices=List(0, 0, 1).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }
}

object BoxedString extends BoxedType {
  val irType = UserDefinedType("string")
  val superType = Some(BoxedStringLike)
  val typeId = 3

  def createConstant(charLength : IrConstant, byteLength : IrConstant, utf8Data : IrConstant) : StructureConstant = {
    StructureConstant(List(
      superType.get.createConstant(
        charLength=charLength,
        byteLength=byteLength,
        utf8Data=utf8Data,
        typeId=IntegerConstant(IntegerType(16), typeId)
      )
    ), userDefinedType=Some(irType))
  }

  def genTypeCheck(function : IrFunctionBuilder, entryBlock : IrBlockBuilder, boxedValue : IrValue, successBlock : IrBlockBuilder, failBlock : IrBlockBuilder) {
    val typeIdPointer = genPointerToTypeId(entryBlock, boxedValue)
    val typeId = entryBlock.load("typeId")(typeIdPointer)

    val isString = entryBlock.icmp("isString")(ComparisonCond.Equal, None, typeId, IntegerConstant(IntegerType(16), 3))
    entryBlock.condBranch(isString, successBlock, failBlock)
  }

  def genPointerToCharLength(block : IrBlockBuilder, boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != PointerType(UserDefinedType("string"))) {
       throw new InternalCompilerErrorException("Unexpected type for boxed value")
    }

    block.getelementptr("charLength")(
      resultType=IntegerType(32),
      basePointer=boxedValue,
      indices=List(0, 0, 0).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genPointerToByteLength(block : IrBlockBuilder, boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != PointerType(UserDefinedType("string"))) {
       throw new InternalCompilerErrorException("Unexpected type for boxed value")
    }

    block.getelementptr("byteLength")(
      resultType=IntegerType(32),
      basePointer=boxedValue,
      indices=List(0, 0, 1).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genPointerToUtf8Data(block : IrBlockBuilder, boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != PointerType(UserDefinedType("string"))) {
       throw new InternalCompilerErrorException("Unexpected type for boxed value")
    }

    block.getelementptr("utf8Data")(
      resultType=PointerType(IntegerType(8)),
      basePointer=boxedValue,
      indices=List(0, 0, 2).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genPointerToTypeId(block : IrBlockBuilder, boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != PointerType(UserDefinedType("string"))) {
       throw new InternalCompilerErrorException("Unexpected type for boxed value")
    }

    block.getelementptr("typeId")(
      resultType=IntegerType(16),
      basePointer=boxedValue,
      indices=List(0, 0, 0, 0).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genPointerToGcState(block : IrBlockBuilder, boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != PointerType(UserDefinedType("string"))) {
       throw new InternalCompilerErrorException("Unexpected type for boxed value")
    }

    block.getelementptr("gcState")(
      resultType=IntegerType(16),
      basePointer=boxedValue,
      indices=List(0, 0, 0, 1).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }
}

object BoxedSymbol extends BoxedType {
  val irType = UserDefinedType("symbol")
  val superType = Some(BoxedStringLike)
  val typeId = 4

  def createConstant(charLength : IrConstant, byteLength : IrConstant, utf8Data : IrConstant) : StructureConstant = {
    StructureConstant(List(
      superType.get.createConstant(
        charLength=charLength,
        byteLength=byteLength,
        utf8Data=utf8Data,
        typeId=IntegerConstant(IntegerType(16), typeId)
      )
    ), userDefinedType=Some(irType))
  }

  def genTypeCheck(function : IrFunctionBuilder, entryBlock : IrBlockBuilder, boxedValue : IrValue, successBlock : IrBlockBuilder, failBlock : IrBlockBuilder) {
    val typeIdPointer = genPointerToTypeId(entryBlock, boxedValue)
    val typeId = entryBlock.load("typeId")(typeIdPointer)

    val isSymbol = entryBlock.icmp("isSymbol")(ComparisonCond.Equal, None, typeId, IntegerConstant(IntegerType(16), 4))
    entryBlock.condBranch(isSymbol, successBlock, failBlock)
  }

  def genPointerToCharLength(block : IrBlockBuilder, boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != PointerType(UserDefinedType("symbol"))) {
       throw new InternalCompilerErrorException("Unexpected type for boxed value")
    }

    block.getelementptr("charLength")(
      resultType=IntegerType(32),
      basePointer=boxedValue,
      indices=List(0, 0, 0).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genPointerToByteLength(block : IrBlockBuilder, boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != PointerType(UserDefinedType("symbol"))) {
       throw new InternalCompilerErrorException("Unexpected type for boxed value")
    }

    block.getelementptr("byteLength")(
      resultType=IntegerType(32),
      basePointer=boxedValue,
      indices=List(0, 0, 1).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genPointerToUtf8Data(block : IrBlockBuilder, boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != PointerType(UserDefinedType("symbol"))) {
       throw new InternalCompilerErrorException("Unexpected type for boxed value")
    }

    block.getelementptr("utf8Data")(
      resultType=PointerType(IntegerType(8)),
      basePointer=boxedValue,
      indices=List(0, 0, 2).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genPointerToTypeId(block : IrBlockBuilder, boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != PointerType(UserDefinedType("symbol"))) {
       throw new InternalCompilerErrorException("Unexpected type for boxed value")
    }

    block.getelementptr("typeId")(
      resultType=IntegerType(16),
      basePointer=boxedValue,
      indices=List(0, 0, 0, 0).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genPointerToGcState(block : IrBlockBuilder, boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != PointerType(UserDefinedType("symbol"))) {
       throw new InternalCompilerErrorException("Unexpected type for boxed value")
    }

    block.getelementptr("gcState")(
      resultType=IntegerType(16),
      basePointer=boxedValue,
      indices=List(0, 0, 0, 1).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }
}

object BoxedBoolean extends BoxedType {
  val irType = UserDefinedType("boolean")
  val superType = Some(BoxedDatum)
  val typeId = 5

  def genTypeCheck(function : IrFunctionBuilder, entryBlock : IrBlockBuilder, boxedValue : IrValue, successBlock : IrBlockBuilder, failBlock : IrBlockBuilder) {
    val typeIdPointer = genPointerToTypeId(entryBlock, boxedValue)
    val typeId = entryBlock.load("typeId")(typeIdPointer)

    val isBoolean = entryBlock.icmp("isBoolean")(ComparisonCond.Equal, None, typeId, IntegerConstant(IntegerType(16), 5))
    entryBlock.condBranch(isBoolean, successBlock, failBlock)
  }

  def genPointerToValue(block : IrBlockBuilder, boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != PointerType(UserDefinedType("boolean"))) {
       throw new InternalCompilerErrorException("Unexpected type for boxed value")
    }

    block.getelementptr("value")(
      resultType=IntegerType(1),
      basePointer=boxedValue,
      indices=List(0, 0).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genPointerToTypeId(block : IrBlockBuilder, boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != PointerType(UserDefinedType("boolean"))) {
       throw new InternalCompilerErrorException("Unexpected type for boxed value")
    }

    block.getelementptr("typeId")(
      resultType=IntegerType(16),
      basePointer=boxedValue,
      indices=List(0, 0, 0).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genPointerToGcState(block : IrBlockBuilder, boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != PointerType(UserDefinedType("boolean"))) {
       throw new InternalCompilerErrorException("Unexpected type for boxed value")
    }

    block.getelementptr("gcState")(
      resultType=IntegerType(16),
      basePointer=boxedValue,
      indices=List(0, 0, 1).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }
}

object BoxedNumeric extends BoxedType {
  val irType = UserDefinedType("numeric")
  val superType = Some(BoxedDatum)

  def createConstant(typeId : IrConstant) : StructureConstant = {
    StructureConstant(List(
      superType.get.createConstant(
        typeId=typeId
      )
    ), userDefinedType=Some(irType))
  }

  def genTypeCheck(function : IrFunctionBuilder, entryBlock : IrBlockBuilder, boxedValue : IrValue, successBlock : IrBlockBuilder, failBlock : IrBlockBuilder) {
    val typeIdPointer = genPointerToTypeId(entryBlock, boxedValue)
    val typeId = entryBlock.load("typeId")(typeIdPointer)

    val isExactInteger = entryBlock.icmp("isExactInteger")(ComparisonCond.Equal, None, typeId, IntegerConstant(IntegerType(16), 6))
    val notExactIntegerBlock = function.startBlock("notExactInteger")
    entryBlock.condBranch(isExactInteger, successBlock, notExactIntegerBlock)

    val isInexactRational = notExactIntegerBlock.icmp("isInexactRational")(ComparisonCond.Equal, None, typeId, IntegerConstant(IntegerType(16), 7))
    notExactIntegerBlock.condBranch(isInexactRational, successBlock, failBlock)
  }

  def genPointerToTypeId(block : IrBlockBuilder, boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != PointerType(UserDefinedType("numeric"))) {
       throw new InternalCompilerErrorException("Unexpected type for boxed value")
    }

    block.getelementptr("typeId")(
      resultType=IntegerType(16),
      basePointer=boxedValue,
      indices=List(0, 0, 0).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genPointerToGcState(block : IrBlockBuilder, boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != PointerType(UserDefinedType("numeric"))) {
       throw new InternalCompilerErrorException("Unexpected type for boxed value")
    }

    block.getelementptr("gcState")(
      resultType=IntegerType(16),
      basePointer=boxedValue,
      indices=List(0, 0, 1).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }
}

object BoxedExactInteger extends BoxedType {
  val irType = UserDefinedType("exactInteger")
  val superType = Some(BoxedNumeric)
  val typeId = 6

  def createConstant(value : IrConstant) : StructureConstant = {
    if (value.irType != IntegerType(64)) {
       throw new InternalCompilerErrorException("Unexpected type for field value")
    }

    StructureConstant(List(
      superType.get.createConstant(
        typeId=IntegerConstant(IntegerType(16), typeId)
      ),
      value
    ), userDefinedType=Some(irType))
  }

  def genTypeCheck(function : IrFunctionBuilder, entryBlock : IrBlockBuilder, boxedValue : IrValue, successBlock : IrBlockBuilder, failBlock : IrBlockBuilder) {
    val typeIdPointer = genPointerToTypeId(entryBlock, boxedValue)
    val typeId = entryBlock.load("typeId")(typeIdPointer)

    val isExactInteger = entryBlock.icmp("isExactInteger")(ComparisonCond.Equal, None, typeId, IntegerConstant(IntegerType(16), 6))
    entryBlock.condBranch(isExactInteger, successBlock, failBlock)
  }

  def genPointerToValue(block : IrBlockBuilder, boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != PointerType(UserDefinedType("exactInteger"))) {
       throw new InternalCompilerErrorException("Unexpected type for boxed value")
    }

    block.getelementptr("value")(
      resultType=IntegerType(64),
      basePointer=boxedValue,
      indices=List(0, 0).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genPointerToTypeId(block : IrBlockBuilder, boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != PointerType(UserDefinedType("exactInteger"))) {
       throw new InternalCompilerErrorException("Unexpected type for boxed value")
    }

    block.getelementptr("typeId")(
      resultType=IntegerType(16),
      basePointer=boxedValue,
      indices=List(0, 0, 0, 0).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genPointerToGcState(block : IrBlockBuilder, boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != PointerType(UserDefinedType("exactInteger"))) {
       throw new InternalCompilerErrorException("Unexpected type for boxed value")
    }

    block.getelementptr("gcState")(
      resultType=IntegerType(16),
      basePointer=boxedValue,
      indices=List(0, 0, 0, 1).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }
}

object BoxedInexactRational extends BoxedType {
  val irType = UserDefinedType("inexactRational")
  val superType = Some(BoxedNumeric)
  val typeId = 7

  def createConstant(value : IrConstant) : StructureConstant = {
    if (value.irType != DoubleType) {
       throw new InternalCompilerErrorException("Unexpected type for field value")
    }

    StructureConstant(List(
      superType.get.createConstant(
        typeId=IntegerConstant(IntegerType(16), typeId)
      ),
      value
    ), userDefinedType=Some(irType))
  }

  def genTypeCheck(function : IrFunctionBuilder, entryBlock : IrBlockBuilder, boxedValue : IrValue, successBlock : IrBlockBuilder, failBlock : IrBlockBuilder) {
    val typeIdPointer = genPointerToTypeId(entryBlock, boxedValue)
    val typeId = entryBlock.load("typeId")(typeIdPointer)

    val isInexactRational = entryBlock.icmp("isInexactRational")(ComparisonCond.Equal, None, typeId, IntegerConstant(IntegerType(16), 7))
    entryBlock.condBranch(isInexactRational, successBlock, failBlock)
  }

  def genPointerToValue(block : IrBlockBuilder, boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != PointerType(UserDefinedType("inexactRational"))) {
       throw new InternalCompilerErrorException("Unexpected type for boxed value")
    }

    block.getelementptr("value")(
      resultType=DoubleType,
      basePointer=boxedValue,
      indices=List(0, 0).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genPointerToTypeId(block : IrBlockBuilder, boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != PointerType(UserDefinedType("inexactRational"))) {
       throw new InternalCompilerErrorException("Unexpected type for boxed value")
    }

    block.getelementptr("typeId")(
      resultType=IntegerType(16),
      basePointer=boxedValue,
      indices=List(0, 0, 0, 0).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genPointerToGcState(block : IrBlockBuilder, boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != PointerType(UserDefinedType("inexactRational"))) {
       throw new InternalCompilerErrorException("Unexpected type for boxed value")
    }

    block.getelementptr("gcState")(
      resultType=IntegerType(16),
      basePointer=boxedValue,
      indices=List(0, 0, 0, 1).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }
}

object BoxedCharacter extends BoxedType {
  val irType = UserDefinedType("character")
  val superType = Some(BoxedDatum)
  val typeId = 8

  def createConstant(unicodeChar : IrConstant) : StructureConstant = {
    if (unicodeChar.irType != IntegerType(32)) {
       throw new InternalCompilerErrorException("Unexpected type for field unicodeChar")
    }

    StructureConstant(List(
      superType.get.createConstant(
        typeId=IntegerConstant(IntegerType(16), typeId)
      ),
      unicodeChar
    ), userDefinedType=Some(irType))
  }

  def genTypeCheck(function : IrFunctionBuilder, entryBlock : IrBlockBuilder, boxedValue : IrValue, successBlock : IrBlockBuilder, failBlock : IrBlockBuilder) {
    val typeIdPointer = genPointerToTypeId(entryBlock, boxedValue)
    val typeId = entryBlock.load("typeId")(typeIdPointer)

    val isCharacter = entryBlock.icmp("isCharacter")(ComparisonCond.Equal, None, typeId, IntegerConstant(IntegerType(16), 8))
    entryBlock.condBranch(isCharacter, successBlock, failBlock)
  }

  def genPointerToUnicodeChar(block : IrBlockBuilder, boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != PointerType(UserDefinedType("character"))) {
       throw new InternalCompilerErrorException("Unexpected type for boxed value")
    }

    block.getelementptr("unicodeChar")(
      resultType=IntegerType(32),
      basePointer=boxedValue,
      indices=List(0, 0).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genPointerToTypeId(block : IrBlockBuilder, boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != PointerType(UserDefinedType("character"))) {
       throw new InternalCompilerErrorException("Unexpected type for boxed value")
    }

    block.getelementptr("typeId")(
      resultType=IntegerType(16),
      basePointer=boxedValue,
      indices=List(0, 0, 0).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genPointerToGcState(block : IrBlockBuilder, boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != PointerType(UserDefinedType("character"))) {
       throw new InternalCompilerErrorException("Unexpected type for boxed value")
    }

    block.getelementptr("gcState")(
      resultType=IntegerType(16),
      basePointer=boxedValue,
      indices=List(0, 0, 1).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }
}

object BoxedByteVector extends BoxedType {
  val irType = UserDefinedType("byteVector")
  val superType = Some(BoxedDatum)
  val typeId = 9

  def createConstant(length : IrConstant, data : IrConstant) : StructureConstant = {
    if (length.irType != IntegerType(32)) {
       throw new InternalCompilerErrorException("Unexpected type for field length")
    }

    if (data.irType != PointerType(IntegerType(8))) {
       throw new InternalCompilerErrorException("Unexpected type for field data")
    }

    StructureConstant(List(
      superType.get.createConstant(
        typeId=IntegerConstant(IntegerType(16), typeId)
      ),
      length,
      data
    ), userDefinedType=Some(irType))
  }

  def genTypeCheck(function : IrFunctionBuilder, entryBlock : IrBlockBuilder, boxedValue : IrValue, successBlock : IrBlockBuilder, failBlock : IrBlockBuilder) {
    val typeIdPointer = genPointerToTypeId(entryBlock, boxedValue)
    val typeId = entryBlock.load("typeId")(typeIdPointer)

    val isByteVector = entryBlock.icmp("isByteVector")(ComparisonCond.Equal, None, typeId, IntegerConstant(IntegerType(16), 9))
    entryBlock.condBranch(isByteVector, successBlock, failBlock)
  }

  def genPointerToLength(block : IrBlockBuilder, boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != PointerType(UserDefinedType("byteVector"))) {
       throw new InternalCompilerErrorException("Unexpected type for boxed value")
    }

    block.getelementptr("length")(
      resultType=IntegerType(32),
      basePointer=boxedValue,
      indices=List(0, 0).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genPointerToData(block : IrBlockBuilder, boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != PointerType(UserDefinedType("byteVector"))) {
       throw new InternalCompilerErrorException("Unexpected type for boxed value")
    }

    block.getelementptr("data")(
      resultType=PointerType(IntegerType(8)),
      basePointer=boxedValue,
      indices=List(0, 1).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genPointerToTypeId(block : IrBlockBuilder, boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != PointerType(UserDefinedType("byteVector"))) {
       throw new InternalCompilerErrorException("Unexpected type for boxed value")
    }

    block.getelementptr("typeId")(
      resultType=IntegerType(16),
      basePointer=boxedValue,
      indices=List(0, 0, 0).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genPointerToGcState(block : IrBlockBuilder, boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != PointerType(UserDefinedType("byteVector"))) {
       throw new InternalCompilerErrorException("Unexpected type for boxed value")
    }

    block.getelementptr("gcState")(
      resultType=IntegerType(16),
      basePointer=boxedValue,
      indices=List(0, 0, 1).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }
}

object BoxedProcedure extends BoxedType {
  val irType = UserDefinedType("procedure")
  val superType = Some(BoxedDatum)
  val typeId = 10

  def createConstant(closure : IrConstant, entryPoint : IrConstant) : StructureConstant = {
    if (closure.irType != PointerType(UserDefinedType("closure"))) {
       throw new InternalCompilerErrorException("Unexpected type for field closure")
    }

    if (entryPoint.irType != PointerType(FunctionType(PointerType(UserDefinedType("datum")), List(PointerType(UserDefinedType("closure")), PointerType(UserDefinedType("datum")) )))) {
       throw new InternalCompilerErrorException("Unexpected type for field entryPoint")
    }

    StructureConstant(List(
      superType.get.createConstant(
        typeId=IntegerConstant(IntegerType(16), typeId)
      ),
      closure,
      entryPoint
    ), userDefinedType=Some(irType))
  }

  def genTypeCheck(function : IrFunctionBuilder, entryBlock : IrBlockBuilder, boxedValue : IrValue, successBlock : IrBlockBuilder, failBlock : IrBlockBuilder) {
    val typeIdPointer = genPointerToTypeId(entryBlock, boxedValue)
    val typeId = entryBlock.load("typeId")(typeIdPointer)

    val isProcedure = entryBlock.icmp("isProcedure")(ComparisonCond.Equal, None, typeId, IntegerConstant(IntegerType(16), 10))
    entryBlock.condBranch(isProcedure, successBlock, failBlock)
  }

  def genPointerToClosure(block : IrBlockBuilder, boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != PointerType(UserDefinedType("procedure"))) {
       throw new InternalCompilerErrorException("Unexpected type for boxed value")
    }

    block.getelementptr("closure")(
      resultType=PointerType(UserDefinedType("closure")),
      basePointer=boxedValue,
      indices=List(0, 0).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genPointerToEntryPoint(block : IrBlockBuilder, boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != PointerType(UserDefinedType("procedure"))) {
       throw new InternalCompilerErrorException("Unexpected type for boxed value")
    }

    block.getelementptr("entryPoint")(
      resultType=PointerType(FunctionType(PointerType(UserDefinedType("datum")), List(PointerType(UserDefinedType("closure")), PointerType(UserDefinedType("datum")) ))),
      basePointer=boxedValue,
      indices=List(0, 1).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genPointerToTypeId(block : IrBlockBuilder, boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != PointerType(UserDefinedType("procedure"))) {
       throw new InternalCompilerErrorException("Unexpected type for boxed value")
    }

    block.getelementptr("typeId")(
      resultType=IntegerType(16),
      basePointer=boxedValue,
      indices=List(0, 0, 0).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genPointerToGcState(block : IrBlockBuilder, boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != PointerType(UserDefinedType("procedure"))) {
       throw new InternalCompilerErrorException("Unexpected type for boxed value")
    }

    block.getelementptr("gcState")(
      resultType=IntegerType(16),
      basePointer=boxedValue,
      indices=List(0, 0, 1).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }
}

object BoxedVectorLike extends BoxedType {
  val irType = UserDefinedType("vectorLike")
  val superType = Some(BoxedDatum)

  def createConstant(length : IrConstant, elements : IrConstant, typeId : IrConstant) : StructureConstant = {
    if (length.irType != IntegerType(32)) {
       throw new InternalCompilerErrorException("Unexpected type for field length")
    }

    if (elements.irType != PointerType(PointerType(UserDefinedType("datum")))) {
       throw new InternalCompilerErrorException("Unexpected type for field elements")
    }

    StructureConstant(List(
      superType.get.createConstant(
        typeId=typeId
      ),
      length,
      elements
    ), userDefinedType=Some(irType))
  }

  def genTypeCheck(function : IrFunctionBuilder, entryBlock : IrBlockBuilder, boxedValue : IrValue, successBlock : IrBlockBuilder, failBlock : IrBlockBuilder) {
    val typeIdPointer = genPointerToTypeId(entryBlock, boxedValue)
    val typeId = entryBlock.load("typeId")(typeIdPointer)

    val vectorLikeTypeMasked = entryBlock.and("vectorLikeTypeMasked")(typeId, IntegerConstant(IntegerType(16), 0x8000))
    val isVectorLike = entryBlock.icmp("isVectorLike")(ComparisonCond.NotEqual, None, vectorLikeTypeMasked, IntegerConstant(IntegerType(16), 0))
    entryBlock.condBranch(isVectorLike, successBlock, failBlock)
  }

  def genPointerToLength(block : IrBlockBuilder, boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != PointerType(UserDefinedType("vectorLike"))) {
       throw new InternalCompilerErrorException("Unexpected type for boxed value")
    }

    block.getelementptr("length")(
      resultType=IntegerType(32),
      basePointer=boxedValue,
      indices=List(0, 0).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genPointerToElements(block : IrBlockBuilder, boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != PointerType(UserDefinedType("vectorLike"))) {
       throw new InternalCompilerErrorException("Unexpected type for boxed value")
    }

    block.getelementptr("elements")(
      resultType=PointerType(PointerType(UserDefinedType("datum"))),
      basePointer=boxedValue,
      indices=List(0, 1).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genPointerToTypeId(block : IrBlockBuilder, boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != PointerType(UserDefinedType("vectorLike"))) {
       throw new InternalCompilerErrorException("Unexpected type for boxed value")
    }

    block.getelementptr("typeId")(
      resultType=IntegerType(16),
      basePointer=boxedValue,
      indices=List(0, 0, 0).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genPointerToGcState(block : IrBlockBuilder, boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != PointerType(UserDefinedType("vectorLike"))) {
       throw new InternalCompilerErrorException("Unexpected type for boxed value")
    }

    block.getelementptr("gcState")(
      resultType=IntegerType(16),
      basePointer=boxedValue,
      indices=List(0, 0, 1).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }
}

object BoxedVector extends BoxedType {
  val irType = UserDefinedType("vector")
  val superType = Some(BoxedVectorLike)
  val typeId = 32768

  def createConstant(length : IrConstant, elements : IrConstant) : StructureConstant = {
    StructureConstant(List(
      superType.get.createConstant(
        length=length,
        elements=elements,
        typeId=IntegerConstant(IntegerType(16), typeId)
      )
    ), userDefinedType=Some(irType))
  }

  def genTypeCheck(function : IrFunctionBuilder, entryBlock : IrBlockBuilder, boxedValue : IrValue, successBlock : IrBlockBuilder, failBlock : IrBlockBuilder) {
    val typeIdPointer = genPointerToTypeId(entryBlock, boxedValue)
    val typeId = entryBlock.load("typeId")(typeIdPointer)

    val isVector = entryBlock.icmp("isVector")(ComparisonCond.Equal, None, typeId, IntegerConstant(IntegerType(16), 32768))
    entryBlock.condBranch(isVector, successBlock, failBlock)
  }

  def genPointerToLength(block : IrBlockBuilder, boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != PointerType(UserDefinedType("vector"))) {
       throw new InternalCompilerErrorException("Unexpected type for boxed value")
    }

    block.getelementptr("length")(
      resultType=IntegerType(32),
      basePointer=boxedValue,
      indices=List(0, 0, 0).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genPointerToElements(block : IrBlockBuilder, boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != PointerType(UserDefinedType("vector"))) {
       throw new InternalCompilerErrorException("Unexpected type for boxed value")
    }

    block.getelementptr("elements")(
      resultType=PointerType(PointerType(UserDefinedType("datum"))),
      basePointer=boxedValue,
      indices=List(0, 0, 1).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genPointerToTypeId(block : IrBlockBuilder, boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != PointerType(UserDefinedType("vector"))) {
       throw new InternalCompilerErrorException("Unexpected type for boxed value")
    }

    block.getelementptr("typeId")(
      resultType=IntegerType(16),
      basePointer=boxedValue,
      indices=List(0, 0, 0, 0).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genPointerToGcState(block : IrBlockBuilder, boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != PointerType(UserDefinedType("vector"))) {
       throw new InternalCompilerErrorException("Unexpected type for boxed value")
    }

    block.getelementptr("gcState")(
      resultType=IntegerType(16),
      basePointer=boxedValue,
      indices=List(0, 0, 0, 1).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }
}

object BoxedClosure extends BoxedType {
  val irType = UserDefinedType("closure")
  val superType = Some(BoxedVectorLike)
  val typeId = 32769

  def createConstant(length : IrConstant, elements : IrConstant) : StructureConstant = {
    StructureConstant(List(
      superType.get.createConstant(
        length=length,
        elements=elements,
        typeId=IntegerConstant(IntegerType(16), typeId)
      )
    ), userDefinedType=Some(irType))
  }

  def genTypeCheck(function : IrFunctionBuilder, entryBlock : IrBlockBuilder, boxedValue : IrValue, successBlock : IrBlockBuilder, failBlock : IrBlockBuilder) {
    val typeIdPointer = genPointerToTypeId(entryBlock, boxedValue)
    val typeId = entryBlock.load("typeId")(typeIdPointer)

    val isClosure = entryBlock.icmp("isClosure")(ComparisonCond.Equal, None, typeId, IntegerConstant(IntegerType(16), 32769))
    entryBlock.condBranch(isClosure, successBlock, failBlock)
  }

  def genPointerToLength(block : IrBlockBuilder, boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != PointerType(UserDefinedType("closure"))) {
       throw new InternalCompilerErrorException("Unexpected type for boxed value")
    }

    block.getelementptr("length")(
      resultType=IntegerType(32),
      basePointer=boxedValue,
      indices=List(0, 0, 0).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genPointerToElements(block : IrBlockBuilder, boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != PointerType(UserDefinedType("closure"))) {
       throw new InternalCompilerErrorException("Unexpected type for boxed value")
    }

    block.getelementptr("elements")(
      resultType=PointerType(PointerType(UserDefinedType("datum"))),
      basePointer=boxedValue,
      indices=List(0, 0, 1).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genPointerToTypeId(block : IrBlockBuilder, boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != PointerType(UserDefinedType("closure"))) {
       throw new InternalCompilerErrorException("Unexpected type for boxed value")
    }

    block.getelementptr("typeId")(
      resultType=IntegerType(16),
      basePointer=boxedValue,
      indices=List(0, 0, 0, 0).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genPointerToGcState(block : IrBlockBuilder, boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != PointerType(UserDefinedType("closure"))) {
       throw new InternalCompilerErrorException("Unexpected type for boxed value")
    }

    block.getelementptr("gcState")(
      resultType=IntegerType(16),
      basePointer=boxedValue,
      indices=List(0, 0, 0, 1).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }
}

