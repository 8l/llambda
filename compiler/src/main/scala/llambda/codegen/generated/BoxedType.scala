/*****************************************************************
 * This file is generated by gen-types.py. Do not edit manually. *
 *****************************************************************/

package llambda.codegen.boxedtype

import llambda.codegen.llvmir._
import llambda.InternalCompilerErrorException

sealed abstract class BoxedType {
  val irType : FirstClassType
  val superType : Option[BoxedType]
}

object BoxedDatum extends BoxedType {
  val irType = UserDefinedType("datum")
  val superType = None

  def createConstant(typeId : IrConstant) : StructureConstant = {
    if (typeId.irType != IntegerType(16)) {
       throw new InternalCompilerErrorException("Unexpected type for field typeId")
    }

    StructureConstant(List(
      typeId,
      IntegerConstant(IntegerType(16), 0)
    ), userDefinedType=Some(irType))
  }

  def pointerToTypeId(block : IrBlockBuilder, boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != UserDefinedType("datum")) {
       throw new InternalCompilerErrorException("Unexpected type for boxed value")
    }

    block.getelementptr("typeId")(
      resultType=IntegerType(16),
      basePointer=boxedValue,
      indices=List(0, 0).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def pointerToGcState(block : IrBlockBuilder, boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != UserDefinedType("datum")) {
       throw new InternalCompilerErrorException("Unexpected type for boxed value")
    }

    block.getelementptr("gcState")(
      resultType=IntegerType(16),
      basePointer=boxedValue,
      indices=List(0, 1).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }
}

object BoxedUnspecific extends BoxedType {
  val irType = UserDefinedType("unspecific")
  val superType = Some(BoxedDatum)
  val typeId = 0

  def pointerToTypeId(block : IrBlockBuilder, boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != UserDefinedType("unspecific")) {
       throw new InternalCompilerErrorException("Unexpected type for boxed value")
    }

    block.getelementptr("typeId")(
      resultType=IntegerType(16),
      basePointer=boxedValue,
      indices=List(0, 0, 0).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def pointerToGcState(block : IrBlockBuilder, boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != UserDefinedType("unspecific")) {
       throw new InternalCompilerErrorException("Unexpected type for boxed value")
    }

    block.getelementptr("gcState")(
      resultType=IntegerType(16),
      basePointer=boxedValue,
      indices=List(0, 0, 1).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }
}

object BoxedPair extends BoxedType {
  val irType = UserDefinedType("pair")
  val superType = Some(BoxedDatum)
  val typeId = 1

  def createConstant(car : IrConstant, cdr : IrConstant) : StructureConstant = {
    if (car.irType != PointerType(UserDefinedType("datum"))) {
       throw new InternalCompilerErrorException("Unexpected type for field car")
    }

    if (cdr.irType != PointerType(UserDefinedType("datum"))) {
       throw new InternalCompilerErrorException("Unexpected type for field cdr")
    }

    StructureConstant(List(
      superType.get.createConstant(
        typeId=IntegerConstant(IntegerType(16), typeId)
      ),
      car,
      cdr
    ), userDefinedType=Some(irType))
  }

  def pointerToCar(block : IrBlockBuilder, boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != UserDefinedType("pair")) {
       throw new InternalCompilerErrorException("Unexpected type for boxed value")
    }

    block.getelementptr("car")(
      resultType=PointerType(UserDefinedType("datum")),
      basePointer=boxedValue,
      indices=List(0, 0).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def pointerToCdr(block : IrBlockBuilder, boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != UserDefinedType("pair")) {
       throw new InternalCompilerErrorException("Unexpected type for boxed value")
    }

    block.getelementptr("cdr")(
      resultType=PointerType(UserDefinedType("datum")),
      basePointer=boxedValue,
      indices=List(0, 1).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def pointerToTypeId(block : IrBlockBuilder, boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != UserDefinedType("pair")) {
       throw new InternalCompilerErrorException("Unexpected type for boxed value")
    }

    block.getelementptr("typeId")(
      resultType=IntegerType(16),
      basePointer=boxedValue,
      indices=List(0, 0, 0).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def pointerToGcState(block : IrBlockBuilder, boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != UserDefinedType("pair")) {
       throw new InternalCompilerErrorException("Unexpected type for boxed value")
    }

    block.getelementptr("gcState")(
      resultType=IntegerType(16),
      basePointer=boxedValue,
      indices=List(0, 0, 1).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }
}

object BoxedEmptyList extends BoxedType {
  val irType = UserDefinedType("emptyList")
  val superType = Some(BoxedDatum)
  val typeId = 2

  def pointerToTypeId(block : IrBlockBuilder, boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != UserDefinedType("emptyList")) {
       throw new InternalCompilerErrorException("Unexpected type for boxed value")
    }

    block.getelementptr("typeId")(
      resultType=IntegerType(16),
      basePointer=boxedValue,
      indices=List(0, 0, 0).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def pointerToGcState(block : IrBlockBuilder, boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != UserDefinedType("emptyList")) {
       throw new InternalCompilerErrorException("Unexpected type for boxed value")
    }

    block.getelementptr("gcState")(
      resultType=IntegerType(16),
      basePointer=boxedValue,
      indices=List(0, 0, 1).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }
}

object BoxedStringLike extends BoxedType {
  val irType = UserDefinedType("stringLike")
  val superType = Some(BoxedDatum)

  def createConstant(charLength : IrConstant, byteLength : IrConstant, utf8Data : IrConstant, typeId : IrConstant) : StructureConstant = {
    if (charLength.irType != IntegerType(32)) {
       throw new InternalCompilerErrorException("Unexpected type for field charLength")
    }

    if (byteLength.irType != IntegerType(32)) {
       throw new InternalCompilerErrorException("Unexpected type for field byteLength")
    }

    if (utf8Data.irType != PointerType(IntegerType(8))) {
       throw new InternalCompilerErrorException("Unexpected type for field utf8Data")
    }

    StructureConstant(List(
      superType.get.createConstant(
        typeId=typeId
      ),
      charLength,
      byteLength,
      utf8Data
    ), userDefinedType=Some(irType))
  }

  def pointerToCharLength(block : IrBlockBuilder, boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != UserDefinedType("stringLike")) {
       throw new InternalCompilerErrorException("Unexpected type for boxed value")
    }

    block.getelementptr("charLength")(
      resultType=IntegerType(32),
      basePointer=boxedValue,
      indices=List(0, 0).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def pointerToByteLength(block : IrBlockBuilder, boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != UserDefinedType("stringLike")) {
       throw new InternalCompilerErrorException("Unexpected type for boxed value")
    }

    block.getelementptr("byteLength")(
      resultType=IntegerType(32),
      basePointer=boxedValue,
      indices=List(0, 1).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def pointerToUtf8Data(block : IrBlockBuilder, boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != UserDefinedType("stringLike")) {
       throw new InternalCompilerErrorException("Unexpected type for boxed value")
    }

    block.getelementptr("utf8Data")(
      resultType=PointerType(IntegerType(8)),
      basePointer=boxedValue,
      indices=List(0, 2).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def pointerToTypeId(block : IrBlockBuilder, boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != UserDefinedType("stringLike")) {
       throw new InternalCompilerErrorException("Unexpected type for boxed value")
    }

    block.getelementptr("typeId")(
      resultType=IntegerType(16),
      basePointer=boxedValue,
      indices=List(0, 0, 0).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def pointerToGcState(block : IrBlockBuilder, boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != UserDefinedType("stringLike")) {
       throw new InternalCompilerErrorException("Unexpected type for boxed value")
    }

    block.getelementptr("gcState")(
      resultType=IntegerType(16),
      basePointer=boxedValue,
      indices=List(0, 0, 1).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }
}

object BoxedString extends BoxedType {
  val irType = UserDefinedType("string")
  val superType = Some(BoxedStringLike)
  val typeId = 3

  def createConstant(charLength : IrConstant, byteLength : IrConstant, utf8Data : IrConstant) : StructureConstant = {
    StructureConstant(List(
      superType.get.createConstant(
        charLength=charLength,
        byteLength=byteLength,
        utf8Data=utf8Data,
        typeId=IntegerConstant(IntegerType(16), typeId)
      )
    ), userDefinedType=Some(irType))
  }

  def pointerToCharLength(block : IrBlockBuilder, boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != UserDefinedType("string")) {
       throw new InternalCompilerErrorException("Unexpected type for boxed value")
    }

    block.getelementptr("charLength")(
      resultType=IntegerType(32),
      basePointer=boxedValue,
      indices=List(0, 0, 0).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def pointerToByteLength(block : IrBlockBuilder, boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != UserDefinedType("string")) {
       throw new InternalCompilerErrorException("Unexpected type for boxed value")
    }

    block.getelementptr("byteLength")(
      resultType=IntegerType(32),
      basePointer=boxedValue,
      indices=List(0, 0, 1).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def pointerToUtf8Data(block : IrBlockBuilder, boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != UserDefinedType("string")) {
       throw new InternalCompilerErrorException("Unexpected type for boxed value")
    }

    block.getelementptr("utf8Data")(
      resultType=PointerType(IntegerType(8)),
      basePointer=boxedValue,
      indices=List(0, 0, 2).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def pointerToTypeId(block : IrBlockBuilder, boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != UserDefinedType("string")) {
       throw new InternalCompilerErrorException("Unexpected type for boxed value")
    }

    block.getelementptr("typeId")(
      resultType=IntegerType(16),
      basePointer=boxedValue,
      indices=List(0, 0, 0, 0).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def pointerToGcState(block : IrBlockBuilder, boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != UserDefinedType("string")) {
       throw new InternalCompilerErrorException("Unexpected type for boxed value")
    }

    block.getelementptr("gcState")(
      resultType=IntegerType(16),
      basePointer=boxedValue,
      indices=List(0, 0, 0, 1).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }
}

object BoxedSymbol extends BoxedType {
  val irType = UserDefinedType("symbol")
  val superType = Some(BoxedStringLike)
  val typeId = 4

  def createConstant(charLength : IrConstant, byteLength : IrConstant, utf8Data : IrConstant) : StructureConstant = {
    StructureConstant(List(
      superType.get.createConstant(
        charLength=charLength,
        byteLength=byteLength,
        utf8Data=utf8Data,
        typeId=IntegerConstant(IntegerType(16), typeId)
      )
    ), userDefinedType=Some(irType))
  }

  def pointerToCharLength(block : IrBlockBuilder, boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != UserDefinedType("symbol")) {
       throw new InternalCompilerErrorException("Unexpected type for boxed value")
    }

    block.getelementptr("charLength")(
      resultType=IntegerType(32),
      basePointer=boxedValue,
      indices=List(0, 0, 0).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def pointerToByteLength(block : IrBlockBuilder, boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != UserDefinedType("symbol")) {
       throw new InternalCompilerErrorException("Unexpected type for boxed value")
    }

    block.getelementptr("byteLength")(
      resultType=IntegerType(32),
      basePointer=boxedValue,
      indices=List(0, 0, 1).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def pointerToUtf8Data(block : IrBlockBuilder, boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != UserDefinedType("symbol")) {
       throw new InternalCompilerErrorException("Unexpected type for boxed value")
    }

    block.getelementptr("utf8Data")(
      resultType=PointerType(IntegerType(8)),
      basePointer=boxedValue,
      indices=List(0, 0, 2).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def pointerToTypeId(block : IrBlockBuilder, boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != UserDefinedType("symbol")) {
       throw new InternalCompilerErrorException("Unexpected type for boxed value")
    }

    block.getelementptr("typeId")(
      resultType=IntegerType(16),
      basePointer=boxedValue,
      indices=List(0, 0, 0, 0).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def pointerToGcState(block : IrBlockBuilder, boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != UserDefinedType("symbol")) {
       throw new InternalCompilerErrorException("Unexpected type for boxed value")
    }

    block.getelementptr("gcState")(
      resultType=IntegerType(16),
      basePointer=boxedValue,
      indices=List(0, 0, 0, 1).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }
}

object BoxedBoolean extends BoxedType {
  val irType = UserDefinedType("boolean")
  val superType = Some(BoxedDatum)
  val typeId = 5

  def pointerToValue(block : IrBlockBuilder, boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != UserDefinedType("boolean")) {
       throw new InternalCompilerErrorException("Unexpected type for boxed value")
    }

    block.getelementptr("value")(
      resultType=IntegerType(1),
      basePointer=boxedValue,
      indices=List(0, 0).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def pointerToTypeId(block : IrBlockBuilder, boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != UserDefinedType("boolean")) {
       throw new InternalCompilerErrorException("Unexpected type for boxed value")
    }

    block.getelementptr("typeId")(
      resultType=IntegerType(16),
      basePointer=boxedValue,
      indices=List(0, 0, 0).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def pointerToGcState(block : IrBlockBuilder, boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != UserDefinedType("boolean")) {
       throw new InternalCompilerErrorException("Unexpected type for boxed value")
    }

    block.getelementptr("gcState")(
      resultType=IntegerType(16),
      basePointer=boxedValue,
      indices=List(0, 0, 1).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }
}

object BoxedNumeric extends BoxedType {
  val irType = UserDefinedType("numeric")
  val superType = Some(BoxedDatum)

  def createConstant(typeId : IrConstant) : StructureConstant = {
    StructureConstant(List(
      superType.get.createConstant(
        typeId=typeId
      )
    ), userDefinedType=Some(irType))
  }

  def pointerToTypeId(block : IrBlockBuilder, boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != UserDefinedType("numeric")) {
       throw new InternalCompilerErrorException("Unexpected type for boxed value")
    }

    block.getelementptr("typeId")(
      resultType=IntegerType(16),
      basePointer=boxedValue,
      indices=List(0, 0, 0).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def pointerToGcState(block : IrBlockBuilder, boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != UserDefinedType("numeric")) {
       throw new InternalCompilerErrorException("Unexpected type for boxed value")
    }

    block.getelementptr("gcState")(
      resultType=IntegerType(16),
      basePointer=boxedValue,
      indices=List(0, 0, 1).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }
}

object BoxedExactInteger extends BoxedType {
  val irType = UserDefinedType("exactInteger")
  val superType = Some(BoxedNumeric)
  val typeId = 6

  def createConstant(value : IrConstant) : StructureConstant = {
    if (value.irType != IntegerType(64)) {
       throw new InternalCompilerErrorException("Unexpected type for field value")
    }

    StructureConstant(List(
      superType.get.createConstant(
        typeId=IntegerConstant(IntegerType(16), typeId)
      ),
      value
    ), userDefinedType=Some(irType))
  }

  def pointerToValue(block : IrBlockBuilder, boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != UserDefinedType("exactInteger")) {
       throw new InternalCompilerErrorException("Unexpected type for boxed value")
    }

    block.getelementptr("value")(
      resultType=IntegerType(64),
      basePointer=boxedValue,
      indices=List(0, 0).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def pointerToTypeId(block : IrBlockBuilder, boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != UserDefinedType("exactInteger")) {
       throw new InternalCompilerErrorException("Unexpected type for boxed value")
    }

    block.getelementptr("typeId")(
      resultType=IntegerType(16),
      basePointer=boxedValue,
      indices=List(0, 0, 0, 0).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def pointerToGcState(block : IrBlockBuilder, boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != UserDefinedType("exactInteger")) {
       throw new InternalCompilerErrorException("Unexpected type for boxed value")
    }

    block.getelementptr("gcState")(
      resultType=IntegerType(16),
      basePointer=boxedValue,
      indices=List(0, 0, 0, 1).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }
}

object BoxedInexactRational extends BoxedType {
  val irType = UserDefinedType("inexactRational")
  val superType = Some(BoxedNumeric)
  val typeId = 7

  def createConstant(value : IrConstant) : StructureConstant = {
    if (value.irType != DoubleType) {
       throw new InternalCompilerErrorException("Unexpected type for field value")
    }

    StructureConstant(List(
      superType.get.createConstant(
        typeId=IntegerConstant(IntegerType(16), typeId)
      ),
      value
    ), userDefinedType=Some(irType))
  }

  def pointerToValue(block : IrBlockBuilder, boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != UserDefinedType("inexactRational")) {
       throw new InternalCompilerErrorException("Unexpected type for boxed value")
    }

    block.getelementptr("value")(
      resultType=DoubleType,
      basePointer=boxedValue,
      indices=List(0, 0).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def pointerToTypeId(block : IrBlockBuilder, boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != UserDefinedType("inexactRational")) {
       throw new InternalCompilerErrorException("Unexpected type for boxed value")
    }

    block.getelementptr("typeId")(
      resultType=IntegerType(16),
      basePointer=boxedValue,
      indices=List(0, 0, 0, 0).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def pointerToGcState(block : IrBlockBuilder, boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != UserDefinedType("inexactRational")) {
       throw new InternalCompilerErrorException("Unexpected type for boxed value")
    }

    block.getelementptr("gcState")(
      resultType=IntegerType(16),
      basePointer=boxedValue,
      indices=List(0, 0, 0, 1).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }
}

object BoxedCharacter extends BoxedType {
  val irType = UserDefinedType("character")
  val superType = Some(BoxedDatum)
  val typeId = 8

  def createConstant(unicodeChar : IrConstant) : StructureConstant = {
    if (unicodeChar.irType != IntegerType(32)) {
       throw new InternalCompilerErrorException("Unexpected type for field unicodeChar")
    }

    StructureConstant(List(
      superType.get.createConstant(
        typeId=IntegerConstant(IntegerType(16), typeId)
      ),
      unicodeChar
    ), userDefinedType=Some(irType))
  }

  def pointerToUnicodeChar(block : IrBlockBuilder, boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != UserDefinedType("character")) {
       throw new InternalCompilerErrorException("Unexpected type for boxed value")
    }

    block.getelementptr("unicodeChar")(
      resultType=IntegerType(32),
      basePointer=boxedValue,
      indices=List(0, 0).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def pointerToTypeId(block : IrBlockBuilder, boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != UserDefinedType("character")) {
       throw new InternalCompilerErrorException("Unexpected type for boxed value")
    }

    block.getelementptr("typeId")(
      resultType=IntegerType(16),
      basePointer=boxedValue,
      indices=List(0, 0, 0).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def pointerToGcState(block : IrBlockBuilder, boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != UserDefinedType("character")) {
       throw new InternalCompilerErrorException("Unexpected type for boxed value")
    }

    block.getelementptr("gcState")(
      resultType=IntegerType(16),
      basePointer=boxedValue,
      indices=List(0, 0, 1).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }
}

object BoxedByteVector extends BoxedType {
  val irType = UserDefinedType("byteVector")
  val superType = Some(BoxedDatum)
  val typeId = 9

  def createConstant(length : IrConstant, data : IrConstant) : StructureConstant = {
    if (length.irType != IntegerType(32)) {
       throw new InternalCompilerErrorException("Unexpected type for field length")
    }

    if (data.irType != PointerType(IntegerType(8))) {
       throw new InternalCompilerErrorException("Unexpected type for field data")
    }

    StructureConstant(List(
      superType.get.createConstant(
        typeId=IntegerConstant(IntegerType(16), typeId)
      ),
      length,
      data
    ), userDefinedType=Some(irType))
  }

  def pointerToLength(block : IrBlockBuilder, boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != UserDefinedType("byteVector")) {
       throw new InternalCompilerErrorException("Unexpected type for boxed value")
    }

    block.getelementptr("length")(
      resultType=IntegerType(32),
      basePointer=boxedValue,
      indices=List(0, 0).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def pointerToData(block : IrBlockBuilder, boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != UserDefinedType("byteVector")) {
       throw new InternalCompilerErrorException("Unexpected type for boxed value")
    }

    block.getelementptr("data")(
      resultType=PointerType(IntegerType(8)),
      basePointer=boxedValue,
      indices=List(0, 1).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def pointerToTypeId(block : IrBlockBuilder, boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != UserDefinedType("byteVector")) {
       throw new InternalCompilerErrorException("Unexpected type for boxed value")
    }

    block.getelementptr("typeId")(
      resultType=IntegerType(16),
      basePointer=boxedValue,
      indices=List(0, 0, 0).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def pointerToGcState(block : IrBlockBuilder, boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != UserDefinedType("byteVector")) {
       throw new InternalCompilerErrorException("Unexpected type for boxed value")
    }

    block.getelementptr("gcState")(
      resultType=IntegerType(16),
      basePointer=boxedValue,
      indices=List(0, 0, 1).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }
}

object BoxedProcedure extends BoxedType {
  val irType = UserDefinedType("procedure")
  val superType = Some(BoxedDatum)
  val typeId = 10

  def createConstant(closure : IrConstant, entryPoint : IrConstant) : StructureConstant = {
    if (closure.irType != PointerType(UserDefinedType("closure"))) {
       throw new InternalCompilerErrorException("Unexpected type for field closure")
    }

    if (entryPoint.irType != PointerType(FunctionType(PointerType(UserDefinedType("datum")), List(PointerType(UserDefinedType("closure")), PointerType(UserDefinedType("datum")) )))) {
       throw new InternalCompilerErrorException("Unexpected type for field entryPoint")
    }

    StructureConstant(List(
      superType.get.createConstant(
        typeId=IntegerConstant(IntegerType(16), typeId)
      ),
      closure,
      entryPoint
    ), userDefinedType=Some(irType))
  }

  def pointerToClosure(block : IrBlockBuilder, boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != UserDefinedType("procedure")) {
       throw new InternalCompilerErrorException("Unexpected type for boxed value")
    }

    block.getelementptr("closure")(
      resultType=PointerType(UserDefinedType("closure")),
      basePointer=boxedValue,
      indices=List(0, 0).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def pointerToEntryPoint(block : IrBlockBuilder, boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != UserDefinedType("procedure")) {
       throw new InternalCompilerErrorException("Unexpected type for boxed value")
    }

    block.getelementptr("entryPoint")(
      resultType=PointerType(FunctionType(PointerType(UserDefinedType("datum")), List(PointerType(UserDefinedType("closure")), PointerType(UserDefinedType("datum")) ))),
      basePointer=boxedValue,
      indices=List(0, 1).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def pointerToTypeId(block : IrBlockBuilder, boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != UserDefinedType("procedure")) {
       throw new InternalCompilerErrorException("Unexpected type for boxed value")
    }

    block.getelementptr("typeId")(
      resultType=IntegerType(16),
      basePointer=boxedValue,
      indices=List(0, 0, 0).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def pointerToGcState(block : IrBlockBuilder, boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != UserDefinedType("procedure")) {
       throw new InternalCompilerErrorException("Unexpected type for boxed value")
    }

    block.getelementptr("gcState")(
      resultType=IntegerType(16),
      basePointer=boxedValue,
      indices=List(0, 0, 1).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }
}

object BoxedVectorLike extends BoxedType {
  val irType = UserDefinedType("vectorLike")
  val superType = Some(BoxedDatum)

  def createConstant(length : IrConstant, elements : IrConstant, typeId : IrConstant) : StructureConstant = {
    if (length.irType != IntegerType(32)) {
       throw new InternalCompilerErrorException("Unexpected type for field length")
    }

    if (elements.irType != PointerType(PointerType(UserDefinedType("datum")))) {
       throw new InternalCompilerErrorException("Unexpected type for field elements")
    }

    StructureConstant(List(
      superType.get.createConstant(
        typeId=typeId
      ),
      length,
      elements
    ), userDefinedType=Some(irType))
  }

  def pointerToLength(block : IrBlockBuilder, boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != UserDefinedType("vectorLike")) {
       throw new InternalCompilerErrorException("Unexpected type for boxed value")
    }

    block.getelementptr("length")(
      resultType=IntegerType(32),
      basePointer=boxedValue,
      indices=List(0, 0).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def pointerToElements(block : IrBlockBuilder, boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != UserDefinedType("vectorLike")) {
       throw new InternalCompilerErrorException("Unexpected type for boxed value")
    }

    block.getelementptr("elements")(
      resultType=PointerType(PointerType(UserDefinedType("datum"))),
      basePointer=boxedValue,
      indices=List(0, 1).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def pointerToTypeId(block : IrBlockBuilder, boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != UserDefinedType("vectorLike")) {
       throw new InternalCompilerErrorException("Unexpected type for boxed value")
    }

    block.getelementptr("typeId")(
      resultType=IntegerType(16),
      basePointer=boxedValue,
      indices=List(0, 0, 0).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def pointerToGcState(block : IrBlockBuilder, boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != UserDefinedType("vectorLike")) {
       throw new InternalCompilerErrorException("Unexpected type for boxed value")
    }

    block.getelementptr("gcState")(
      resultType=IntegerType(16),
      basePointer=boxedValue,
      indices=List(0, 0, 1).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }
}

object BoxedVector extends BoxedType {
  val irType = UserDefinedType("vector")
  val superType = Some(BoxedVectorLike)
  val typeId = 32768

  def createConstant(length : IrConstant, elements : IrConstant) : StructureConstant = {
    StructureConstant(List(
      superType.get.createConstant(
        length=length,
        elements=elements,
        typeId=IntegerConstant(IntegerType(16), typeId)
      )
    ), userDefinedType=Some(irType))
  }

  def pointerToLength(block : IrBlockBuilder, boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != UserDefinedType("vector")) {
       throw new InternalCompilerErrorException("Unexpected type for boxed value")
    }

    block.getelementptr("length")(
      resultType=IntegerType(32),
      basePointer=boxedValue,
      indices=List(0, 0, 0).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def pointerToElements(block : IrBlockBuilder, boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != UserDefinedType("vector")) {
       throw new InternalCompilerErrorException("Unexpected type for boxed value")
    }

    block.getelementptr("elements")(
      resultType=PointerType(PointerType(UserDefinedType("datum"))),
      basePointer=boxedValue,
      indices=List(0, 0, 1).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def pointerToTypeId(block : IrBlockBuilder, boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != UserDefinedType("vector")) {
       throw new InternalCompilerErrorException("Unexpected type for boxed value")
    }

    block.getelementptr("typeId")(
      resultType=IntegerType(16),
      basePointer=boxedValue,
      indices=List(0, 0, 0, 0).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def pointerToGcState(block : IrBlockBuilder, boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != UserDefinedType("vector")) {
       throw new InternalCompilerErrorException("Unexpected type for boxed value")
    }

    block.getelementptr("gcState")(
      resultType=IntegerType(16),
      basePointer=boxedValue,
      indices=List(0, 0, 0, 1).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }
}

object BoxedClosure extends BoxedType {
  val irType = UserDefinedType("closure")
  val superType = Some(BoxedVectorLike)
  val typeId = 32769

  def createConstant(length : IrConstant, elements : IrConstant) : StructureConstant = {
    StructureConstant(List(
      superType.get.createConstant(
        length=length,
        elements=elements,
        typeId=IntegerConstant(IntegerType(16), typeId)
      )
    ), userDefinedType=Some(irType))
  }

  def pointerToLength(block : IrBlockBuilder, boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != UserDefinedType("closure")) {
       throw new InternalCompilerErrorException("Unexpected type for boxed value")
    }

    block.getelementptr("length")(
      resultType=IntegerType(32),
      basePointer=boxedValue,
      indices=List(0, 0, 0).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def pointerToElements(block : IrBlockBuilder, boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != UserDefinedType("closure")) {
       throw new InternalCompilerErrorException("Unexpected type for boxed value")
    }

    block.getelementptr("elements")(
      resultType=PointerType(PointerType(UserDefinedType("datum"))),
      basePointer=boxedValue,
      indices=List(0, 0, 1).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def pointerToTypeId(block : IrBlockBuilder, boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != UserDefinedType("closure")) {
       throw new InternalCompilerErrorException("Unexpected type for boxed value")
    }

    block.getelementptr("typeId")(
      resultType=IntegerType(16),
      basePointer=boxedValue,
      indices=List(0, 0, 0, 0).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def pointerToGcState(block : IrBlockBuilder, boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != UserDefinedType("closure")) {
       throw new InternalCompilerErrorException("Unexpected type for boxed value")
    }

    block.getelementptr("gcState")(
      resultType=IntegerType(16),
      basePointer=boxedValue,
      indices=List(0, 0, 0, 1).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }
}

