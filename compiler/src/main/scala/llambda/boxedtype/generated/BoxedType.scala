/*****************************************************************
 * This file is generated by gen-types.py. Do not edit manually. *
 *****************************************************************/

package llambda.boxedtype

import llambda.codegen.llvmir._
import llambda.InternalCompilerErrorException

sealed abstract class BoxedType {
  val name : String
  val irType : FirstClassType
  val supertype : Option[BoxedType]
  val directSubtypes : Set[BoxedType]
  val isAbstract : Boolean
  val tbaaIndex : Int

  def genTypeCheck(startBlock : IrBlockBuilder)(boxedValue : IrValue, successBlock : IrBranchTarget, failBlock : IrBranchTarget)

  def isTypeOrSubtypeOf(otherType : BoxedType) : Boolean = {
    if (otherType == this) {
      return true
    }

    supertype map (_.isTypeOrSubtypeOf(otherType)) getOrElse false
  }

  def isTypeOrSupertypeOf(otherType : BoxedType) : Boolean = {
    if (otherType == this) {
      return true
    }

    directSubtypes exists (_.isTypeOrSupertypeOf(otherType))
  }

  def concreteTypes : Set[ConcreteBoxedType] = this match {
    case concreteType : ConcreteBoxedType => Set(concreteType)
    case abstractType => directSubtypes.flatMap(_.concreteTypes)
  }

  def genPointerBitcast(block : IrBlockBuilder)(uncastValue : IrValue) : IrValue =
    if (uncastValue.irType == PointerType(irType)) {
      uncastValue
    }
    else {
      block.bitcastTo(name + "Cast")(uncastValue, PointerType(irType))
    }

  def genPointerToTypeId(block : IrBlockBuilder)(boxedValue : IrValue) : IrValue
  def genStoreToTypeId(block : IrBlockBuilder)(toStore : IrValue, boxedValue : IrValue) : Unit
  def genLoadFromTypeId(block : IrBlockBuilder)(boxedValue : IrValue) : IrValue

  def genPointerToGcState(block : IrBlockBuilder)(boxedValue : IrValue) : IrValue
  def genStoreToGcState(block : IrBlockBuilder)(toStore : IrValue, boxedValue : IrValue) : Unit
  def genLoadFromGcState(block : IrBlockBuilder)(boxedValue : IrValue) : IrValue
}

sealed abstract class ConcreteBoxedType extends BoxedType {
  val typeId : Int
}

object BoxedDatum extends BoxedType {
  val name = "datum"
  val irType = UserDefinedType("datum")
  val supertype = None
  val directSubtypes = Set[BoxedType](BoxedUnspecific, BoxedListElement, BoxedStringLike, BoxedBoolean, BoxedNumeric, BoxedCharacter, BoxedBytevector, BoxedProcedure, BoxedMutableVar, BoxedVectorLike)
  val isAbstract = true
  val tbaaIndex = 0

  def createConstant(typeId : IrConstant) : StructureConstant = {
    if (typeId.irType != IntegerType(16)) {
      throw new InternalCompilerErrorException("Unexpected type for field typeId")
    }

    StructureConstant(List(
      typeId,
      IntegerConstant(IntegerType(16), 0)
    ), userDefinedType=Some(irType))
  }

  def genTypeCheck(startBlock : IrBlockBuilder)(boxedValue : IrValue, successBlock : IrBranchTarget, failBlock : IrBranchTarget) {
    startBlock.uncondBranch(successBlock)
  }

  def genPointerToTypeId(block : IrBlockBuilder)(boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != PointerType(UserDefinedType("datum"))) {
       throw new InternalCompilerErrorException(s"Unexpected type for boxed value. Passed ${boxedValue.irType}, expected %datum*")
    }

    block.getelementptr("typeIdPtr")(
      elementType=IntegerType(16),
      basePointer=boxedValue,
      indices=List(0, 0).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genStoreToTypeId(block : IrBlockBuilder)(toStore : IrValue, boxedValue : IrValue) : Unit = {
    val typeIdPointer = genPointerToTypeId(block)(boxedValue)
    block.store(toStore, typeIdPointer, tbaaIndex=Some(tbaaIndex))
  }

  def genLoadFromTypeId(block : IrBlockBuilder)(boxedValue : IrValue) : IrValue = {
    val typeIdPointer = genPointerToTypeId(block)(boxedValue)
    block.load("typeId")(typeIdPointer, tbaaIndex=Some(tbaaIndex))
  }

  def genPointerToGcState(block : IrBlockBuilder)(boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != PointerType(UserDefinedType("datum"))) {
       throw new InternalCompilerErrorException(s"Unexpected type for boxed value. Passed ${boxedValue.irType}, expected %datum*")
    }

    block.getelementptr("gcStatePtr")(
      elementType=IntegerType(16),
      basePointer=boxedValue,
      indices=List(0, 1).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genStoreToGcState(block : IrBlockBuilder)(toStore : IrValue, boxedValue : IrValue) : Unit = {
    val gcStatePointer = genPointerToGcState(block)(boxedValue)
    block.store(toStore, gcStatePointer, tbaaIndex=Some(tbaaIndex))
  }

  def genLoadFromGcState(block : IrBlockBuilder)(boxedValue : IrValue) : IrValue = {
    val gcStatePointer = genPointerToGcState(block)(boxedValue)
    block.load("gcState")(gcStatePointer, tbaaIndex=Some(tbaaIndex))
  }
}

object BoxedUnspecific extends ConcreteBoxedType {
  val name = "unspecific"
  val irType = UserDefinedType("unspecific")
  val supertype = Some(BoxedDatum)
  val directSubtypes = Set[BoxedType]()
  val isAbstract = false
  val tbaaIndex = 1
  val typeId = 0

  def genTypeCheck(startBlock : IrBlockBuilder)(boxedValue : IrValue, successBlock : IrBranchTarget, failBlock : IrBranchTarget) {
    val datumValue = BoxedDatum.genPointerBitcast(startBlock)(boxedValue)
    val typeIdPointer = BoxedDatum.genPointerToTypeId(startBlock)(datumValue)
    val typeId = startBlock.load("typeId")(typeIdPointer)

    val isUnspecific = startBlock.icmp("isUnspecific")(ComparisonCond.Equal, None, typeId, IntegerConstant(IntegerType(16), 0))
    startBlock.condBranch(isUnspecific, successBlock, failBlock)
  }

  def genPointerToTypeId(block : IrBlockBuilder)(boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != PointerType(UserDefinedType("unspecific"))) {
       throw new InternalCompilerErrorException(s"Unexpected type for boxed value. Passed ${boxedValue.irType}, expected %unspecific*")
    }

    block.getelementptr("typeIdPtr")(
      elementType=IntegerType(16),
      basePointer=boxedValue,
      indices=List(0, 0, 0).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genStoreToTypeId(block : IrBlockBuilder)(toStore : IrValue, boxedValue : IrValue) : Unit = {
    val typeIdPointer = genPointerToTypeId(block)(boxedValue)
    block.store(toStore, typeIdPointer, tbaaIndex=Some(tbaaIndex))
  }

  def genLoadFromTypeId(block : IrBlockBuilder)(boxedValue : IrValue) : IrValue = {
    val typeIdPointer = genPointerToTypeId(block)(boxedValue)
    block.load("typeId")(typeIdPointer, tbaaIndex=Some(tbaaIndex))
  }

  def genPointerToGcState(block : IrBlockBuilder)(boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != PointerType(UserDefinedType("unspecific"))) {
       throw new InternalCompilerErrorException(s"Unexpected type for boxed value. Passed ${boxedValue.irType}, expected %unspecific*")
    }

    block.getelementptr("gcStatePtr")(
      elementType=IntegerType(16),
      basePointer=boxedValue,
      indices=List(0, 0, 1).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genStoreToGcState(block : IrBlockBuilder)(toStore : IrValue, boxedValue : IrValue) : Unit = {
    val gcStatePointer = genPointerToGcState(block)(boxedValue)
    block.store(toStore, gcStatePointer, tbaaIndex=Some(tbaaIndex))
  }

  def genLoadFromGcState(block : IrBlockBuilder)(boxedValue : IrValue) : IrValue = {
    val gcStatePointer = genPointerToGcState(block)(boxedValue)
    block.load("gcState")(gcStatePointer, tbaaIndex=Some(tbaaIndex))
  }
}

object BoxedListElement extends BoxedType {
  val name = "listElement"
  val irType = UserDefinedType("listElement")
  val supertype = Some(BoxedDatum)
  val directSubtypes = Set[BoxedType](BoxedPair, BoxedEmptyList)
  val isAbstract = true
  val tbaaIndex = 2

  def createConstant(typeId : IrConstant) : StructureConstant = {
    StructureConstant(List(
      supertype.get.createConstant(
        typeId=typeId
      )
    ), userDefinedType=Some(irType))
  }

  def genTypeCheck(startBlock : IrBlockBuilder)(boxedValue : IrValue, successBlock : IrBranchTarget, failBlock : IrBranchTarget) {
    val datumValue = BoxedDatum.genPointerBitcast(startBlock)(boxedValue)
    val typeIdPointer = BoxedDatum.genPointerToTypeId(startBlock)(datumValue)
    val typeId = startBlock.load("typeId")(typeIdPointer)

    val isPair = startBlock.icmp("isPair")(ComparisonCond.Equal, None, typeId, IntegerConstant(IntegerType(16), 1))
    val notPairBlock = startBlock.startChildBlock("notPair")
    startBlock.condBranch(isPair, successBlock, notPairBlock)

    val isEmptyList = notPairBlock.icmp("isEmptyList")(ComparisonCond.Equal, None, typeId, IntegerConstant(IntegerType(16), 2))
    notPairBlock.condBranch(isEmptyList, successBlock, failBlock)
  }

  def genPointerToTypeId(block : IrBlockBuilder)(boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != PointerType(UserDefinedType("listElement"))) {
       throw new InternalCompilerErrorException(s"Unexpected type for boxed value. Passed ${boxedValue.irType}, expected %listElement*")
    }

    block.getelementptr("typeIdPtr")(
      elementType=IntegerType(16),
      basePointer=boxedValue,
      indices=List(0, 0, 0).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genStoreToTypeId(block : IrBlockBuilder)(toStore : IrValue, boxedValue : IrValue) : Unit = {
    val typeIdPointer = genPointerToTypeId(block)(boxedValue)
    block.store(toStore, typeIdPointer, tbaaIndex=Some(tbaaIndex))
  }

  def genLoadFromTypeId(block : IrBlockBuilder)(boxedValue : IrValue) : IrValue = {
    val typeIdPointer = genPointerToTypeId(block)(boxedValue)
    block.load("typeId")(typeIdPointer, tbaaIndex=Some(tbaaIndex))
  }

  def genPointerToGcState(block : IrBlockBuilder)(boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != PointerType(UserDefinedType("listElement"))) {
       throw new InternalCompilerErrorException(s"Unexpected type for boxed value. Passed ${boxedValue.irType}, expected %listElement*")
    }

    block.getelementptr("gcStatePtr")(
      elementType=IntegerType(16),
      basePointer=boxedValue,
      indices=List(0, 0, 1).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genStoreToGcState(block : IrBlockBuilder)(toStore : IrValue, boxedValue : IrValue) : Unit = {
    val gcStatePointer = genPointerToGcState(block)(boxedValue)
    block.store(toStore, gcStatePointer, tbaaIndex=Some(tbaaIndex))
  }

  def genLoadFromGcState(block : IrBlockBuilder)(boxedValue : IrValue) : IrValue = {
    val gcStatePointer = genPointerToGcState(block)(boxedValue)
    block.load("gcState")(gcStatePointer, tbaaIndex=Some(tbaaIndex))
  }
}

object BoxedPair extends ConcreteBoxedType {
  val name = "pair"
  val irType = UserDefinedType("pair")
  val supertype = Some(BoxedListElement)
  val directSubtypes = Set[BoxedType]()
  val isAbstract = false
  val tbaaIndex = 3
  val typeId = 1

  def createConstant(car : IrConstant, cdr : IrConstant) : StructureConstant = {
    if (car.irType != PointerType(UserDefinedType("datum"))) {
      throw new InternalCompilerErrorException("Unexpected type for field car")
    }

    if (cdr.irType != PointerType(UserDefinedType("datum"))) {
      throw new InternalCompilerErrorException("Unexpected type for field cdr")
    }

    StructureConstant(List(
      supertype.get.createConstant(
        typeId=IntegerConstant(IntegerType(16), typeId)
      ),
      car,
      cdr
    ), userDefinedType=Some(irType))
  }

  def genTypeCheck(startBlock : IrBlockBuilder)(boxedValue : IrValue, successBlock : IrBranchTarget, failBlock : IrBranchTarget) {
    val datumValue = BoxedDatum.genPointerBitcast(startBlock)(boxedValue)
    val typeIdPointer = BoxedDatum.genPointerToTypeId(startBlock)(datumValue)
    val typeId = startBlock.load("typeId")(typeIdPointer)

    val isPair = startBlock.icmp("isPair")(ComparisonCond.Equal, None, typeId, IntegerConstant(IntegerType(16), 1))
    startBlock.condBranch(isPair, successBlock, failBlock)
  }

  def genPointerToTypeId(block : IrBlockBuilder)(boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != PointerType(UserDefinedType("pair"))) {
       throw new InternalCompilerErrorException(s"Unexpected type for boxed value. Passed ${boxedValue.irType}, expected %pair*")
    }

    block.getelementptr("typeIdPtr")(
      elementType=IntegerType(16),
      basePointer=boxedValue,
      indices=List(0, 0, 0, 0).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genStoreToTypeId(block : IrBlockBuilder)(toStore : IrValue, boxedValue : IrValue) : Unit = {
    val typeIdPointer = genPointerToTypeId(block)(boxedValue)
    block.store(toStore, typeIdPointer, tbaaIndex=Some(tbaaIndex))
  }

  def genLoadFromTypeId(block : IrBlockBuilder)(boxedValue : IrValue) : IrValue = {
    val typeIdPointer = genPointerToTypeId(block)(boxedValue)
    block.load("typeId")(typeIdPointer, tbaaIndex=Some(tbaaIndex))
  }

  def genPointerToGcState(block : IrBlockBuilder)(boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != PointerType(UserDefinedType("pair"))) {
       throw new InternalCompilerErrorException(s"Unexpected type for boxed value. Passed ${boxedValue.irType}, expected %pair*")
    }

    block.getelementptr("gcStatePtr")(
      elementType=IntegerType(16),
      basePointer=boxedValue,
      indices=List(0, 0, 0, 1).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genStoreToGcState(block : IrBlockBuilder)(toStore : IrValue, boxedValue : IrValue) : Unit = {
    val gcStatePointer = genPointerToGcState(block)(boxedValue)
    block.store(toStore, gcStatePointer, tbaaIndex=Some(tbaaIndex))
  }

  def genLoadFromGcState(block : IrBlockBuilder)(boxedValue : IrValue) : IrValue = {
    val gcStatePointer = genPointerToGcState(block)(boxedValue)
    block.load("gcState")(gcStatePointer, tbaaIndex=Some(tbaaIndex))
  }

  def genPointerToCar(block : IrBlockBuilder)(boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != PointerType(UserDefinedType("pair"))) {
       throw new InternalCompilerErrorException(s"Unexpected type for boxed value. Passed ${boxedValue.irType}, expected %pair*")
    }

    block.getelementptr("carPtr")(
      elementType=PointerType(UserDefinedType("datum")),
      basePointer=boxedValue,
      indices=List(0, 1).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genStoreToCar(block : IrBlockBuilder)(toStore : IrValue, boxedValue : IrValue) : Unit = {
    val carPointer = genPointerToCar(block)(boxedValue)
    block.store(toStore, carPointer, tbaaIndex=Some(tbaaIndex))
  }

  def genLoadFromCar(block : IrBlockBuilder)(boxedValue : IrValue) : IrValue = {
    val carPointer = genPointerToCar(block)(boxedValue)
    block.load("car")(carPointer, tbaaIndex=Some(tbaaIndex))
  }

  def genPointerToCdr(block : IrBlockBuilder)(boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != PointerType(UserDefinedType("pair"))) {
       throw new InternalCompilerErrorException(s"Unexpected type for boxed value. Passed ${boxedValue.irType}, expected %pair*")
    }

    block.getelementptr("cdrPtr")(
      elementType=PointerType(UserDefinedType("datum")),
      basePointer=boxedValue,
      indices=List(0, 2).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genStoreToCdr(block : IrBlockBuilder)(toStore : IrValue, boxedValue : IrValue) : Unit = {
    val cdrPointer = genPointerToCdr(block)(boxedValue)
    block.store(toStore, cdrPointer, tbaaIndex=Some(tbaaIndex))
  }

  def genLoadFromCdr(block : IrBlockBuilder)(boxedValue : IrValue) : IrValue = {
    val cdrPointer = genPointerToCdr(block)(boxedValue)
    block.load("cdr")(cdrPointer, tbaaIndex=Some(tbaaIndex))
  }
}

object BoxedEmptyList extends ConcreteBoxedType {
  val name = "emptyList"
  val irType = UserDefinedType("emptyList")
  val supertype = Some(BoxedListElement)
  val directSubtypes = Set[BoxedType]()
  val isAbstract = false
  val tbaaIndex = 4
  val typeId = 2

  def genTypeCheck(startBlock : IrBlockBuilder)(boxedValue : IrValue, successBlock : IrBranchTarget, failBlock : IrBranchTarget) {
    val datumValue = BoxedDatum.genPointerBitcast(startBlock)(boxedValue)
    val typeIdPointer = BoxedDatum.genPointerToTypeId(startBlock)(datumValue)
    val typeId = startBlock.load("typeId")(typeIdPointer)

    val isEmptyList = startBlock.icmp("isEmptyList")(ComparisonCond.Equal, None, typeId, IntegerConstant(IntegerType(16), 2))
    startBlock.condBranch(isEmptyList, successBlock, failBlock)
  }

  def genPointerToTypeId(block : IrBlockBuilder)(boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != PointerType(UserDefinedType("emptyList"))) {
       throw new InternalCompilerErrorException(s"Unexpected type for boxed value. Passed ${boxedValue.irType}, expected %emptyList*")
    }

    block.getelementptr("typeIdPtr")(
      elementType=IntegerType(16),
      basePointer=boxedValue,
      indices=List(0, 0, 0, 0).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genStoreToTypeId(block : IrBlockBuilder)(toStore : IrValue, boxedValue : IrValue) : Unit = {
    val typeIdPointer = genPointerToTypeId(block)(boxedValue)
    block.store(toStore, typeIdPointer, tbaaIndex=Some(tbaaIndex))
  }

  def genLoadFromTypeId(block : IrBlockBuilder)(boxedValue : IrValue) : IrValue = {
    val typeIdPointer = genPointerToTypeId(block)(boxedValue)
    block.load("typeId")(typeIdPointer, tbaaIndex=Some(tbaaIndex))
  }

  def genPointerToGcState(block : IrBlockBuilder)(boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != PointerType(UserDefinedType("emptyList"))) {
       throw new InternalCompilerErrorException(s"Unexpected type for boxed value. Passed ${boxedValue.irType}, expected %emptyList*")
    }

    block.getelementptr("gcStatePtr")(
      elementType=IntegerType(16),
      basePointer=boxedValue,
      indices=List(0, 0, 0, 1).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genStoreToGcState(block : IrBlockBuilder)(toStore : IrValue, boxedValue : IrValue) : Unit = {
    val gcStatePointer = genPointerToGcState(block)(boxedValue)
    block.store(toStore, gcStatePointer, tbaaIndex=Some(tbaaIndex))
  }

  def genLoadFromGcState(block : IrBlockBuilder)(boxedValue : IrValue) : IrValue = {
    val gcStatePointer = genPointerToGcState(block)(boxedValue)
    block.load("gcState")(gcStatePointer, tbaaIndex=Some(tbaaIndex))
  }
}

object BoxedStringLike extends BoxedType {
  val name = "stringLike"
  val irType = UserDefinedType("stringLike")
  val supertype = Some(BoxedDatum)
  val directSubtypes = Set[BoxedType](BoxedString, BoxedSymbol)
  val isAbstract = true
  val tbaaIndex = 5

  def createConstant(charLength : IrConstant, byteLength : IrConstant, utf8Data : IrConstant, typeId : IrConstant) : StructureConstant = {
    if (charLength.irType != IntegerType(32)) {
      throw new InternalCompilerErrorException("Unexpected type for field charLength")
    }

    if (byteLength.irType != IntegerType(32)) {
      throw new InternalCompilerErrorException("Unexpected type for field byteLength")
    }

    if (utf8Data.irType != PointerType(IntegerType(8))) {
      throw new InternalCompilerErrorException("Unexpected type for field utf8Data")
    }

    StructureConstant(List(
      supertype.get.createConstant(
        typeId=typeId
      ),
      charLength,
      byteLength,
      utf8Data
    ), userDefinedType=Some(irType))
  }

  def genTypeCheck(startBlock : IrBlockBuilder)(boxedValue : IrValue, successBlock : IrBranchTarget, failBlock : IrBranchTarget) {
    val datumValue = BoxedDatum.genPointerBitcast(startBlock)(boxedValue)
    val typeIdPointer = BoxedDatum.genPointerToTypeId(startBlock)(datumValue)
    val typeId = startBlock.load("typeId")(typeIdPointer)

    val isString = startBlock.icmp("isString")(ComparisonCond.Equal, None, typeId, IntegerConstant(IntegerType(16), 3))
    val notStringBlock = startBlock.startChildBlock("notString")
    startBlock.condBranch(isString, successBlock, notStringBlock)

    val isSymbol = notStringBlock.icmp("isSymbol")(ComparisonCond.Equal, None, typeId, IntegerConstant(IntegerType(16), 4))
    notStringBlock.condBranch(isSymbol, successBlock, failBlock)
  }

  def genPointerToTypeId(block : IrBlockBuilder)(boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != PointerType(UserDefinedType("stringLike"))) {
       throw new InternalCompilerErrorException(s"Unexpected type for boxed value. Passed ${boxedValue.irType}, expected %stringLike*")
    }

    block.getelementptr("typeIdPtr")(
      elementType=IntegerType(16),
      basePointer=boxedValue,
      indices=List(0, 0, 0).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genStoreToTypeId(block : IrBlockBuilder)(toStore : IrValue, boxedValue : IrValue) : Unit = {
    val typeIdPointer = genPointerToTypeId(block)(boxedValue)
    block.store(toStore, typeIdPointer, tbaaIndex=Some(tbaaIndex))
  }

  def genLoadFromTypeId(block : IrBlockBuilder)(boxedValue : IrValue) : IrValue = {
    val typeIdPointer = genPointerToTypeId(block)(boxedValue)
    block.load("typeId")(typeIdPointer, tbaaIndex=Some(tbaaIndex))
  }

  def genPointerToGcState(block : IrBlockBuilder)(boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != PointerType(UserDefinedType("stringLike"))) {
       throw new InternalCompilerErrorException(s"Unexpected type for boxed value. Passed ${boxedValue.irType}, expected %stringLike*")
    }

    block.getelementptr("gcStatePtr")(
      elementType=IntegerType(16),
      basePointer=boxedValue,
      indices=List(0, 0, 1).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genStoreToGcState(block : IrBlockBuilder)(toStore : IrValue, boxedValue : IrValue) : Unit = {
    val gcStatePointer = genPointerToGcState(block)(boxedValue)
    block.store(toStore, gcStatePointer, tbaaIndex=Some(tbaaIndex))
  }

  def genLoadFromGcState(block : IrBlockBuilder)(boxedValue : IrValue) : IrValue = {
    val gcStatePointer = genPointerToGcState(block)(boxedValue)
    block.load("gcState")(gcStatePointer, tbaaIndex=Some(tbaaIndex))
  }

  def genPointerToCharLength(block : IrBlockBuilder)(boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != PointerType(UserDefinedType("stringLike"))) {
       throw new InternalCompilerErrorException(s"Unexpected type for boxed value. Passed ${boxedValue.irType}, expected %stringLike*")
    }

    block.getelementptr("charLengthPtr")(
      elementType=IntegerType(32),
      basePointer=boxedValue,
      indices=List(0, 1).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genStoreToCharLength(block : IrBlockBuilder)(toStore : IrValue, boxedValue : IrValue) : Unit = {
    val charLengthPointer = genPointerToCharLength(block)(boxedValue)
    block.store(toStore, charLengthPointer, tbaaIndex=Some(tbaaIndex))
  }

  def genLoadFromCharLength(block : IrBlockBuilder)(boxedValue : IrValue) : IrValue = {
    val charLengthPointer = genPointerToCharLength(block)(boxedValue)
    block.load("charLength")(charLengthPointer, tbaaIndex=Some(tbaaIndex))
  }

  def genPointerToByteLength(block : IrBlockBuilder)(boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != PointerType(UserDefinedType("stringLike"))) {
       throw new InternalCompilerErrorException(s"Unexpected type for boxed value. Passed ${boxedValue.irType}, expected %stringLike*")
    }

    block.getelementptr("byteLengthPtr")(
      elementType=IntegerType(32),
      basePointer=boxedValue,
      indices=List(0, 2).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genStoreToByteLength(block : IrBlockBuilder)(toStore : IrValue, boxedValue : IrValue) : Unit = {
    val byteLengthPointer = genPointerToByteLength(block)(boxedValue)
    block.store(toStore, byteLengthPointer, tbaaIndex=Some(tbaaIndex))
  }

  def genLoadFromByteLength(block : IrBlockBuilder)(boxedValue : IrValue) : IrValue = {
    val byteLengthPointer = genPointerToByteLength(block)(boxedValue)
    block.load("byteLength")(byteLengthPointer, tbaaIndex=Some(tbaaIndex))
  }

  def genPointerToUtf8Data(block : IrBlockBuilder)(boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != PointerType(UserDefinedType("stringLike"))) {
       throw new InternalCompilerErrorException(s"Unexpected type for boxed value. Passed ${boxedValue.irType}, expected %stringLike*")
    }

    block.getelementptr("utf8DataPtr")(
      elementType=PointerType(IntegerType(8)),
      basePointer=boxedValue,
      indices=List(0, 3).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genStoreToUtf8Data(block : IrBlockBuilder)(toStore : IrValue, boxedValue : IrValue) : Unit = {
    val utf8DataPointer = genPointerToUtf8Data(block)(boxedValue)
    block.store(toStore, utf8DataPointer, tbaaIndex=Some(tbaaIndex))
  }

  def genLoadFromUtf8Data(block : IrBlockBuilder)(boxedValue : IrValue) : IrValue = {
    val utf8DataPointer = genPointerToUtf8Data(block)(boxedValue)
    block.load("utf8Data")(utf8DataPointer, tbaaIndex=Some(tbaaIndex))
  }
}

object BoxedString extends ConcreteBoxedType {
  val name = "string"
  val irType = UserDefinedType("string")
  val supertype = Some(BoxedStringLike)
  val directSubtypes = Set[BoxedType]()
  val isAbstract = false
  val tbaaIndex = 6
  val typeId = 3

  def createConstant(charLength : IrConstant, byteLength : IrConstant, utf8Data : IrConstant) : StructureConstant = {
    StructureConstant(List(
      supertype.get.createConstant(
        charLength=charLength,
        byteLength=byteLength,
        utf8Data=utf8Data,
        typeId=IntegerConstant(IntegerType(16), typeId)
      )
    ), userDefinedType=Some(irType))
  }

  def genTypeCheck(startBlock : IrBlockBuilder)(boxedValue : IrValue, successBlock : IrBranchTarget, failBlock : IrBranchTarget) {
    val datumValue = BoxedDatum.genPointerBitcast(startBlock)(boxedValue)
    val typeIdPointer = BoxedDatum.genPointerToTypeId(startBlock)(datumValue)
    val typeId = startBlock.load("typeId")(typeIdPointer)

    val isString = startBlock.icmp("isString")(ComparisonCond.Equal, None, typeId, IntegerConstant(IntegerType(16), 3))
    startBlock.condBranch(isString, successBlock, failBlock)
  }

  def genPointerToTypeId(block : IrBlockBuilder)(boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != PointerType(UserDefinedType("string"))) {
       throw new InternalCompilerErrorException(s"Unexpected type for boxed value. Passed ${boxedValue.irType}, expected %string*")
    }

    block.getelementptr("typeIdPtr")(
      elementType=IntegerType(16),
      basePointer=boxedValue,
      indices=List(0, 0, 0, 0).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genStoreToTypeId(block : IrBlockBuilder)(toStore : IrValue, boxedValue : IrValue) : Unit = {
    val typeIdPointer = genPointerToTypeId(block)(boxedValue)
    block.store(toStore, typeIdPointer, tbaaIndex=Some(tbaaIndex))
  }

  def genLoadFromTypeId(block : IrBlockBuilder)(boxedValue : IrValue) : IrValue = {
    val typeIdPointer = genPointerToTypeId(block)(boxedValue)
    block.load("typeId")(typeIdPointer, tbaaIndex=Some(tbaaIndex))
  }

  def genPointerToGcState(block : IrBlockBuilder)(boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != PointerType(UserDefinedType("string"))) {
       throw new InternalCompilerErrorException(s"Unexpected type for boxed value. Passed ${boxedValue.irType}, expected %string*")
    }

    block.getelementptr("gcStatePtr")(
      elementType=IntegerType(16),
      basePointer=boxedValue,
      indices=List(0, 0, 0, 1).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genStoreToGcState(block : IrBlockBuilder)(toStore : IrValue, boxedValue : IrValue) : Unit = {
    val gcStatePointer = genPointerToGcState(block)(boxedValue)
    block.store(toStore, gcStatePointer, tbaaIndex=Some(tbaaIndex))
  }

  def genLoadFromGcState(block : IrBlockBuilder)(boxedValue : IrValue) : IrValue = {
    val gcStatePointer = genPointerToGcState(block)(boxedValue)
    block.load("gcState")(gcStatePointer, tbaaIndex=Some(tbaaIndex))
  }

  def genPointerToCharLength(block : IrBlockBuilder)(boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != PointerType(UserDefinedType("string"))) {
       throw new InternalCompilerErrorException(s"Unexpected type for boxed value. Passed ${boxedValue.irType}, expected %string*")
    }

    block.getelementptr("charLengthPtr")(
      elementType=IntegerType(32),
      basePointer=boxedValue,
      indices=List(0, 0, 1).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genStoreToCharLength(block : IrBlockBuilder)(toStore : IrValue, boxedValue : IrValue) : Unit = {
    val charLengthPointer = genPointerToCharLength(block)(boxedValue)
    block.store(toStore, charLengthPointer, tbaaIndex=Some(tbaaIndex))
  }

  def genLoadFromCharLength(block : IrBlockBuilder)(boxedValue : IrValue) : IrValue = {
    val charLengthPointer = genPointerToCharLength(block)(boxedValue)
    block.load("charLength")(charLengthPointer, tbaaIndex=Some(tbaaIndex))
  }

  def genPointerToByteLength(block : IrBlockBuilder)(boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != PointerType(UserDefinedType("string"))) {
       throw new InternalCompilerErrorException(s"Unexpected type for boxed value. Passed ${boxedValue.irType}, expected %string*")
    }

    block.getelementptr("byteLengthPtr")(
      elementType=IntegerType(32),
      basePointer=boxedValue,
      indices=List(0, 0, 2).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genStoreToByteLength(block : IrBlockBuilder)(toStore : IrValue, boxedValue : IrValue) : Unit = {
    val byteLengthPointer = genPointerToByteLength(block)(boxedValue)
    block.store(toStore, byteLengthPointer, tbaaIndex=Some(tbaaIndex))
  }

  def genLoadFromByteLength(block : IrBlockBuilder)(boxedValue : IrValue) : IrValue = {
    val byteLengthPointer = genPointerToByteLength(block)(boxedValue)
    block.load("byteLength")(byteLengthPointer, tbaaIndex=Some(tbaaIndex))
  }

  def genPointerToUtf8Data(block : IrBlockBuilder)(boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != PointerType(UserDefinedType("string"))) {
       throw new InternalCompilerErrorException(s"Unexpected type for boxed value. Passed ${boxedValue.irType}, expected %string*")
    }

    block.getelementptr("utf8DataPtr")(
      elementType=PointerType(IntegerType(8)),
      basePointer=boxedValue,
      indices=List(0, 0, 3).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genStoreToUtf8Data(block : IrBlockBuilder)(toStore : IrValue, boxedValue : IrValue) : Unit = {
    val utf8DataPointer = genPointerToUtf8Data(block)(boxedValue)
    block.store(toStore, utf8DataPointer, tbaaIndex=Some(tbaaIndex))
  }

  def genLoadFromUtf8Data(block : IrBlockBuilder)(boxedValue : IrValue) : IrValue = {
    val utf8DataPointer = genPointerToUtf8Data(block)(boxedValue)
    block.load("utf8Data")(utf8DataPointer, tbaaIndex=Some(tbaaIndex))
  }
}

object BoxedSymbol extends ConcreteBoxedType {
  val name = "symbol"
  val irType = UserDefinedType("symbol")
  val supertype = Some(BoxedStringLike)
  val directSubtypes = Set[BoxedType]()
  val isAbstract = false
  val tbaaIndex = 7
  val typeId = 4

  def createConstant(charLength : IrConstant, byteLength : IrConstant, utf8Data : IrConstant) : StructureConstant = {
    StructureConstant(List(
      supertype.get.createConstant(
        charLength=charLength,
        byteLength=byteLength,
        utf8Data=utf8Data,
        typeId=IntegerConstant(IntegerType(16), typeId)
      )
    ), userDefinedType=Some(irType))
  }

  def genTypeCheck(startBlock : IrBlockBuilder)(boxedValue : IrValue, successBlock : IrBranchTarget, failBlock : IrBranchTarget) {
    val datumValue = BoxedDatum.genPointerBitcast(startBlock)(boxedValue)
    val typeIdPointer = BoxedDatum.genPointerToTypeId(startBlock)(datumValue)
    val typeId = startBlock.load("typeId")(typeIdPointer)

    val isSymbol = startBlock.icmp("isSymbol")(ComparisonCond.Equal, None, typeId, IntegerConstant(IntegerType(16), 4))
    startBlock.condBranch(isSymbol, successBlock, failBlock)
  }

  def genPointerToTypeId(block : IrBlockBuilder)(boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != PointerType(UserDefinedType("symbol"))) {
       throw new InternalCompilerErrorException(s"Unexpected type for boxed value. Passed ${boxedValue.irType}, expected %symbol*")
    }

    block.getelementptr("typeIdPtr")(
      elementType=IntegerType(16),
      basePointer=boxedValue,
      indices=List(0, 0, 0, 0).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genStoreToTypeId(block : IrBlockBuilder)(toStore : IrValue, boxedValue : IrValue) : Unit = {
    val typeIdPointer = genPointerToTypeId(block)(boxedValue)
    block.store(toStore, typeIdPointer, tbaaIndex=Some(tbaaIndex))
  }

  def genLoadFromTypeId(block : IrBlockBuilder)(boxedValue : IrValue) : IrValue = {
    val typeIdPointer = genPointerToTypeId(block)(boxedValue)
    block.load("typeId")(typeIdPointer, tbaaIndex=Some(tbaaIndex))
  }

  def genPointerToGcState(block : IrBlockBuilder)(boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != PointerType(UserDefinedType("symbol"))) {
       throw new InternalCompilerErrorException(s"Unexpected type for boxed value. Passed ${boxedValue.irType}, expected %symbol*")
    }

    block.getelementptr("gcStatePtr")(
      elementType=IntegerType(16),
      basePointer=boxedValue,
      indices=List(0, 0, 0, 1).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genStoreToGcState(block : IrBlockBuilder)(toStore : IrValue, boxedValue : IrValue) : Unit = {
    val gcStatePointer = genPointerToGcState(block)(boxedValue)
    block.store(toStore, gcStatePointer, tbaaIndex=Some(tbaaIndex))
  }

  def genLoadFromGcState(block : IrBlockBuilder)(boxedValue : IrValue) : IrValue = {
    val gcStatePointer = genPointerToGcState(block)(boxedValue)
    block.load("gcState")(gcStatePointer, tbaaIndex=Some(tbaaIndex))
  }

  def genPointerToCharLength(block : IrBlockBuilder)(boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != PointerType(UserDefinedType("symbol"))) {
       throw new InternalCompilerErrorException(s"Unexpected type for boxed value. Passed ${boxedValue.irType}, expected %symbol*")
    }

    block.getelementptr("charLengthPtr")(
      elementType=IntegerType(32),
      basePointer=boxedValue,
      indices=List(0, 0, 1).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genStoreToCharLength(block : IrBlockBuilder)(toStore : IrValue, boxedValue : IrValue) : Unit = {
    val charLengthPointer = genPointerToCharLength(block)(boxedValue)
    block.store(toStore, charLengthPointer, tbaaIndex=Some(tbaaIndex))
  }

  def genLoadFromCharLength(block : IrBlockBuilder)(boxedValue : IrValue) : IrValue = {
    val charLengthPointer = genPointerToCharLength(block)(boxedValue)
    block.load("charLength")(charLengthPointer, tbaaIndex=Some(tbaaIndex))
  }

  def genPointerToByteLength(block : IrBlockBuilder)(boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != PointerType(UserDefinedType("symbol"))) {
       throw new InternalCompilerErrorException(s"Unexpected type for boxed value. Passed ${boxedValue.irType}, expected %symbol*")
    }

    block.getelementptr("byteLengthPtr")(
      elementType=IntegerType(32),
      basePointer=boxedValue,
      indices=List(0, 0, 2).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genStoreToByteLength(block : IrBlockBuilder)(toStore : IrValue, boxedValue : IrValue) : Unit = {
    val byteLengthPointer = genPointerToByteLength(block)(boxedValue)
    block.store(toStore, byteLengthPointer, tbaaIndex=Some(tbaaIndex))
  }

  def genLoadFromByteLength(block : IrBlockBuilder)(boxedValue : IrValue) : IrValue = {
    val byteLengthPointer = genPointerToByteLength(block)(boxedValue)
    block.load("byteLength")(byteLengthPointer, tbaaIndex=Some(tbaaIndex))
  }

  def genPointerToUtf8Data(block : IrBlockBuilder)(boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != PointerType(UserDefinedType("symbol"))) {
       throw new InternalCompilerErrorException(s"Unexpected type for boxed value. Passed ${boxedValue.irType}, expected %symbol*")
    }

    block.getelementptr("utf8DataPtr")(
      elementType=PointerType(IntegerType(8)),
      basePointer=boxedValue,
      indices=List(0, 0, 3).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genStoreToUtf8Data(block : IrBlockBuilder)(toStore : IrValue, boxedValue : IrValue) : Unit = {
    val utf8DataPointer = genPointerToUtf8Data(block)(boxedValue)
    block.store(toStore, utf8DataPointer, tbaaIndex=Some(tbaaIndex))
  }

  def genLoadFromUtf8Data(block : IrBlockBuilder)(boxedValue : IrValue) : IrValue = {
    val utf8DataPointer = genPointerToUtf8Data(block)(boxedValue)
    block.load("utf8Data")(utf8DataPointer, tbaaIndex=Some(tbaaIndex))
  }
}

object BoxedBoolean extends ConcreteBoxedType {
  val name = "boolean"
  val irType = UserDefinedType("boolean")
  val supertype = Some(BoxedDatum)
  val directSubtypes = Set[BoxedType]()
  val isAbstract = false
  val tbaaIndex = 8
  val typeId = 5

  def genTypeCheck(startBlock : IrBlockBuilder)(boxedValue : IrValue, successBlock : IrBranchTarget, failBlock : IrBranchTarget) {
    val datumValue = BoxedDatum.genPointerBitcast(startBlock)(boxedValue)
    val typeIdPointer = BoxedDatum.genPointerToTypeId(startBlock)(datumValue)
    val typeId = startBlock.load("typeId")(typeIdPointer)

    val isBoolean = startBlock.icmp("isBoolean")(ComparisonCond.Equal, None, typeId, IntegerConstant(IntegerType(16), 5))
    startBlock.condBranch(isBoolean, successBlock, failBlock)
  }

  def genPointerToTypeId(block : IrBlockBuilder)(boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != PointerType(UserDefinedType("boolean"))) {
       throw new InternalCompilerErrorException(s"Unexpected type for boxed value. Passed ${boxedValue.irType}, expected %boolean*")
    }

    block.getelementptr("typeIdPtr")(
      elementType=IntegerType(16),
      basePointer=boxedValue,
      indices=List(0, 0, 0).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genStoreToTypeId(block : IrBlockBuilder)(toStore : IrValue, boxedValue : IrValue) : Unit = {
    val typeIdPointer = genPointerToTypeId(block)(boxedValue)
    block.store(toStore, typeIdPointer, tbaaIndex=Some(tbaaIndex))
  }

  def genLoadFromTypeId(block : IrBlockBuilder)(boxedValue : IrValue) : IrValue = {
    val typeIdPointer = genPointerToTypeId(block)(boxedValue)
    block.load("typeId")(typeIdPointer, tbaaIndex=Some(tbaaIndex))
  }

  def genPointerToGcState(block : IrBlockBuilder)(boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != PointerType(UserDefinedType("boolean"))) {
       throw new InternalCompilerErrorException(s"Unexpected type for boxed value. Passed ${boxedValue.irType}, expected %boolean*")
    }

    block.getelementptr("gcStatePtr")(
      elementType=IntegerType(16),
      basePointer=boxedValue,
      indices=List(0, 0, 1).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genStoreToGcState(block : IrBlockBuilder)(toStore : IrValue, boxedValue : IrValue) : Unit = {
    val gcStatePointer = genPointerToGcState(block)(boxedValue)
    block.store(toStore, gcStatePointer, tbaaIndex=Some(tbaaIndex))
  }

  def genLoadFromGcState(block : IrBlockBuilder)(boxedValue : IrValue) : IrValue = {
    val gcStatePointer = genPointerToGcState(block)(boxedValue)
    block.load("gcState")(gcStatePointer, tbaaIndex=Some(tbaaIndex))
  }

  def genPointerToValue(block : IrBlockBuilder)(boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != PointerType(UserDefinedType("boolean"))) {
       throw new InternalCompilerErrorException(s"Unexpected type for boxed value. Passed ${boxedValue.irType}, expected %boolean*")
    }

    block.getelementptr("valuePtr")(
      elementType=IntegerType(1),
      basePointer=boxedValue,
      indices=List(0, 1).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genStoreToValue(block : IrBlockBuilder)(toStore : IrValue, boxedValue : IrValue) : Unit = {
    val valuePointer = genPointerToValue(block)(boxedValue)
    block.store(toStore, valuePointer, tbaaIndex=Some(tbaaIndex))
  }

  def genLoadFromValue(block : IrBlockBuilder)(boxedValue : IrValue) : IrValue = {
    val valuePointer = genPointerToValue(block)(boxedValue)
    block.load("value")(valuePointer, tbaaIndex=Some(tbaaIndex))
  }
}

object BoxedNumeric extends BoxedType {
  val name = "numeric"
  val irType = UserDefinedType("numeric")
  val supertype = Some(BoxedDatum)
  val directSubtypes = Set[BoxedType](BoxedExactInteger, BoxedInexactRational)
  val isAbstract = true
  val tbaaIndex = 9

  def createConstant(typeId : IrConstant) : StructureConstant = {
    StructureConstant(List(
      supertype.get.createConstant(
        typeId=typeId
      )
    ), userDefinedType=Some(irType))
  }

  def genTypeCheck(startBlock : IrBlockBuilder)(boxedValue : IrValue, successBlock : IrBranchTarget, failBlock : IrBranchTarget) {
    val datumValue = BoxedDatum.genPointerBitcast(startBlock)(boxedValue)
    val typeIdPointer = BoxedDatum.genPointerToTypeId(startBlock)(datumValue)
    val typeId = startBlock.load("typeId")(typeIdPointer)

    val isExactInteger = startBlock.icmp("isExactInteger")(ComparisonCond.Equal, None, typeId, IntegerConstant(IntegerType(16), 6))
    val notExactIntegerBlock = startBlock.startChildBlock("notExactInteger")
    startBlock.condBranch(isExactInteger, successBlock, notExactIntegerBlock)

    val isInexactRational = notExactIntegerBlock.icmp("isInexactRational")(ComparisonCond.Equal, None, typeId, IntegerConstant(IntegerType(16), 7))
    notExactIntegerBlock.condBranch(isInexactRational, successBlock, failBlock)
  }

  def genPointerToTypeId(block : IrBlockBuilder)(boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != PointerType(UserDefinedType("numeric"))) {
       throw new InternalCompilerErrorException(s"Unexpected type for boxed value. Passed ${boxedValue.irType}, expected %numeric*")
    }

    block.getelementptr("typeIdPtr")(
      elementType=IntegerType(16),
      basePointer=boxedValue,
      indices=List(0, 0, 0).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genStoreToTypeId(block : IrBlockBuilder)(toStore : IrValue, boxedValue : IrValue) : Unit = {
    val typeIdPointer = genPointerToTypeId(block)(boxedValue)
    block.store(toStore, typeIdPointer, tbaaIndex=Some(tbaaIndex))
  }

  def genLoadFromTypeId(block : IrBlockBuilder)(boxedValue : IrValue) : IrValue = {
    val typeIdPointer = genPointerToTypeId(block)(boxedValue)
    block.load("typeId")(typeIdPointer, tbaaIndex=Some(tbaaIndex))
  }

  def genPointerToGcState(block : IrBlockBuilder)(boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != PointerType(UserDefinedType("numeric"))) {
       throw new InternalCompilerErrorException(s"Unexpected type for boxed value. Passed ${boxedValue.irType}, expected %numeric*")
    }

    block.getelementptr("gcStatePtr")(
      elementType=IntegerType(16),
      basePointer=boxedValue,
      indices=List(0, 0, 1).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genStoreToGcState(block : IrBlockBuilder)(toStore : IrValue, boxedValue : IrValue) : Unit = {
    val gcStatePointer = genPointerToGcState(block)(boxedValue)
    block.store(toStore, gcStatePointer, tbaaIndex=Some(tbaaIndex))
  }

  def genLoadFromGcState(block : IrBlockBuilder)(boxedValue : IrValue) : IrValue = {
    val gcStatePointer = genPointerToGcState(block)(boxedValue)
    block.load("gcState")(gcStatePointer, tbaaIndex=Some(tbaaIndex))
  }
}

object BoxedExactInteger extends ConcreteBoxedType {
  val name = "exactInteger"
  val irType = UserDefinedType("exactInteger")
  val supertype = Some(BoxedNumeric)
  val directSubtypes = Set[BoxedType]()
  val isAbstract = false
  val tbaaIndex = 10
  val typeId = 6

  def createConstant(value : IrConstant) : StructureConstant = {
    if (value.irType != IntegerType(64)) {
      throw new InternalCompilerErrorException("Unexpected type for field value")
    }

    StructureConstant(List(
      supertype.get.createConstant(
        typeId=IntegerConstant(IntegerType(16), typeId)
      ),
      value
    ), userDefinedType=Some(irType))
  }

  def genTypeCheck(startBlock : IrBlockBuilder)(boxedValue : IrValue, successBlock : IrBranchTarget, failBlock : IrBranchTarget) {
    val datumValue = BoxedDatum.genPointerBitcast(startBlock)(boxedValue)
    val typeIdPointer = BoxedDatum.genPointerToTypeId(startBlock)(datumValue)
    val typeId = startBlock.load("typeId")(typeIdPointer)

    val isExactInteger = startBlock.icmp("isExactInteger")(ComparisonCond.Equal, None, typeId, IntegerConstant(IntegerType(16), 6))
    startBlock.condBranch(isExactInteger, successBlock, failBlock)
  }

  def genPointerToTypeId(block : IrBlockBuilder)(boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != PointerType(UserDefinedType("exactInteger"))) {
       throw new InternalCompilerErrorException(s"Unexpected type for boxed value. Passed ${boxedValue.irType}, expected %exactInteger*")
    }

    block.getelementptr("typeIdPtr")(
      elementType=IntegerType(16),
      basePointer=boxedValue,
      indices=List(0, 0, 0, 0).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genStoreToTypeId(block : IrBlockBuilder)(toStore : IrValue, boxedValue : IrValue) : Unit = {
    val typeIdPointer = genPointerToTypeId(block)(boxedValue)
    block.store(toStore, typeIdPointer, tbaaIndex=Some(tbaaIndex))
  }

  def genLoadFromTypeId(block : IrBlockBuilder)(boxedValue : IrValue) : IrValue = {
    val typeIdPointer = genPointerToTypeId(block)(boxedValue)
    block.load("typeId")(typeIdPointer, tbaaIndex=Some(tbaaIndex))
  }

  def genPointerToGcState(block : IrBlockBuilder)(boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != PointerType(UserDefinedType("exactInteger"))) {
       throw new InternalCompilerErrorException(s"Unexpected type for boxed value. Passed ${boxedValue.irType}, expected %exactInteger*")
    }

    block.getelementptr("gcStatePtr")(
      elementType=IntegerType(16),
      basePointer=boxedValue,
      indices=List(0, 0, 0, 1).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genStoreToGcState(block : IrBlockBuilder)(toStore : IrValue, boxedValue : IrValue) : Unit = {
    val gcStatePointer = genPointerToGcState(block)(boxedValue)
    block.store(toStore, gcStatePointer, tbaaIndex=Some(tbaaIndex))
  }

  def genLoadFromGcState(block : IrBlockBuilder)(boxedValue : IrValue) : IrValue = {
    val gcStatePointer = genPointerToGcState(block)(boxedValue)
    block.load("gcState")(gcStatePointer, tbaaIndex=Some(tbaaIndex))
  }

  def genPointerToValue(block : IrBlockBuilder)(boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != PointerType(UserDefinedType("exactInteger"))) {
       throw new InternalCompilerErrorException(s"Unexpected type for boxed value. Passed ${boxedValue.irType}, expected %exactInteger*")
    }

    block.getelementptr("valuePtr")(
      elementType=IntegerType(64),
      basePointer=boxedValue,
      indices=List(0, 1).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genStoreToValue(block : IrBlockBuilder)(toStore : IrValue, boxedValue : IrValue) : Unit = {
    val valuePointer = genPointerToValue(block)(boxedValue)
    block.store(toStore, valuePointer, tbaaIndex=Some(tbaaIndex))
  }

  def genLoadFromValue(block : IrBlockBuilder)(boxedValue : IrValue) : IrValue = {
    val valuePointer = genPointerToValue(block)(boxedValue)
    block.load("value")(valuePointer, tbaaIndex=Some(tbaaIndex))
  }
}

object BoxedInexactRational extends ConcreteBoxedType {
  val name = "inexactRational"
  val irType = UserDefinedType("inexactRational")
  val supertype = Some(BoxedNumeric)
  val directSubtypes = Set[BoxedType]()
  val isAbstract = false
  val tbaaIndex = 11
  val typeId = 7

  def createConstant(value : IrConstant) : StructureConstant = {
    if (value.irType != DoubleType) {
      throw new InternalCompilerErrorException("Unexpected type for field value")
    }

    StructureConstant(List(
      supertype.get.createConstant(
        typeId=IntegerConstant(IntegerType(16), typeId)
      ),
      value
    ), userDefinedType=Some(irType))
  }

  def genTypeCheck(startBlock : IrBlockBuilder)(boxedValue : IrValue, successBlock : IrBranchTarget, failBlock : IrBranchTarget) {
    val datumValue = BoxedDatum.genPointerBitcast(startBlock)(boxedValue)
    val typeIdPointer = BoxedDatum.genPointerToTypeId(startBlock)(datumValue)
    val typeId = startBlock.load("typeId")(typeIdPointer)

    val isInexactRational = startBlock.icmp("isInexactRational")(ComparisonCond.Equal, None, typeId, IntegerConstant(IntegerType(16), 7))
    startBlock.condBranch(isInexactRational, successBlock, failBlock)
  }

  def genPointerToTypeId(block : IrBlockBuilder)(boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != PointerType(UserDefinedType("inexactRational"))) {
       throw new InternalCompilerErrorException(s"Unexpected type for boxed value. Passed ${boxedValue.irType}, expected %inexactRational*")
    }

    block.getelementptr("typeIdPtr")(
      elementType=IntegerType(16),
      basePointer=boxedValue,
      indices=List(0, 0, 0, 0).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genStoreToTypeId(block : IrBlockBuilder)(toStore : IrValue, boxedValue : IrValue) : Unit = {
    val typeIdPointer = genPointerToTypeId(block)(boxedValue)
    block.store(toStore, typeIdPointer, tbaaIndex=Some(tbaaIndex))
  }

  def genLoadFromTypeId(block : IrBlockBuilder)(boxedValue : IrValue) : IrValue = {
    val typeIdPointer = genPointerToTypeId(block)(boxedValue)
    block.load("typeId")(typeIdPointer, tbaaIndex=Some(tbaaIndex))
  }

  def genPointerToGcState(block : IrBlockBuilder)(boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != PointerType(UserDefinedType("inexactRational"))) {
       throw new InternalCompilerErrorException(s"Unexpected type for boxed value. Passed ${boxedValue.irType}, expected %inexactRational*")
    }

    block.getelementptr("gcStatePtr")(
      elementType=IntegerType(16),
      basePointer=boxedValue,
      indices=List(0, 0, 0, 1).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genStoreToGcState(block : IrBlockBuilder)(toStore : IrValue, boxedValue : IrValue) : Unit = {
    val gcStatePointer = genPointerToGcState(block)(boxedValue)
    block.store(toStore, gcStatePointer, tbaaIndex=Some(tbaaIndex))
  }

  def genLoadFromGcState(block : IrBlockBuilder)(boxedValue : IrValue) : IrValue = {
    val gcStatePointer = genPointerToGcState(block)(boxedValue)
    block.load("gcState")(gcStatePointer, tbaaIndex=Some(tbaaIndex))
  }

  def genPointerToValue(block : IrBlockBuilder)(boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != PointerType(UserDefinedType("inexactRational"))) {
       throw new InternalCompilerErrorException(s"Unexpected type for boxed value. Passed ${boxedValue.irType}, expected %inexactRational*")
    }

    block.getelementptr("valuePtr")(
      elementType=DoubleType,
      basePointer=boxedValue,
      indices=List(0, 1).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genStoreToValue(block : IrBlockBuilder)(toStore : IrValue, boxedValue : IrValue) : Unit = {
    val valuePointer = genPointerToValue(block)(boxedValue)
    block.store(toStore, valuePointer, tbaaIndex=Some(tbaaIndex))
  }

  def genLoadFromValue(block : IrBlockBuilder)(boxedValue : IrValue) : IrValue = {
    val valuePointer = genPointerToValue(block)(boxedValue)
    block.load("value")(valuePointer, tbaaIndex=Some(tbaaIndex))
  }
}

object BoxedCharacter extends ConcreteBoxedType {
  val name = "character"
  val irType = UserDefinedType("character")
  val supertype = Some(BoxedDatum)
  val directSubtypes = Set[BoxedType]()
  val isAbstract = false
  val tbaaIndex = 12
  val typeId = 8

  def createConstant(unicodeChar : IrConstant) : StructureConstant = {
    if (unicodeChar.irType != IntegerType(32)) {
      throw new InternalCompilerErrorException("Unexpected type for field unicodeChar")
    }

    StructureConstant(List(
      supertype.get.createConstant(
        typeId=IntegerConstant(IntegerType(16), typeId)
      ),
      unicodeChar
    ), userDefinedType=Some(irType))
  }

  def genTypeCheck(startBlock : IrBlockBuilder)(boxedValue : IrValue, successBlock : IrBranchTarget, failBlock : IrBranchTarget) {
    val datumValue = BoxedDatum.genPointerBitcast(startBlock)(boxedValue)
    val typeIdPointer = BoxedDatum.genPointerToTypeId(startBlock)(datumValue)
    val typeId = startBlock.load("typeId")(typeIdPointer)

    val isCharacter = startBlock.icmp("isCharacter")(ComparisonCond.Equal, None, typeId, IntegerConstant(IntegerType(16), 8))
    startBlock.condBranch(isCharacter, successBlock, failBlock)
  }

  def genPointerToTypeId(block : IrBlockBuilder)(boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != PointerType(UserDefinedType("character"))) {
       throw new InternalCompilerErrorException(s"Unexpected type for boxed value. Passed ${boxedValue.irType}, expected %character*")
    }

    block.getelementptr("typeIdPtr")(
      elementType=IntegerType(16),
      basePointer=boxedValue,
      indices=List(0, 0, 0).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genStoreToTypeId(block : IrBlockBuilder)(toStore : IrValue, boxedValue : IrValue) : Unit = {
    val typeIdPointer = genPointerToTypeId(block)(boxedValue)
    block.store(toStore, typeIdPointer, tbaaIndex=Some(tbaaIndex))
  }

  def genLoadFromTypeId(block : IrBlockBuilder)(boxedValue : IrValue) : IrValue = {
    val typeIdPointer = genPointerToTypeId(block)(boxedValue)
    block.load("typeId")(typeIdPointer, tbaaIndex=Some(tbaaIndex))
  }

  def genPointerToGcState(block : IrBlockBuilder)(boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != PointerType(UserDefinedType("character"))) {
       throw new InternalCompilerErrorException(s"Unexpected type for boxed value. Passed ${boxedValue.irType}, expected %character*")
    }

    block.getelementptr("gcStatePtr")(
      elementType=IntegerType(16),
      basePointer=boxedValue,
      indices=List(0, 0, 1).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genStoreToGcState(block : IrBlockBuilder)(toStore : IrValue, boxedValue : IrValue) : Unit = {
    val gcStatePointer = genPointerToGcState(block)(boxedValue)
    block.store(toStore, gcStatePointer, tbaaIndex=Some(tbaaIndex))
  }

  def genLoadFromGcState(block : IrBlockBuilder)(boxedValue : IrValue) : IrValue = {
    val gcStatePointer = genPointerToGcState(block)(boxedValue)
    block.load("gcState")(gcStatePointer, tbaaIndex=Some(tbaaIndex))
  }

  def genPointerToUnicodeChar(block : IrBlockBuilder)(boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != PointerType(UserDefinedType("character"))) {
       throw new InternalCompilerErrorException(s"Unexpected type for boxed value. Passed ${boxedValue.irType}, expected %character*")
    }

    block.getelementptr("unicodeCharPtr")(
      elementType=IntegerType(32),
      basePointer=boxedValue,
      indices=List(0, 1).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genStoreToUnicodeChar(block : IrBlockBuilder)(toStore : IrValue, boxedValue : IrValue) : Unit = {
    val unicodeCharPointer = genPointerToUnicodeChar(block)(boxedValue)
    block.store(toStore, unicodeCharPointer, tbaaIndex=Some(tbaaIndex))
  }

  def genLoadFromUnicodeChar(block : IrBlockBuilder)(boxedValue : IrValue) : IrValue = {
    val unicodeCharPointer = genPointerToUnicodeChar(block)(boxedValue)
    block.load("unicodeChar")(unicodeCharPointer, tbaaIndex=Some(tbaaIndex))
  }
}

object BoxedBytevector extends ConcreteBoxedType {
  val name = "bytevector"
  val irType = UserDefinedType("bytevector")
  val supertype = Some(BoxedDatum)
  val directSubtypes = Set[BoxedType]()
  val isAbstract = false
  val tbaaIndex = 13
  val typeId = 9

  def createConstant(length : IrConstant, data : IrConstant) : StructureConstant = {
    if (length.irType != IntegerType(32)) {
      throw new InternalCompilerErrorException("Unexpected type for field length")
    }

    if (data.irType != PointerType(IntegerType(8))) {
      throw new InternalCompilerErrorException("Unexpected type for field data")
    }

    StructureConstant(List(
      supertype.get.createConstant(
        typeId=IntegerConstant(IntegerType(16), typeId)
      ),
      length,
      data
    ), userDefinedType=Some(irType))
  }

  def genTypeCheck(startBlock : IrBlockBuilder)(boxedValue : IrValue, successBlock : IrBranchTarget, failBlock : IrBranchTarget) {
    val datumValue = BoxedDatum.genPointerBitcast(startBlock)(boxedValue)
    val typeIdPointer = BoxedDatum.genPointerToTypeId(startBlock)(datumValue)
    val typeId = startBlock.load("typeId")(typeIdPointer)

    val isBytevector = startBlock.icmp("isBytevector")(ComparisonCond.Equal, None, typeId, IntegerConstant(IntegerType(16), 9))
    startBlock.condBranch(isBytevector, successBlock, failBlock)
  }

  def genPointerToTypeId(block : IrBlockBuilder)(boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != PointerType(UserDefinedType("bytevector"))) {
       throw new InternalCompilerErrorException(s"Unexpected type for boxed value. Passed ${boxedValue.irType}, expected %bytevector*")
    }

    block.getelementptr("typeIdPtr")(
      elementType=IntegerType(16),
      basePointer=boxedValue,
      indices=List(0, 0, 0).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genStoreToTypeId(block : IrBlockBuilder)(toStore : IrValue, boxedValue : IrValue) : Unit = {
    val typeIdPointer = genPointerToTypeId(block)(boxedValue)
    block.store(toStore, typeIdPointer, tbaaIndex=Some(tbaaIndex))
  }

  def genLoadFromTypeId(block : IrBlockBuilder)(boxedValue : IrValue) : IrValue = {
    val typeIdPointer = genPointerToTypeId(block)(boxedValue)
    block.load("typeId")(typeIdPointer, tbaaIndex=Some(tbaaIndex))
  }

  def genPointerToGcState(block : IrBlockBuilder)(boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != PointerType(UserDefinedType("bytevector"))) {
       throw new InternalCompilerErrorException(s"Unexpected type for boxed value. Passed ${boxedValue.irType}, expected %bytevector*")
    }

    block.getelementptr("gcStatePtr")(
      elementType=IntegerType(16),
      basePointer=boxedValue,
      indices=List(0, 0, 1).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genStoreToGcState(block : IrBlockBuilder)(toStore : IrValue, boxedValue : IrValue) : Unit = {
    val gcStatePointer = genPointerToGcState(block)(boxedValue)
    block.store(toStore, gcStatePointer, tbaaIndex=Some(tbaaIndex))
  }

  def genLoadFromGcState(block : IrBlockBuilder)(boxedValue : IrValue) : IrValue = {
    val gcStatePointer = genPointerToGcState(block)(boxedValue)
    block.load("gcState")(gcStatePointer, tbaaIndex=Some(tbaaIndex))
  }

  def genPointerToLength(block : IrBlockBuilder)(boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != PointerType(UserDefinedType("bytevector"))) {
       throw new InternalCompilerErrorException(s"Unexpected type for boxed value. Passed ${boxedValue.irType}, expected %bytevector*")
    }

    block.getelementptr("lengthPtr")(
      elementType=IntegerType(32),
      basePointer=boxedValue,
      indices=List(0, 1).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genStoreToLength(block : IrBlockBuilder)(toStore : IrValue, boxedValue : IrValue) : Unit = {
    val lengthPointer = genPointerToLength(block)(boxedValue)
    block.store(toStore, lengthPointer, tbaaIndex=Some(tbaaIndex))
  }

  def genLoadFromLength(block : IrBlockBuilder)(boxedValue : IrValue) : IrValue = {
    val lengthPointer = genPointerToLength(block)(boxedValue)
    block.load("length")(lengthPointer, tbaaIndex=Some(tbaaIndex))
  }

  def genPointerToData(block : IrBlockBuilder)(boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != PointerType(UserDefinedType("bytevector"))) {
       throw new InternalCompilerErrorException(s"Unexpected type for boxed value. Passed ${boxedValue.irType}, expected %bytevector*")
    }

    block.getelementptr("dataPtr")(
      elementType=PointerType(IntegerType(8)),
      basePointer=boxedValue,
      indices=List(0, 2).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genStoreToData(block : IrBlockBuilder)(toStore : IrValue, boxedValue : IrValue) : Unit = {
    val dataPointer = genPointerToData(block)(boxedValue)
    block.store(toStore, dataPointer, tbaaIndex=Some(tbaaIndex))
  }

  def genLoadFromData(block : IrBlockBuilder)(boxedValue : IrValue) : IrValue = {
    val dataPointer = genPointerToData(block)(boxedValue)
    block.load("data")(dataPointer, tbaaIndex=Some(tbaaIndex))
  }
}

object BoxedProcedure extends ConcreteBoxedType {
  val name = "procedure"
  val irType = UserDefinedType("procedure")
  val supertype = Some(BoxedDatum)
  val directSubtypes = Set[BoxedType]()
  val isAbstract = false
  val tbaaIndex = 14
  val typeId = 10

  def createConstant(capturedDataLength : IrConstant, capturedData : IrConstant, entryPoint : IrConstant) : StructureConstant = {
    if (capturedDataLength.irType != IntegerType(32)) {
      throw new InternalCompilerErrorException("Unexpected type for field capturedDataLength")
    }

    if (capturedData.irType != PointerType(PointerType(PointerType(UserDefinedType("datum"))))) {
      throw new InternalCompilerErrorException("Unexpected type for field capturedData")
    }

    if (entryPoint.irType != PointerType(FunctionType(PointerType(UserDefinedType("datum")), List(PointerType(UserDefinedType("procedure")), PointerType(UserDefinedType("listElement")) )))) {
      throw new InternalCompilerErrorException("Unexpected type for field entryPoint")
    }

    StructureConstant(List(
      supertype.get.createConstant(
        typeId=IntegerConstant(IntegerType(16), typeId)
      ),
      capturedDataLength,
      capturedData,
      entryPoint
    ), userDefinedType=Some(irType))
  }

  def genTypeCheck(startBlock : IrBlockBuilder)(boxedValue : IrValue, successBlock : IrBranchTarget, failBlock : IrBranchTarget) {
    val datumValue = BoxedDatum.genPointerBitcast(startBlock)(boxedValue)
    val typeIdPointer = BoxedDatum.genPointerToTypeId(startBlock)(datumValue)
    val typeId = startBlock.load("typeId")(typeIdPointer)

    val isProcedure = startBlock.icmp("isProcedure")(ComparisonCond.Equal, None, typeId, IntegerConstant(IntegerType(16), 10))
    startBlock.condBranch(isProcedure, successBlock, failBlock)
  }

  def genPointerToTypeId(block : IrBlockBuilder)(boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != PointerType(UserDefinedType("procedure"))) {
       throw new InternalCompilerErrorException(s"Unexpected type for boxed value. Passed ${boxedValue.irType}, expected %procedure*")
    }

    block.getelementptr("typeIdPtr")(
      elementType=IntegerType(16),
      basePointer=boxedValue,
      indices=List(0, 0, 0).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genStoreToTypeId(block : IrBlockBuilder)(toStore : IrValue, boxedValue : IrValue) : Unit = {
    val typeIdPointer = genPointerToTypeId(block)(boxedValue)
    block.store(toStore, typeIdPointer, tbaaIndex=Some(tbaaIndex))
  }

  def genLoadFromTypeId(block : IrBlockBuilder)(boxedValue : IrValue) : IrValue = {
    val typeIdPointer = genPointerToTypeId(block)(boxedValue)
    block.load("typeId")(typeIdPointer, tbaaIndex=Some(tbaaIndex))
  }

  def genPointerToGcState(block : IrBlockBuilder)(boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != PointerType(UserDefinedType("procedure"))) {
       throw new InternalCompilerErrorException(s"Unexpected type for boxed value. Passed ${boxedValue.irType}, expected %procedure*")
    }

    block.getelementptr("gcStatePtr")(
      elementType=IntegerType(16),
      basePointer=boxedValue,
      indices=List(0, 0, 1).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genStoreToGcState(block : IrBlockBuilder)(toStore : IrValue, boxedValue : IrValue) : Unit = {
    val gcStatePointer = genPointerToGcState(block)(boxedValue)
    block.store(toStore, gcStatePointer, tbaaIndex=Some(tbaaIndex))
  }

  def genLoadFromGcState(block : IrBlockBuilder)(boxedValue : IrValue) : IrValue = {
    val gcStatePointer = genPointerToGcState(block)(boxedValue)
    block.load("gcState")(gcStatePointer, tbaaIndex=Some(tbaaIndex))
  }

  def genPointerToCapturedDataLength(block : IrBlockBuilder)(boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != PointerType(UserDefinedType("procedure"))) {
       throw new InternalCompilerErrorException(s"Unexpected type for boxed value. Passed ${boxedValue.irType}, expected %procedure*")
    }

    block.getelementptr("capturedDataLengthPtr")(
      elementType=IntegerType(32),
      basePointer=boxedValue,
      indices=List(0, 1).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genStoreToCapturedDataLength(block : IrBlockBuilder)(toStore : IrValue, boxedValue : IrValue) : Unit = {
    val capturedDataLengthPointer = genPointerToCapturedDataLength(block)(boxedValue)
    block.store(toStore, capturedDataLengthPointer, tbaaIndex=Some(tbaaIndex))
  }

  def genLoadFromCapturedDataLength(block : IrBlockBuilder)(boxedValue : IrValue) : IrValue = {
    val capturedDataLengthPointer = genPointerToCapturedDataLength(block)(boxedValue)
    block.load("capturedDataLength")(capturedDataLengthPointer, tbaaIndex=Some(tbaaIndex))
  }

  def genPointerToCapturedData(block : IrBlockBuilder)(boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != PointerType(UserDefinedType("procedure"))) {
       throw new InternalCompilerErrorException(s"Unexpected type for boxed value. Passed ${boxedValue.irType}, expected %procedure*")
    }

    block.getelementptr("capturedDataPtr")(
      elementType=PointerType(PointerType(PointerType(UserDefinedType("datum")))),
      basePointer=boxedValue,
      indices=List(0, 2).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genStoreToCapturedData(block : IrBlockBuilder)(toStore : IrValue, boxedValue : IrValue) : Unit = {
    val capturedDataPointer = genPointerToCapturedData(block)(boxedValue)
    block.store(toStore, capturedDataPointer, tbaaIndex=Some(tbaaIndex))
  }

  def genLoadFromCapturedData(block : IrBlockBuilder)(boxedValue : IrValue) : IrValue = {
    val capturedDataPointer = genPointerToCapturedData(block)(boxedValue)
    block.load("capturedData")(capturedDataPointer, tbaaIndex=Some(tbaaIndex))
  }

  def genPointerToEntryPoint(block : IrBlockBuilder)(boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != PointerType(UserDefinedType("procedure"))) {
       throw new InternalCompilerErrorException(s"Unexpected type for boxed value. Passed ${boxedValue.irType}, expected %procedure*")
    }

    block.getelementptr("entryPointPtr")(
      elementType=PointerType(FunctionType(PointerType(UserDefinedType("datum")), List(PointerType(UserDefinedType("procedure")), PointerType(UserDefinedType("listElement")) ))),
      basePointer=boxedValue,
      indices=List(0, 3).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genStoreToEntryPoint(block : IrBlockBuilder)(toStore : IrValue, boxedValue : IrValue) : Unit = {
    val entryPointPointer = genPointerToEntryPoint(block)(boxedValue)
    block.store(toStore, entryPointPointer, tbaaIndex=Some(tbaaIndex))
  }

  def genLoadFromEntryPoint(block : IrBlockBuilder)(boxedValue : IrValue) : IrValue = {
    val entryPointPointer = genPointerToEntryPoint(block)(boxedValue)
    block.load("entryPoint")(entryPointPointer, tbaaIndex=Some(tbaaIndex))
  }
}

object BoxedMutableVar extends ConcreteBoxedType {
  val name = "mutableVar"
  val irType = UserDefinedType("mutableVar")
  val supertype = Some(BoxedDatum)
  val directSubtypes = Set[BoxedType]()
  val isAbstract = false
  val tbaaIndex = 15
  val typeId = 11

  def createConstant(currentValue : IrConstant) : StructureConstant = {
    if (currentValue.irType != PointerType(UserDefinedType("datum"))) {
      throw new InternalCompilerErrorException("Unexpected type for field currentValue")
    }

    StructureConstant(List(
      supertype.get.createConstant(
        typeId=IntegerConstant(IntegerType(16), typeId)
      ),
      currentValue
    ), userDefinedType=Some(irType))
  }

  def genTypeCheck(startBlock : IrBlockBuilder)(boxedValue : IrValue, successBlock : IrBranchTarget, failBlock : IrBranchTarget) {
    val datumValue = BoxedDatum.genPointerBitcast(startBlock)(boxedValue)
    val typeIdPointer = BoxedDatum.genPointerToTypeId(startBlock)(datumValue)
    val typeId = startBlock.load("typeId")(typeIdPointer)

    val isMutableVar = startBlock.icmp("isMutableVar")(ComparisonCond.Equal, None, typeId, IntegerConstant(IntegerType(16), 11))
    startBlock.condBranch(isMutableVar, successBlock, failBlock)
  }

  def genPointerToTypeId(block : IrBlockBuilder)(boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != PointerType(UserDefinedType("mutableVar"))) {
       throw new InternalCompilerErrorException(s"Unexpected type for boxed value. Passed ${boxedValue.irType}, expected %mutableVar*")
    }

    block.getelementptr("typeIdPtr")(
      elementType=IntegerType(16),
      basePointer=boxedValue,
      indices=List(0, 0, 0).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genStoreToTypeId(block : IrBlockBuilder)(toStore : IrValue, boxedValue : IrValue) : Unit = {
    val typeIdPointer = genPointerToTypeId(block)(boxedValue)
    block.store(toStore, typeIdPointer, tbaaIndex=Some(tbaaIndex))
  }

  def genLoadFromTypeId(block : IrBlockBuilder)(boxedValue : IrValue) : IrValue = {
    val typeIdPointer = genPointerToTypeId(block)(boxedValue)
    block.load("typeId")(typeIdPointer, tbaaIndex=Some(tbaaIndex))
  }

  def genPointerToGcState(block : IrBlockBuilder)(boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != PointerType(UserDefinedType("mutableVar"))) {
       throw new InternalCompilerErrorException(s"Unexpected type for boxed value. Passed ${boxedValue.irType}, expected %mutableVar*")
    }

    block.getelementptr("gcStatePtr")(
      elementType=IntegerType(16),
      basePointer=boxedValue,
      indices=List(0, 0, 1).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genStoreToGcState(block : IrBlockBuilder)(toStore : IrValue, boxedValue : IrValue) : Unit = {
    val gcStatePointer = genPointerToGcState(block)(boxedValue)
    block.store(toStore, gcStatePointer, tbaaIndex=Some(tbaaIndex))
  }

  def genLoadFromGcState(block : IrBlockBuilder)(boxedValue : IrValue) : IrValue = {
    val gcStatePointer = genPointerToGcState(block)(boxedValue)
    block.load("gcState")(gcStatePointer, tbaaIndex=Some(tbaaIndex))
  }

  def genPointerToCurrentValue(block : IrBlockBuilder)(boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != PointerType(UserDefinedType("mutableVar"))) {
       throw new InternalCompilerErrorException(s"Unexpected type for boxed value. Passed ${boxedValue.irType}, expected %mutableVar*")
    }

    block.getelementptr("currentValuePtr")(
      elementType=PointerType(UserDefinedType("datum")),
      basePointer=boxedValue,
      indices=List(0, 1).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genStoreToCurrentValue(block : IrBlockBuilder)(toStore : IrValue, boxedValue : IrValue) : Unit = {
    val currentValuePointer = genPointerToCurrentValue(block)(boxedValue)
    block.store(toStore, currentValuePointer, tbaaIndex=Some(tbaaIndex))
  }

  def genLoadFromCurrentValue(block : IrBlockBuilder)(boxedValue : IrValue) : IrValue = {
    val currentValuePointer = genPointerToCurrentValue(block)(boxedValue)
    block.load("currentValue")(currentValuePointer, tbaaIndex=Some(tbaaIndex))
  }
}

object BoxedVectorLike extends BoxedType {
  val name = "vectorLike"
  val irType = UserDefinedType("vectorLike")
  val supertype = Some(BoxedDatum)
  val directSubtypes = Set[BoxedType](BoxedVector)
  val isAbstract = true
  val tbaaIndex = 16

  def createConstant(length : IrConstant, elements : IrConstant, typeId : IrConstant) : StructureConstant = {
    if (length.irType != IntegerType(32)) {
      throw new InternalCompilerErrorException("Unexpected type for field length")
    }

    if (elements.irType != PointerType(PointerType(UserDefinedType("datum")))) {
      throw new InternalCompilerErrorException("Unexpected type for field elements")
    }

    StructureConstant(List(
      supertype.get.createConstant(
        typeId=typeId
      ),
      length,
      elements
    ), userDefinedType=Some(irType))
  }

  def genTypeCheck(startBlock : IrBlockBuilder)(boxedValue : IrValue, successBlock : IrBranchTarget, failBlock : IrBranchTarget) {
    val datumValue = BoxedDatum.genPointerBitcast(startBlock)(boxedValue)
    val typeIdPointer = BoxedDatum.genPointerToTypeId(startBlock)(datumValue)
    val typeId = startBlock.load("typeId")(typeIdPointer)

    val vectorLikeTypeMasked = startBlock.and("vectorLikeTypeMasked")(typeId, IntegerConstant(IntegerType(16), 0x8000))
    val isVectorLike = startBlock.icmp("isVectorLike")(ComparisonCond.NotEqual, None, vectorLikeTypeMasked, IntegerConstant(IntegerType(16), 0))
    startBlock.condBranch(isVectorLike, successBlock, failBlock)
  }

  def genPointerToTypeId(block : IrBlockBuilder)(boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != PointerType(UserDefinedType("vectorLike"))) {
       throw new InternalCompilerErrorException(s"Unexpected type for boxed value. Passed ${boxedValue.irType}, expected %vectorLike*")
    }

    block.getelementptr("typeIdPtr")(
      elementType=IntegerType(16),
      basePointer=boxedValue,
      indices=List(0, 0, 0).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genStoreToTypeId(block : IrBlockBuilder)(toStore : IrValue, boxedValue : IrValue) : Unit = {
    val typeIdPointer = genPointerToTypeId(block)(boxedValue)
    block.store(toStore, typeIdPointer, tbaaIndex=Some(tbaaIndex))
  }

  def genLoadFromTypeId(block : IrBlockBuilder)(boxedValue : IrValue) : IrValue = {
    val typeIdPointer = genPointerToTypeId(block)(boxedValue)
    block.load("typeId")(typeIdPointer, tbaaIndex=Some(tbaaIndex))
  }

  def genPointerToGcState(block : IrBlockBuilder)(boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != PointerType(UserDefinedType("vectorLike"))) {
       throw new InternalCompilerErrorException(s"Unexpected type for boxed value. Passed ${boxedValue.irType}, expected %vectorLike*")
    }

    block.getelementptr("gcStatePtr")(
      elementType=IntegerType(16),
      basePointer=boxedValue,
      indices=List(0, 0, 1).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genStoreToGcState(block : IrBlockBuilder)(toStore : IrValue, boxedValue : IrValue) : Unit = {
    val gcStatePointer = genPointerToGcState(block)(boxedValue)
    block.store(toStore, gcStatePointer, tbaaIndex=Some(tbaaIndex))
  }

  def genLoadFromGcState(block : IrBlockBuilder)(boxedValue : IrValue) : IrValue = {
    val gcStatePointer = genPointerToGcState(block)(boxedValue)
    block.load("gcState")(gcStatePointer, tbaaIndex=Some(tbaaIndex))
  }

  def genPointerToLength(block : IrBlockBuilder)(boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != PointerType(UserDefinedType("vectorLike"))) {
       throw new InternalCompilerErrorException(s"Unexpected type for boxed value. Passed ${boxedValue.irType}, expected %vectorLike*")
    }

    block.getelementptr("lengthPtr")(
      elementType=IntegerType(32),
      basePointer=boxedValue,
      indices=List(0, 1).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genStoreToLength(block : IrBlockBuilder)(toStore : IrValue, boxedValue : IrValue) : Unit = {
    val lengthPointer = genPointerToLength(block)(boxedValue)
    block.store(toStore, lengthPointer, tbaaIndex=Some(tbaaIndex))
  }

  def genLoadFromLength(block : IrBlockBuilder)(boxedValue : IrValue) : IrValue = {
    val lengthPointer = genPointerToLength(block)(boxedValue)
    block.load("length")(lengthPointer, tbaaIndex=Some(tbaaIndex))
  }

  def genPointerToElements(block : IrBlockBuilder)(boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != PointerType(UserDefinedType("vectorLike"))) {
       throw new InternalCompilerErrorException(s"Unexpected type for boxed value. Passed ${boxedValue.irType}, expected %vectorLike*")
    }

    block.getelementptr("elementsPtr")(
      elementType=PointerType(PointerType(UserDefinedType("datum"))),
      basePointer=boxedValue,
      indices=List(0, 2).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genStoreToElements(block : IrBlockBuilder)(toStore : IrValue, boxedValue : IrValue) : Unit = {
    val elementsPointer = genPointerToElements(block)(boxedValue)
    block.store(toStore, elementsPointer, tbaaIndex=Some(tbaaIndex))
  }

  def genLoadFromElements(block : IrBlockBuilder)(boxedValue : IrValue) : IrValue = {
    val elementsPointer = genPointerToElements(block)(boxedValue)
    block.load("elements")(elementsPointer, tbaaIndex=Some(tbaaIndex))
  }
}

object BoxedVector extends ConcreteBoxedType {
  val name = "vector"
  val irType = UserDefinedType("vector")
  val supertype = Some(BoxedVectorLike)
  val directSubtypes = Set[BoxedType]()
  val isAbstract = false
  val tbaaIndex = 17
  val typeId = 32768

  def createConstant(length : IrConstant, elements : IrConstant) : StructureConstant = {
    StructureConstant(List(
      supertype.get.createConstant(
        length=length,
        elements=elements,
        typeId=IntegerConstant(IntegerType(16), typeId)
      )
    ), userDefinedType=Some(irType))
  }

  def genTypeCheck(startBlock : IrBlockBuilder)(boxedValue : IrValue, successBlock : IrBranchTarget, failBlock : IrBranchTarget) {
    val datumValue = BoxedDatum.genPointerBitcast(startBlock)(boxedValue)
    val typeIdPointer = BoxedDatum.genPointerToTypeId(startBlock)(datumValue)
    val typeId = startBlock.load("typeId")(typeIdPointer)

    val isVector = startBlock.icmp("isVector")(ComparisonCond.Equal, None, typeId, IntegerConstant(IntegerType(16), 32768))
    startBlock.condBranch(isVector, successBlock, failBlock)
  }

  def genPointerToTypeId(block : IrBlockBuilder)(boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != PointerType(UserDefinedType("vector"))) {
       throw new InternalCompilerErrorException(s"Unexpected type for boxed value. Passed ${boxedValue.irType}, expected %vector*")
    }

    block.getelementptr("typeIdPtr")(
      elementType=IntegerType(16),
      basePointer=boxedValue,
      indices=List(0, 0, 0, 0).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genStoreToTypeId(block : IrBlockBuilder)(toStore : IrValue, boxedValue : IrValue) : Unit = {
    val typeIdPointer = genPointerToTypeId(block)(boxedValue)
    block.store(toStore, typeIdPointer, tbaaIndex=Some(tbaaIndex))
  }

  def genLoadFromTypeId(block : IrBlockBuilder)(boxedValue : IrValue) : IrValue = {
    val typeIdPointer = genPointerToTypeId(block)(boxedValue)
    block.load("typeId")(typeIdPointer, tbaaIndex=Some(tbaaIndex))
  }

  def genPointerToGcState(block : IrBlockBuilder)(boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != PointerType(UserDefinedType("vector"))) {
       throw new InternalCompilerErrorException(s"Unexpected type for boxed value. Passed ${boxedValue.irType}, expected %vector*")
    }

    block.getelementptr("gcStatePtr")(
      elementType=IntegerType(16),
      basePointer=boxedValue,
      indices=List(0, 0, 0, 1).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genStoreToGcState(block : IrBlockBuilder)(toStore : IrValue, boxedValue : IrValue) : Unit = {
    val gcStatePointer = genPointerToGcState(block)(boxedValue)
    block.store(toStore, gcStatePointer, tbaaIndex=Some(tbaaIndex))
  }

  def genLoadFromGcState(block : IrBlockBuilder)(boxedValue : IrValue) : IrValue = {
    val gcStatePointer = genPointerToGcState(block)(boxedValue)
    block.load("gcState")(gcStatePointer, tbaaIndex=Some(tbaaIndex))
  }

  def genPointerToLength(block : IrBlockBuilder)(boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != PointerType(UserDefinedType("vector"))) {
       throw new InternalCompilerErrorException(s"Unexpected type for boxed value. Passed ${boxedValue.irType}, expected %vector*")
    }

    block.getelementptr("lengthPtr")(
      elementType=IntegerType(32),
      basePointer=boxedValue,
      indices=List(0, 0, 1).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genStoreToLength(block : IrBlockBuilder)(toStore : IrValue, boxedValue : IrValue) : Unit = {
    val lengthPointer = genPointerToLength(block)(boxedValue)
    block.store(toStore, lengthPointer, tbaaIndex=Some(tbaaIndex))
  }

  def genLoadFromLength(block : IrBlockBuilder)(boxedValue : IrValue) : IrValue = {
    val lengthPointer = genPointerToLength(block)(boxedValue)
    block.load("length")(lengthPointer, tbaaIndex=Some(tbaaIndex))
  }

  def genPointerToElements(block : IrBlockBuilder)(boxedValue : IrValue) : IrValue = {
    if (boxedValue.irType != PointerType(UserDefinedType("vector"))) {
       throw new InternalCompilerErrorException(s"Unexpected type for boxed value. Passed ${boxedValue.irType}, expected %vector*")
    }

    block.getelementptr("elementsPtr")(
      elementType=PointerType(PointerType(UserDefinedType("datum"))),
      basePointer=boxedValue,
      indices=List(0, 0, 2).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genStoreToElements(block : IrBlockBuilder)(toStore : IrValue, boxedValue : IrValue) : Unit = {
    val elementsPointer = genPointerToElements(block)(boxedValue)
    block.store(toStore, elementsPointer, tbaaIndex=Some(tbaaIndex))
  }

  def genLoadFromElements(block : IrBlockBuilder)(boxedValue : IrValue) : IrValue = {
    val elementsPointer = genPointerToElements(block)(boxedValue)
    block.load("elements")(elementsPointer, tbaaIndex=Some(tbaaIndex))
  }
}

