/*****************************************************************
 * This file is generated by gen-types.py. Do not edit manually. *
 *****************************************************************/

package io.llambda.compiler.celltype
import io.llambda

import llambda.llvmir._
import llambda.compiler.InternalCompilerErrorException

sealed abstract class CellType extends DatumFields {
  val name : String
  val irType : FirstClassType
  val supertype : Option[CellType]
  val directSubtypes : Set[CellType]
  val isAbstract : Boolean
  val tbaaIndex : Int

  def genTypeCheck(startBlock : IrBlockBuilder)(valueCell : IrValue, successBlock : IrBranchTarget, failBlock : IrBranchTarget)

  def isTypeOrSubtypeOf(otherType : CellType) : Boolean = {
    if (otherType == this) {
      return true
    }

    supertype map (_.isTypeOrSubtypeOf(otherType)) getOrElse false
  }

  def isTypeOrSupertypeOf(otherType : CellType) : Boolean = {
    if (otherType == this) {
      return true
    }

    directSubtypes exists (_.isTypeOrSupertypeOf(otherType))
  }

  def concreteTypes : Set[ConcreteCellType] = this match {
    case concreteType : ConcreteCellType => Set(concreteType)
    case abstractType => directSubtypes.flatMap(_.concreteTypes)
  }

  def genPointerBitcast(block : IrBlockBuilder)(uncastValue : IrValue) : IrValue =
    if (uncastValue.irType == PointerType(irType)) {
      uncastValue
    }
    else {
      block.bitcastTo(name + "Cast")(uncastValue, PointerType(irType))
    }
}

sealed abstract class ConcreteCellType extends CellType {
  val typeId : Int
}

sealed trait DatumFields  {
  val typeIdIrType = IntegerType(8)
  val gcStateIrType = IntegerType(8)

  def genPointerToTypeId(block : IrBlockBuilder)(valueCell : IrValue) : IrValue
  def genStoreToTypeId(block : IrBlockBuilder)(toStore : IrValue, valueCell : IrValue) : Unit
  def genLoadFromTypeId(block : IrBlockBuilder)(valueCell : IrValue) : IrValue

  def genPointerToGcState(block : IrBlockBuilder)(valueCell : IrValue) : IrValue
  def genStoreToGcState(block : IrBlockBuilder)(toStore : IrValue, valueCell : IrValue) : Unit
  def genLoadFromGcState(block : IrBlockBuilder)(valueCell : IrValue) : IrValue
}

object DatumCell extends CellType with DatumFields {
  val name = "datum"
  val irType = UserDefinedType("datum")
  val supertype = None
  val directSubtypes = Set[CellType](UnspecificCell, ListElementCell, StringLikeCell, BooleanCell, NumericCell, CharacterCell, VectorCell, BytevectorCell, RecordLikeCell)
  val isAbstract = true
  val tbaaIndex = 0

  def createConstant(typeId : Long) : StructureConstant = {
    StructureConstant(List(
      IntegerConstant(typeIdIrType, typeId),
      IntegerConstant(gcStateIrType, 0)
    ), userDefinedType=Some(irType))
  }

  def genTypeCheck(startBlock : IrBlockBuilder)(valueCell : IrValue, successBlock : IrBranchTarget, failBlock : IrBranchTarget) {
    startBlock.uncondBranch(successBlock)
  }

  def genPointerToTypeId(block : IrBlockBuilder)(valueCell : IrValue) : IrValue = {
    if (valueCell.irType != PointerType(UserDefinedType("datum"))) {
       throw new InternalCompilerErrorException(s"Unexpected type for cell value. Passed ${valueCell.irType}, expected %datum*")
    }

    block.getelementptr("typeIdPtr")(
      elementType=typeIdIrType,
      basePointer=valueCell,
      indices=List(0, 0).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genStoreToTypeId(block : IrBlockBuilder)(toStore : IrValue, valueCell : IrValue) : Unit = {
    val typeIdPointer = genPointerToTypeId(block)(valueCell)
    block.store(toStore, typeIdPointer, tbaaIndex=Some(tbaaIndex))
  }

  def genLoadFromTypeId(block : IrBlockBuilder)(valueCell : IrValue) : IrValue = {
    val typeIdPointer = genPointerToTypeId(block)(valueCell)
    block.load("typeId")(typeIdPointer, tbaaIndex=Some(tbaaIndex))
  }

  def genPointerToGcState(block : IrBlockBuilder)(valueCell : IrValue) : IrValue = {
    if (valueCell.irType != PointerType(UserDefinedType("datum"))) {
       throw new InternalCompilerErrorException(s"Unexpected type for cell value. Passed ${valueCell.irType}, expected %datum*")
    }

    block.getelementptr("gcStatePtr")(
      elementType=gcStateIrType,
      basePointer=valueCell,
      indices=List(0, 1).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genStoreToGcState(block : IrBlockBuilder)(toStore : IrValue, valueCell : IrValue) : Unit = {
    val gcStatePointer = genPointerToGcState(block)(valueCell)
    block.store(toStore, gcStatePointer, tbaaIndex=Some(tbaaIndex))
  }

  def genLoadFromGcState(block : IrBlockBuilder)(valueCell : IrValue) : IrValue = {
    val gcStatePointer = genPointerToGcState(block)(valueCell)
    block.load("gcState")(gcStatePointer, tbaaIndex=Some(tbaaIndex))
  }
}

sealed trait UnspecificFields extends DatumFields {
}

object UnspecificCell extends ConcreteCellType with UnspecificFields {
  val name = "unspecific"
  val irType = UserDefinedType("unspecific")
  val supertype = Some(DatumCell)
  val directSubtypes = Set[CellType]()
  val isAbstract = false
  val tbaaIndex = 1
  val typeId = 0

  def genTypeCheck(startBlock : IrBlockBuilder)(valueCell : IrValue, successBlock : IrBranchTarget, failBlock : IrBranchTarget) {
    val datumValue = DatumCell.genPointerBitcast(startBlock)(valueCell)
    val typeId = DatumCell.genLoadFromTypeId(startBlock)(datumValue)
    startBlock.switch(typeId, failBlock, (0L -> successBlock))
  }

  def genPointerToTypeId(block : IrBlockBuilder)(valueCell : IrValue) : IrValue = {
    if (valueCell.irType != PointerType(UserDefinedType("unspecific"))) {
       throw new InternalCompilerErrorException(s"Unexpected type for cell value. Passed ${valueCell.irType}, expected %unspecific*")
    }

    block.getelementptr("typeIdPtr")(
      elementType=typeIdIrType,
      basePointer=valueCell,
      indices=List(0, 0, 0).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genStoreToTypeId(block : IrBlockBuilder)(toStore : IrValue, valueCell : IrValue) : Unit = {
    val typeIdPointer = genPointerToTypeId(block)(valueCell)
    block.store(toStore, typeIdPointer, tbaaIndex=Some(tbaaIndex))
  }

  def genLoadFromTypeId(block : IrBlockBuilder)(valueCell : IrValue) : IrValue = {
    val typeIdPointer = genPointerToTypeId(block)(valueCell)
    block.load("typeId")(typeIdPointer, tbaaIndex=Some(tbaaIndex))
  }

  def genPointerToGcState(block : IrBlockBuilder)(valueCell : IrValue) : IrValue = {
    if (valueCell.irType != PointerType(UserDefinedType("unspecific"))) {
       throw new InternalCompilerErrorException(s"Unexpected type for cell value. Passed ${valueCell.irType}, expected %unspecific*")
    }

    block.getelementptr("gcStatePtr")(
      elementType=gcStateIrType,
      basePointer=valueCell,
      indices=List(0, 0, 1).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genStoreToGcState(block : IrBlockBuilder)(toStore : IrValue, valueCell : IrValue) : Unit = {
    val gcStatePointer = genPointerToGcState(block)(valueCell)
    block.store(toStore, gcStatePointer, tbaaIndex=Some(tbaaIndex))
  }

  def genLoadFromGcState(block : IrBlockBuilder)(valueCell : IrValue) : IrValue = {
    val gcStatePointer = genPointerToGcState(block)(valueCell)
    block.load("gcState")(gcStatePointer, tbaaIndex=Some(tbaaIndex))
  }
}

sealed trait ListElementFields extends DatumFields {
}

object ListElementCell extends CellType with ListElementFields {
  val name = "listElement"
  val irType = UserDefinedType("listElement")
  val supertype = Some(DatumCell)
  val directSubtypes = Set[CellType](PairCell, EmptyListCell)
  val isAbstract = true
  val tbaaIndex = 2

  def createConstant(typeId : Long) : StructureConstant = {
    StructureConstant(List(
      supertype.get.createConstant(
        typeId=typeId
      )
    ), userDefinedType=Some(irType))
  }

  def genTypeCheck(startBlock : IrBlockBuilder)(valueCell : IrValue, successBlock : IrBranchTarget, failBlock : IrBranchTarget) {
    val datumValue = DatumCell.genPointerBitcast(startBlock)(valueCell)
    val typeId = DatumCell.genLoadFromTypeId(startBlock)(datumValue)
    startBlock.switch(typeId, failBlock, (1L -> successBlock), (2L -> successBlock))
  }

  def genPointerToTypeId(block : IrBlockBuilder)(valueCell : IrValue) : IrValue = {
    if (valueCell.irType != PointerType(UserDefinedType("listElement"))) {
       throw new InternalCompilerErrorException(s"Unexpected type for cell value. Passed ${valueCell.irType}, expected %listElement*")
    }

    block.getelementptr("typeIdPtr")(
      elementType=typeIdIrType,
      basePointer=valueCell,
      indices=List(0, 0, 0).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genStoreToTypeId(block : IrBlockBuilder)(toStore : IrValue, valueCell : IrValue) : Unit = {
    val typeIdPointer = genPointerToTypeId(block)(valueCell)
    block.store(toStore, typeIdPointer, tbaaIndex=Some(tbaaIndex))
  }

  def genLoadFromTypeId(block : IrBlockBuilder)(valueCell : IrValue) : IrValue = {
    val typeIdPointer = genPointerToTypeId(block)(valueCell)
    block.load("typeId")(typeIdPointer, tbaaIndex=Some(tbaaIndex))
  }

  def genPointerToGcState(block : IrBlockBuilder)(valueCell : IrValue) : IrValue = {
    if (valueCell.irType != PointerType(UserDefinedType("listElement"))) {
       throw new InternalCompilerErrorException(s"Unexpected type for cell value. Passed ${valueCell.irType}, expected %listElement*")
    }

    block.getelementptr("gcStatePtr")(
      elementType=gcStateIrType,
      basePointer=valueCell,
      indices=List(0, 0, 1).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genStoreToGcState(block : IrBlockBuilder)(toStore : IrValue, valueCell : IrValue) : Unit = {
    val gcStatePointer = genPointerToGcState(block)(valueCell)
    block.store(toStore, gcStatePointer, tbaaIndex=Some(tbaaIndex))
  }

  def genLoadFromGcState(block : IrBlockBuilder)(valueCell : IrValue) : IrValue = {
    val gcStatePointer = genPointerToGcState(block)(valueCell)
    block.load("gcState")(gcStatePointer, tbaaIndex=Some(tbaaIndex))
  }
}

sealed trait PairFields extends ListElementFields {
  val carIrType = PointerType(UserDefinedType("datum"))
  val cdrIrType = PointerType(UserDefinedType("datum"))

  def genPointerToCar(block : IrBlockBuilder)(valueCell : IrValue) : IrValue
  def genStoreToCar(block : IrBlockBuilder)(toStore : IrValue, valueCell : IrValue) : Unit
  def genLoadFromCar(block : IrBlockBuilder)(valueCell : IrValue) : IrValue

  def genPointerToCdr(block : IrBlockBuilder)(valueCell : IrValue) : IrValue
  def genStoreToCdr(block : IrBlockBuilder)(toStore : IrValue, valueCell : IrValue) : Unit
  def genLoadFromCdr(block : IrBlockBuilder)(valueCell : IrValue) : IrValue
}

object PairCell extends ConcreteCellType with PairFields {
  val name = "pair"
  val irType = UserDefinedType("pair")
  val supertype = Some(ListElementCell)
  val directSubtypes = Set[CellType]()
  val isAbstract = false
  val tbaaIndex = 3
  val typeId = 1

  def createConstant(car : IrConstant, cdr : IrConstant) : StructureConstant = {
    if (car.irType != carIrType) {
      throw new InternalCompilerErrorException("Unexpected type for field car")
    }

    if (cdr.irType != cdrIrType) {
      throw new InternalCompilerErrorException("Unexpected type for field cdr")
    }

    StructureConstant(List(
      supertype.get.createConstant(
        typeId=typeId
      ),
      car,
      cdr
    ), userDefinedType=Some(irType))
  }

  def genTypeCheck(startBlock : IrBlockBuilder)(valueCell : IrValue, successBlock : IrBranchTarget, failBlock : IrBranchTarget) {
    val datumValue = DatumCell.genPointerBitcast(startBlock)(valueCell)
    val typeId = DatumCell.genLoadFromTypeId(startBlock)(datumValue)
    startBlock.switch(typeId, failBlock, (1L -> successBlock))
  }

  def genPointerToTypeId(block : IrBlockBuilder)(valueCell : IrValue) : IrValue = {
    if (valueCell.irType != PointerType(UserDefinedType("pair"))) {
       throw new InternalCompilerErrorException(s"Unexpected type for cell value. Passed ${valueCell.irType}, expected %pair*")
    }

    block.getelementptr("typeIdPtr")(
      elementType=typeIdIrType,
      basePointer=valueCell,
      indices=List(0, 0, 0, 0).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genStoreToTypeId(block : IrBlockBuilder)(toStore : IrValue, valueCell : IrValue) : Unit = {
    val typeIdPointer = genPointerToTypeId(block)(valueCell)
    block.store(toStore, typeIdPointer, tbaaIndex=Some(tbaaIndex))
  }

  def genLoadFromTypeId(block : IrBlockBuilder)(valueCell : IrValue) : IrValue = {
    val typeIdPointer = genPointerToTypeId(block)(valueCell)
    block.load("typeId")(typeIdPointer, tbaaIndex=Some(tbaaIndex))
  }

  def genPointerToGcState(block : IrBlockBuilder)(valueCell : IrValue) : IrValue = {
    if (valueCell.irType != PointerType(UserDefinedType("pair"))) {
       throw new InternalCompilerErrorException(s"Unexpected type for cell value. Passed ${valueCell.irType}, expected %pair*")
    }

    block.getelementptr("gcStatePtr")(
      elementType=gcStateIrType,
      basePointer=valueCell,
      indices=List(0, 0, 0, 1).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genStoreToGcState(block : IrBlockBuilder)(toStore : IrValue, valueCell : IrValue) : Unit = {
    val gcStatePointer = genPointerToGcState(block)(valueCell)
    block.store(toStore, gcStatePointer, tbaaIndex=Some(tbaaIndex))
  }

  def genLoadFromGcState(block : IrBlockBuilder)(valueCell : IrValue) : IrValue = {
    val gcStatePointer = genPointerToGcState(block)(valueCell)
    block.load("gcState")(gcStatePointer, tbaaIndex=Some(tbaaIndex))
  }

  def genPointerToCar(block : IrBlockBuilder)(valueCell : IrValue) : IrValue = {
    if (valueCell.irType != PointerType(UserDefinedType("pair"))) {
       throw new InternalCompilerErrorException(s"Unexpected type for cell value. Passed ${valueCell.irType}, expected %pair*")
    }

    block.getelementptr("carPtr")(
      elementType=carIrType,
      basePointer=valueCell,
      indices=List(0, 1).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genStoreToCar(block : IrBlockBuilder)(toStore : IrValue, valueCell : IrValue) : Unit = {
    val carPointer = genPointerToCar(block)(valueCell)
    block.store(toStore, carPointer, tbaaIndex=Some(tbaaIndex))
  }

  def genLoadFromCar(block : IrBlockBuilder)(valueCell : IrValue) : IrValue = {
    val carPointer = genPointerToCar(block)(valueCell)
    block.load("car")(carPointer, tbaaIndex=Some(tbaaIndex))
  }

  def genPointerToCdr(block : IrBlockBuilder)(valueCell : IrValue) : IrValue = {
    if (valueCell.irType != PointerType(UserDefinedType("pair"))) {
       throw new InternalCompilerErrorException(s"Unexpected type for cell value. Passed ${valueCell.irType}, expected %pair*")
    }

    block.getelementptr("cdrPtr")(
      elementType=cdrIrType,
      basePointer=valueCell,
      indices=List(0, 2).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genStoreToCdr(block : IrBlockBuilder)(toStore : IrValue, valueCell : IrValue) : Unit = {
    val cdrPointer = genPointerToCdr(block)(valueCell)
    block.store(toStore, cdrPointer, tbaaIndex=Some(tbaaIndex))
  }

  def genLoadFromCdr(block : IrBlockBuilder)(valueCell : IrValue) : IrValue = {
    val cdrPointer = genPointerToCdr(block)(valueCell)
    block.load("cdr")(cdrPointer, tbaaIndex=Some(tbaaIndex))
  }
}

sealed trait EmptyListFields extends ListElementFields {
}

object EmptyListCell extends ConcreteCellType with EmptyListFields {
  val name = "emptyList"
  val irType = UserDefinedType("emptyList")
  val supertype = Some(ListElementCell)
  val directSubtypes = Set[CellType]()
  val isAbstract = false
  val tbaaIndex = 4
  val typeId = 2

  def genTypeCheck(startBlock : IrBlockBuilder)(valueCell : IrValue, successBlock : IrBranchTarget, failBlock : IrBranchTarget) {
    val datumValue = DatumCell.genPointerBitcast(startBlock)(valueCell)
    val typeId = DatumCell.genLoadFromTypeId(startBlock)(datumValue)
    startBlock.switch(typeId, failBlock, (2L -> successBlock))
  }

  def genPointerToTypeId(block : IrBlockBuilder)(valueCell : IrValue) : IrValue = {
    if (valueCell.irType != PointerType(UserDefinedType("emptyList"))) {
       throw new InternalCompilerErrorException(s"Unexpected type for cell value. Passed ${valueCell.irType}, expected %emptyList*")
    }

    block.getelementptr("typeIdPtr")(
      elementType=typeIdIrType,
      basePointer=valueCell,
      indices=List(0, 0, 0, 0).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genStoreToTypeId(block : IrBlockBuilder)(toStore : IrValue, valueCell : IrValue) : Unit = {
    val typeIdPointer = genPointerToTypeId(block)(valueCell)
    block.store(toStore, typeIdPointer, tbaaIndex=Some(tbaaIndex))
  }

  def genLoadFromTypeId(block : IrBlockBuilder)(valueCell : IrValue) : IrValue = {
    val typeIdPointer = genPointerToTypeId(block)(valueCell)
    block.load("typeId")(typeIdPointer, tbaaIndex=Some(tbaaIndex))
  }

  def genPointerToGcState(block : IrBlockBuilder)(valueCell : IrValue) : IrValue = {
    if (valueCell.irType != PointerType(UserDefinedType("emptyList"))) {
       throw new InternalCompilerErrorException(s"Unexpected type for cell value. Passed ${valueCell.irType}, expected %emptyList*")
    }

    block.getelementptr("gcStatePtr")(
      elementType=gcStateIrType,
      basePointer=valueCell,
      indices=List(0, 0, 0, 1).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genStoreToGcState(block : IrBlockBuilder)(toStore : IrValue, valueCell : IrValue) : Unit = {
    val gcStatePointer = genPointerToGcState(block)(valueCell)
    block.store(toStore, gcStatePointer, tbaaIndex=Some(tbaaIndex))
  }

  def genLoadFromGcState(block : IrBlockBuilder)(valueCell : IrValue) : IrValue = {
    val gcStatePointer = genPointerToGcState(block)(valueCell)
    block.load("gcState")(gcStatePointer, tbaaIndex=Some(tbaaIndex))
  }
}

sealed trait StringLikeFields extends DatumFields {
  val charLengthIrType = IntegerType(32)
  val byteLengthIrType = IntegerType(32)
  val utf8DataIrType = PointerType(IntegerType(8))

  def genPointerToCharLength(block : IrBlockBuilder)(valueCell : IrValue) : IrValue
  def genStoreToCharLength(block : IrBlockBuilder)(toStore : IrValue, valueCell : IrValue) : Unit
  def genLoadFromCharLength(block : IrBlockBuilder)(valueCell : IrValue) : IrValue

  def genPointerToByteLength(block : IrBlockBuilder)(valueCell : IrValue) : IrValue
  def genStoreToByteLength(block : IrBlockBuilder)(toStore : IrValue, valueCell : IrValue) : Unit
  def genLoadFromByteLength(block : IrBlockBuilder)(valueCell : IrValue) : IrValue

  def genPointerToUtf8Data(block : IrBlockBuilder)(valueCell : IrValue) : IrValue
  def genStoreToUtf8Data(block : IrBlockBuilder)(toStore : IrValue, valueCell : IrValue) : Unit
  def genLoadFromUtf8Data(block : IrBlockBuilder)(valueCell : IrValue) : IrValue
}

object StringLikeCell extends CellType with StringLikeFields {
  val name = "stringLike"
  val irType = UserDefinedType("stringLike")
  val supertype = Some(DatumCell)
  val directSubtypes = Set[CellType](StringCell, SymbolCell)
  val isAbstract = true
  val tbaaIndex = 5

  def createConstant(charLength : Long, byteLength : Long, utf8Data : IrConstant, typeId : Long) : StructureConstant = {
    if (utf8Data.irType != utf8DataIrType) {
      throw new InternalCompilerErrorException("Unexpected type for field utf8Data")
    }

    StructureConstant(List(
      supertype.get.createConstant(
        typeId=typeId
      ),
      IntegerConstant(charLengthIrType, charLength),
      IntegerConstant(byteLengthIrType, byteLength),
      utf8Data
    ), userDefinedType=Some(irType))
  }

  def genTypeCheck(startBlock : IrBlockBuilder)(valueCell : IrValue, successBlock : IrBranchTarget, failBlock : IrBranchTarget) {
    val datumValue = DatumCell.genPointerBitcast(startBlock)(valueCell)
    val typeId = DatumCell.genLoadFromTypeId(startBlock)(datumValue)
    startBlock.switch(typeId, failBlock, (3L -> successBlock), (4L -> successBlock))
  }

  def genPointerToTypeId(block : IrBlockBuilder)(valueCell : IrValue) : IrValue = {
    if (valueCell.irType != PointerType(UserDefinedType("stringLike"))) {
       throw new InternalCompilerErrorException(s"Unexpected type for cell value. Passed ${valueCell.irType}, expected %stringLike*")
    }

    block.getelementptr("typeIdPtr")(
      elementType=typeIdIrType,
      basePointer=valueCell,
      indices=List(0, 0, 0).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genStoreToTypeId(block : IrBlockBuilder)(toStore : IrValue, valueCell : IrValue) : Unit = {
    val typeIdPointer = genPointerToTypeId(block)(valueCell)
    block.store(toStore, typeIdPointer, tbaaIndex=Some(tbaaIndex))
  }

  def genLoadFromTypeId(block : IrBlockBuilder)(valueCell : IrValue) : IrValue = {
    val typeIdPointer = genPointerToTypeId(block)(valueCell)
    block.load("typeId")(typeIdPointer, tbaaIndex=Some(tbaaIndex))
  }

  def genPointerToGcState(block : IrBlockBuilder)(valueCell : IrValue) : IrValue = {
    if (valueCell.irType != PointerType(UserDefinedType("stringLike"))) {
       throw new InternalCompilerErrorException(s"Unexpected type for cell value. Passed ${valueCell.irType}, expected %stringLike*")
    }

    block.getelementptr("gcStatePtr")(
      elementType=gcStateIrType,
      basePointer=valueCell,
      indices=List(0, 0, 1).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genStoreToGcState(block : IrBlockBuilder)(toStore : IrValue, valueCell : IrValue) : Unit = {
    val gcStatePointer = genPointerToGcState(block)(valueCell)
    block.store(toStore, gcStatePointer, tbaaIndex=Some(tbaaIndex))
  }

  def genLoadFromGcState(block : IrBlockBuilder)(valueCell : IrValue) : IrValue = {
    val gcStatePointer = genPointerToGcState(block)(valueCell)
    block.load("gcState")(gcStatePointer, tbaaIndex=Some(tbaaIndex))
  }

  def genPointerToCharLength(block : IrBlockBuilder)(valueCell : IrValue) : IrValue = {
    if (valueCell.irType != PointerType(UserDefinedType("stringLike"))) {
       throw new InternalCompilerErrorException(s"Unexpected type for cell value. Passed ${valueCell.irType}, expected %stringLike*")
    }

    block.getelementptr("charLengthPtr")(
      elementType=charLengthIrType,
      basePointer=valueCell,
      indices=List(0, 1).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genStoreToCharLength(block : IrBlockBuilder)(toStore : IrValue, valueCell : IrValue) : Unit = {
    val charLengthPointer = genPointerToCharLength(block)(valueCell)
    block.store(toStore, charLengthPointer, tbaaIndex=Some(tbaaIndex))
  }

  def genLoadFromCharLength(block : IrBlockBuilder)(valueCell : IrValue) : IrValue = {
    val charLengthPointer = genPointerToCharLength(block)(valueCell)
    block.load("charLength")(charLengthPointer, tbaaIndex=Some(tbaaIndex))
  }

  def genPointerToByteLength(block : IrBlockBuilder)(valueCell : IrValue) : IrValue = {
    if (valueCell.irType != PointerType(UserDefinedType("stringLike"))) {
       throw new InternalCompilerErrorException(s"Unexpected type for cell value. Passed ${valueCell.irType}, expected %stringLike*")
    }

    block.getelementptr("byteLengthPtr")(
      elementType=byteLengthIrType,
      basePointer=valueCell,
      indices=List(0, 2).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genStoreToByteLength(block : IrBlockBuilder)(toStore : IrValue, valueCell : IrValue) : Unit = {
    val byteLengthPointer = genPointerToByteLength(block)(valueCell)
    block.store(toStore, byteLengthPointer, tbaaIndex=Some(tbaaIndex))
  }

  def genLoadFromByteLength(block : IrBlockBuilder)(valueCell : IrValue) : IrValue = {
    val byteLengthPointer = genPointerToByteLength(block)(valueCell)
    block.load("byteLength")(byteLengthPointer, tbaaIndex=Some(tbaaIndex))
  }

  def genPointerToUtf8Data(block : IrBlockBuilder)(valueCell : IrValue) : IrValue = {
    if (valueCell.irType != PointerType(UserDefinedType("stringLike"))) {
       throw new InternalCompilerErrorException(s"Unexpected type for cell value. Passed ${valueCell.irType}, expected %stringLike*")
    }

    block.getelementptr("utf8DataPtr")(
      elementType=utf8DataIrType,
      basePointer=valueCell,
      indices=List(0, 3).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genStoreToUtf8Data(block : IrBlockBuilder)(toStore : IrValue, valueCell : IrValue) : Unit = {
    val utf8DataPointer = genPointerToUtf8Data(block)(valueCell)
    block.store(toStore, utf8DataPointer, tbaaIndex=Some(tbaaIndex))
  }

  def genLoadFromUtf8Data(block : IrBlockBuilder)(valueCell : IrValue) : IrValue = {
    val utf8DataPointer = genPointerToUtf8Data(block)(valueCell)
    block.load("utf8Data")(utf8DataPointer, tbaaIndex=Some(tbaaIndex))
  }
}

sealed trait StringFields extends StringLikeFields {
}

object StringCell extends ConcreteCellType with StringFields {
  val name = "string"
  val irType = UserDefinedType("string")
  val supertype = Some(StringLikeCell)
  val directSubtypes = Set[CellType]()
  val isAbstract = false
  val tbaaIndex = 6
  val typeId = 3

  def createConstant(charLength : Long, byteLength : Long, utf8Data : IrConstant) : StructureConstant = {
    StructureConstant(List(
      supertype.get.createConstant(
        charLength=charLength,
        byteLength=byteLength,
        utf8Data=utf8Data,
        typeId=typeId
      )
    ), userDefinedType=Some(irType))
  }

  def genTypeCheck(startBlock : IrBlockBuilder)(valueCell : IrValue, successBlock : IrBranchTarget, failBlock : IrBranchTarget) {
    val datumValue = DatumCell.genPointerBitcast(startBlock)(valueCell)
    val typeId = DatumCell.genLoadFromTypeId(startBlock)(datumValue)
    startBlock.switch(typeId, failBlock, (3L -> successBlock))
  }

  def genPointerToTypeId(block : IrBlockBuilder)(valueCell : IrValue) : IrValue = {
    if (valueCell.irType != PointerType(UserDefinedType("string"))) {
       throw new InternalCompilerErrorException(s"Unexpected type for cell value. Passed ${valueCell.irType}, expected %string*")
    }

    block.getelementptr("typeIdPtr")(
      elementType=typeIdIrType,
      basePointer=valueCell,
      indices=List(0, 0, 0, 0).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genStoreToTypeId(block : IrBlockBuilder)(toStore : IrValue, valueCell : IrValue) : Unit = {
    val typeIdPointer = genPointerToTypeId(block)(valueCell)
    block.store(toStore, typeIdPointer, tbaaIndex=Some(tbaaIndex))
  }

  def genLoadFromTypeId(block : IrBlockBuilder)(valueCell : IrValue) : IrValue = {
    val typeIdPointer = genPointerToTypeId(block)(valueCell)
    block.load("typeId")(typeIdPointer, tbaaIndex=Some(tbaaIndex))
  }

  def genPointerToGcState(block : IrBlockBuilder)(valueCell : IrValue) : IrValue = {
    if (valueCell.irType != PointerType(UserDefinedType("string"))) {
       throw new InternalCompilerErrorException(s"Unexpected type for cell value. Passed ${valueCell.irType}, expected %string*")
    }

    block.getelementptr("gcStatePtr")(
      elementType=gcStateIrType,
      basePointer=valueCell,
      indices=List(0, 0, 0, 1).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genStoreToGcState(block : IrBlockBuilder)(toStore : IrValue, valueCell : IrValue) : Unit = {
    val gcStatePointer = genPointerToGcState(block)(valueCell)
    block.store(toStore, gcStatePointer, tbaaIndex=Some(tbaaIndex))
  }

  def genLoadFromGcState(block : IrBlockBuilder)(valueCell : IrValue) : IrValue = {
    val gcStatePointer = genPointerToGcState(block)(valueCell)
    block.load("gcState")(gcStatePointer, tbaaIndex=Some(tbaaIndex))
  }

  def genPointerToCharLength(block : IrBlockBuilder)(valueCell : IrValue) : IrValue = {
    if (valueCell.irType != PointerType(UserDefinedType("string"))) {
       throw new InternalCompilerErrorException(s"Unexpected type for cell value. Passed ${valueCell.irType}, expected %string*")
    }

    block.getelementptr("charLengthPtr")(
      elementType=charLengthIrType,
      basePointer=valueCell,
      indices=List(0, 0, 1).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genStoreToCharLength(block : IrBlockBuilder)(toStore : IrValue, valueCell : IrValue) : Unit = {
    val charLengthPointer = genPointerToCharLength(block)(valueCell)
    block.store(toStore, charLengthPointer, tbaaIndex=Some(tbaaIndex))
  }

  def genLoadFromCharLength(block : IrBlockBuilder)(valueCell : IrValue) : IrValue = {
    val charLengthPointer = genPointerToCharLength(block)(valueCell)
    block.load("charLength")(charLengthPointer, tbaaIndex=Some(tbaaIndex))
  }

  def genPointerToByteLength(block : IrBlockBuilder)(valueCell : IrValue) : IrValue = {
    if (valueCell.irType != PointerType(UserDefinedType("string"))) {
       throw new InternalCompilerErrorException(s"Unexpected type for cell value. Passed ${valueCell.irType}, expected %string*")
    }

    block.getelementptr("byteLengthPtr")(
      elementType=byteLengthIrType,
      basePointer=valueCell,
      indices=List(0, 0, 2).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genStoreToByteLength(block : IrBlockBuilder)(toStore : IrValue, valueCell : IrValue) : Unit = {
    val byteLengthPointer = genPointerToByteLength(block)(valueCell)
    block.store(toStore, byteLengthPointer, tbaaIndex=Some(tbaaIndex))
  }

  def genLoadFromByteLength(block : IrBlockBuilder)(valueCell : IrValue) : IrValue = {
    val byteLengthPointer = genPointerToByteLength(block)(valueCell)
    block.load("byteLength")(byteLengthPointer, tbaaIndex=Some(tbaaIndex))
  }

  def genPointerToUtf8Data(block : IrBlockBuilder)(valueCell : IrValue) : IrValue = {
    if (valueCell.irType != PointerType(UserDefinedType("string"))) {
       throw new InternalCompilerErrorException(s"Unexpected type for cell value. Passed ${valueCell.irType}, expected %string*")
    }

    block.getelementptr("utf8DataPtr")(
      elementType=utf8DataIrType,
      basePointer=valueCell,
      indices=List(0, 0, 3).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genStoreToUtf8Data(block : IrBlockBuilder)(toStore : IrValue, valueCell : IrValue) : Unit = {
    val utf8DataPointer = genPointerToUtf8Data(block)(valueCell)
    block.store(toStore, utf8DataPointer, tbaaIndex=Some(tbaaIndex))
  }

  def genLoadFromUtf8Data(block : IrBlockBuilder)(valueCell : IrValue) : IrValue = {
    val utf8DataPointer = genPointerToUtf8Data(block)(valueCell)
    block.load("utf8Data")(utf8DataPointer, tbaaIndex=Some(tbaaIndex))
  }
}

sealed trait SymbolFields extends StringLikeFields {
}

object SymbolCell extends ConcreteCellType with SymbolFields {
  val name = "symbol"
  val irType = UserDefinedType("symbol")
  val supertype = Some(StringLikeCell)
  val directSubtypes = Set[CellType]()
  val isAbstract = false
  val tbaaIndex = 7
  val typeId = 4

  def createConstant(charLength : Long, byteLength : Long, utf8Data : IrConstant) : StructureConstant = {
    StructureConstant(List(
      supertype.get.createConstant(
        charLength=charLength,
        byteLength=byteLength,
        utf8Data=utf8Data,
        typeId=typeId
      )
    ), userDefinedType=Some(irType))
  }

  def genTypeCheck(startBlock : IrBlockBuilder)(valueCell : IrValue, successBlock : IrBranchTarget, failBlock : IrBranchTarget) {
    val datumValue = DatumCell.genPointerBitcast(startBlock)(valueCell)
    val typeId = DatumCell.genLoadFromTypeId(startBlock)(datumValue)
    startBlock.switch(typeId, failBlock, (4L -> successBlock))
  }

  def genPointerToTypeId(block : IrBlockBuilder)(valueCell : IrValue) : IrValue = {
    if (valueCell.irType != PointerType(UserDefinedType("symbol"))) {
       throw new InternalCompilerErrorException(s"Unexpected type for cell value. Passed ${valueCell.irType}, expected %symbol*")
    }

    block.getelementptr("typeIdPtr")(
      elementType=typeIdIrType,
      basePointer=valueCell,
      indices=List(0, 0, 0, 0).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genStoreToTypeId(block : IrBlockBuilder)(toStore : IrValue, valueCell : IrValue) : Unit = {
    val typeIdPointer = genPointerToTypeId(block)(valueCell)
    block.store(toStore, typeIdPointer, tbaaIndex=Some(tbaaIndex))
  }

  def genLoadFromTypeId(block : IrBlockBuilder)(valueCell : IrValue) : IrValue = {
    val typeIdPointer = genPointerToTypeId(block)(valueCell)
    block.load("typeId")(typeIdPointer, tbaaIndex=Some(tbaaIndex))
  }

  def genPointerToGcState(block : IrBlockBuilder)(valueCell : IrValue) : IrValue = {
    if (valueCell.irType != PointerType(UserDefinedType("symbol"))) {
       throw new InternalCompilerErrorException(s"Unexpected type for cell value. Passed ${valueCell.irType}, expected %symbol*")
    }

    block.getelementptr("gcStatePtr")(
      elementType=gcStateIrType,
      basePointer=valueCell,
      indices=List(0, 0, 0, 1).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genStoreToGcState(block : IrBlockBuilder)(toStore : IrValue, valueCell : IrValue) : Unit = {
    val gcStatePointer = genPointerToGcState(block)(valueCell)
    block.store(toStore, gcStatePointer, tbaaIndex=Some(tbaaIndex))
  }

  def genLoadFromGcState(block : IrBlockBuilder)(valueCell : IrValue) : IrValue = {
    val gcStatePointer = genPointerToGcState(block)(valueCell)
    block.load("gcState")(gcStatePointer, tbaaIndex=Some(tbaaIndex))
  }

  def genPointerToCharLength(block : IrBlockBuilder)(valueCell : IrValue) : IrValue = {
    if (valueCell.irType != PointerType(UserDefinedType("symbol"))) {
       throw new InternalCompilerErrorException(s"Unexpected type for cell value. Passed ${valueCell.irType}, expected %symbol*")
    }

    block.getelementptr("charLengthPtr")(
      elementType=charLengthIrType,
      basePointer=valueCell,
      indices=List(0, 0, 1).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genStoreToCharLength(block : IrBlockBuilder)(toStore : IrValue, valueCell : IrValue) : Unit = {
    val charLengthPointer = genPointerToCharLength(block)(valueCell)
    block.store(toStore, charLengthPointer, tbaaIndex=Some(tbaaIndex))
  }

  def genLoadFromCharLength(block : IrBlockBuilder)(valueCell : IrValue) : IrValue = {
    val charLengthPointer = genPointerToCharLength(block)(valueCell)
    block.load("charLength")(charLengthPointer, tbaaIndex=Some(tbaaIndex))
  }

  def genPointerToByteLength(block : IrBlockBuilder)(valueCell : IrValue) : IrValue = {
    if (valueCell.irType != PointerType(UserDefinedType("symbol"))) {
       throw new InternalCompilerErrorException(s"Unexpected type for cell value. Passed ${valueCell.irType}, expected %symbol*")
    }

    block.getelementptr("byteLengthPtr")(
      elementType=byteLengthIrType,
      basePointer=valueCell,
      indices=List(0, 0, 2).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genStoreToByteLength(block : IrBlockBuilder)(toStore : IrValue, valueCell : IrValue) : Unit = {
    val byteLengthPointer = genPointerToByteLength(block)(valueCell)
    block.store(toStore, byteLengthPointer, tbaaIndex=Some(tbaaIndex))
  }

  def genLoadFromByteLength(block : IrBlockBuilder)(valueCell : IrValue) : IrValue = {
    val byteLengthPointer = genPointerToByteLength(block)(valueCell)
    block.load("byteLength")(byteLengthPointer, tbaaIndex=Some(tbaaIndex))
  }

  def genPointerToUtf8Data(block : IrBlockBuilder)(valueCell : IrValue) : IrValue = {
    if (valueCell.irType != PointerType(UserDefinedType("symbol"))) {
       throw new InternalCompilerErrorException(s"Unexpected type for cell value. Passed ${valueCell.irType}, expected %symbol*")
    }

    block.getelementptr("utf8DataPtr")(
      elementType=utf8DataIrType,
      basePointer=valueCell,
      indices=List(0, 0, 3).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genStoreToUtf8Data(block : IrBlockBuilder)(toStore : IrValue, valueCell : IrValue) : Unit = {
    val utf8DataPointer = genPointerToUtf8Data(block)(valueCell)
    block.store(toStore, utf8DataPointer, tbaaIndex=Some(tbaaIndex))
  }

  def genLoadFromUtf8Data(block : IrBlockBuilder)(valueCell : IrValue) : IrValue = {
    val utf8DataPointer = genPointerToUtf8Data(block)(valueCell)
    block.load("utf8Data")(utf8DataPointer, tbaaIndex=Some(tbaaIndex))
  }
}

sealed trait BooleanFields extends DatumFields {
  val valueIrType = IntegerType(8)

  def genPointerToValue(block : IrBlockBuilder)(valueCell : IrValue) : IrValue
  def genStoreToValue(block : IrBlockBuilder)(toStore : IrValue, valueCell : IrValue) : Unit
  def genLoadFromValue(block : IrBlockBuilder)(valueCell : IrValue) : IrValue
}

object BooleanCell extends ConcreteCellType with BooleanFields {
  val name = "boolean"
  val irType = UserDefinedType("boolean")
  val supertype = Some(DatumCell)
  val directSubtypes = Set[CellType]()
  val isAbstract = false
  val tbaaIndex = 8
  val typeId = 5

  def genTypeCheck(startBlock : IrBlockBuilder)(valueCell : IrValue, successBlock : IrBranchTarget, failBlock : IrBranchTarget) {
    val datumValue = DatumCell.genPointerBitcast(startBlock)(valueCell)
    val typeId = DatumCell.genLoadFromTypeId(startBlock)(datumValue)
    startBlock.switch(typeId, failBlock, (5L -> successBlock))
  }

  def genPointerToTypeId(block : IrBlockBuilder)(valueCell : IrValue) : IrValue = {
    if (valueCell.irType != PointerType(UserDefinedType("boolean"))) {
       throw new InternalCompilerErrorException(s"Unexpected type for cell value. Passed ${valueCell.irType}, expected %boolean*")
    }

    block.getelementptr("typeIdPtr")(
      elementType=typeIdIrType,
      basePointer=valueCell,
      indices=List(0, 0, 0).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genStoreToTypeId(block : IrBlockBuilder)(toStore : IrValue, valueCell : IrValue) : Unit = {
    val typeIdPointer = genPointerToTypeId(block)(valueCell)
    block.store(toStore, typeIdPointer, tbaaIndex=Some(tbaaIndex))
  }

  def genLoadFromTypeId(block : IrBlockBuilder)(valueCell : IrValue) : IrValue = {
    val typeIdPointer = genPointerToTypeId(block)(valueCell)
    block.load("typeId")(typeIdPointer, tbaaIndex=Some(tbaaIndex))
  }

  def genPointerToGcState(block : IrBlockBuilder)(valueCell : IrValue) : IrValue = {
    if (valueCell.irType != PointerType(UserDefinedType("boolean"))) {
       throw new InternalCompilerErrorException(s"Unexpected type for cell value. Passed ${valueCell.irType}, expected %boolean*")
    }

    block.getelementptr("gcStatePtr")(
      elementType=gcStateIrType,
      basePointer=valueCell,
      indices=List(0, 0, 1).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genStoreToGcState(block : IrBlockBuilder)(toStore : IrValue, valueCell : IrValue) : Unit = {
    val gcStatePointer = genPointerToGcState(block)(valueCell)
    block.store(toStore, gcStatePointer, tbaaIndex=Some(tbaaIndex))
  }

  def genLoadFromGcState(block : IrBlockBuilder)(valueCell : IrValue) : IrValue = {
    val gcStatePointer = genPointerToGcState(block)(valueCell)
    block.load("gcState")(gcStatePointer, tbaaIndex=Some(tbaaIndex))
  }

  def genPointerToValue(block : IrBlockBuilder)(valueCell : IrValue) : IrValue = {
    if (valueCell.irType != PointerType(UserDefinedType("boolean"))) {
       throw new InternalCompilerErrorException(s"Unexpected type for cell value. Passed ${valueCell.irType}, expected %boolean*")
    }

    block.getelementptr("valuePtr")(
      elementType=valueIrType,
      basePointer=valueCell,
      indices=List(0, 1).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genStoreToValue(block : IrBlockBuilder)(toStore : IrValue, valueCell : IrValue) : Unit = {
    val valuePointer = genPointerToValue(block)(valueCell)
    block.store(toStore, valuePointer, tbaaIndex=Some(tbaaIndex))
  }

  def genLoadFromValue(block : IrBlockBuilder)(valueCell : IrValue) : IrValue = {
    val valuePointer = genPointerToValue(block)(valueCell)
    block.load("value")(valuePointer, tbaaIndex=Some(tbaaIndex))
  }
}

sealed trait NumericFields extends DatumFields {
}

object NumericCell extends CellType with NumericFields {
  val name = "numeric"
  val irType = UserDefinedType("numeric")
  val supertype = Some(DatumCell)
  val directSubtypes = Set[CellType](ExactIntegerCell, InexactRationalCell)
  val isAbstract = true
  val tbaaIndex = 9

  def createConstant(typeId : Long) : StructureConstant = {
    StructureConstant(List(
      supertype.get.createConstant(
        typeId=typeId
      )
    ), userDefinedType=Some(irType))
  }

  def genTypeCheck(startBlock : IrBlockBuilder)(valueCell : IrValue, successBlock : IrBranchTarget, failBlock : IrBranchTarget) {
    val datumValue = DatumCell.genPointerBitcast(startBlock)(valueCell)
    val typeId = DatumCell.genLoadFromTypeId(startBlock)(datumValue)
    startBlock.switch(typeId, failBlock, (6L -> successBlock), (7L -> successBlock))
  }

  def genPointerToTypeId(block : IrBlockBuilder)(valueCell : IrValue) : IrValue = {
    if (valueCell.irType != PointerType(UserDefinedType("numeric"))) {
       throw new InternalCompilerErrorException(s"Unexpected type for cell value. Passed ${valueCell.irType}, expected %numeric*")
    }

    block.getelementptr("typeIdPtr")(
      elementType=typeIdIrType,
      basePointer=valueCell,
      indices=List(0, 0, 0).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genStoreToTypeId(block : IrBlockBuilder)(toStore : IrValue, valueCell : IrValue) : Unit = {
    val typeIdPointer = genPointerToTypeId(block)(valueCell)
    block.store(toStore, typeIdPointer, tbaaIndex=Some(tbaaIndex))
  }

  def genLoadFromTypeId(block : IrBlockBuilder)(valueCell : IrValue) : IrValue = {
    val typeIdPointer = genPointerToTypeId(block)(valueCell)
    block.load("typeId")(typeIdPointer, tbaaIndex=Some(tbaaIndex))
  }

  def genPointerToGcState(block : IrBlockBuilder)(valueCell : IrValue) : IrValue = {
    if (valueCell.irType != PointerType(UserDefinedType("numeric"))) {
       throw new InternalCompilerErrorException(s"Unexpected type for cell value. Passed ${valueCell.irType}, expected %numeric*")
    }

    block.getelementptr("gcStatePtr")(
      elementType=gcStateIrType,
      basePointer=valueCell,
      indices=List(0, 0, 1).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genStoreToGcState(block : IrBlockBuilder)(toStore : IrValue, valueCell : IrValue) : Unit = {
    val gcStatePointer = genPointerToGcState(block)(valueCell)
    block.store(toStore, gcStatePointer, tbaaIndex=Some(tbaaIndex))
  }

  def genLoadFromGcState(block : IrBlockBuilder)(valueCell : IrValue) : IrValue = {
    val gcStatePointer = genPointerToGcState(block)(valueCell)
    block.load("gcState")(gcStatePointer, tbaaIndex=Some(tbaaIndex))
  }
}

sealed trait ExactIntegerFields extends NumericFields {
  val valueIrType = IntegerType(64)

  def genPointerToValue(block : IrBlockBuilder)(valueCell : IrValue) : IrValue
  def genStoreToValue(block : IrBlockBuilder)(toStore : IrValue, valueCell : IrValue) : Unit
  def genLoadFromValue(block : IrBlockBuilder)(valueCell : IrValue) : IrValue
}

object ExactIntegerCell extends ConcreteCellType with ExactIntegerFields {
  val name = "exactInteger"
  val irType = UserDefinedType("exactInteger")
  val supertype = Some(NumericCell)
  val directSubtypes = Set[CellType]()
  val isAbstract = false
  val tbaaIndex = 10
  val typeId = 6

  def createConstant(value : Long) : StructureConstant = {
    StructureConstant(List(
      supertype.get.createConstant(
        typeId=typeId
      ),
      IntegerConstant(valueIrType, value)
    ), userDefinedType=Some(irType))
  }

  def genTypeCheck(startBlock : IrBlockBuilder)(valueCell : IrValue, successBlock : IrBranchTarget, failBlock : IrBranchTarget) {
    val datumValue = DatumCell.genPointerBitcast(startBlock)(valueCell)
    val typeId = DatumCell.genLoadFromTypeId(startBlock)(datumValue)
    startBlock.switch(typeId, failBlock, (6L -> successBlock))
  }

  def genPointerToTypeId(block : IrBlockBuilder)(valueCell : IrValue) : IrValue = {
    if (valueCell.irType != PointerType(UserDefinedType("exactInteger"))) {
       throw new InternalCompilerErrorException(s"Unexpected type for cell value. Passed ${valueCell.irType}, expected %exactInteger*")
    }

    block.getelementptr("typeIdPtr")(
      elementType=typeIdIrType,
      basePointer=valueCell,
      indices=List(0, 0, 0, 0).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genStoreToTypeId(block : IrBlockBuilder)(toStore : IrValue, valueCell : IrValue) : Unit = {
    val typeIdPointer = genPointerToTypeId(block)(valueCell)
    block.store(toStore, typeIdPointer, tbaaIndex=Some(tbaaIndex))
  }

  def genLoadFromTypeId(block : IrBlockBuilder)(valueCell : IrValue) : IrValue = {
    val typeIdPointer = genPointerToTypeId(block)(valueCell)
    block.load("typeId")(typeIdPointer, tbaaIndex=Some(tbaaIndex))
  }

  def genPointerToGcState(block : IrBlockBuilder)(valueCell : IrValue) : IrValue = {
    if (valueCell.irType != PointerType(UserDefinedType("exactInteger"))) {
       throw new InternalCompilerErrorException(s"Unexpected type for cell value. Passed ${valueCell.irType}, expected %exactInteger*")
    }

    block.getelementptr("gcStatePtr")(
      elementType=gcStateIrType,
      basePointer=valueCell,
      indices=List(0, 0, 0, 1).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genStoreToGcState(block : IrBlockBuilder)(toStore : IrValue, valueCell : IrValue) : Unit = {
    val gcStatePointer = genPointerToGcState(block)(valueCell)
    block.store(toStore, gcStatePointer, tbaaIndex=Some(tbaaIndex))
  }

  def genLoadFromGcState(block : IrBlockBuilder)(valueCell : IrValue) : IrValue = {
    val gcStatePointer = genPointerToGcState(block)(valueCell)
    block.load("gcState")(gcStatePointer, tbaaIndex=Some(tbaaIndex))
  }

  def genPointerToValue(block : IrBlockBuilder)(valueCell : IrValue) : IrValue = {
    if (valueCell.irType != PointerType(UserDefinedType("exactInteger"))) {
       throw new InternalCompilerErrorException(s"Unexpected type for cell value. Passed ${valueCell.irType}, expected %exactInteger*")
    }

    block.getelementptr("valuePtr")(
      elementType=valueIrType,
      basePointer=valueCell,
      indices=List(0, 1).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genStoreToValue(block : IrBlockBuilder)(toStore : IrValue, valueCell : IrValue) : Unit = {
    val valuePointer = genPointerToValue(block)(valueCell)
    block.store(toStore, valuePointer, tbaaIndex=Some(tbaaIndex))
  }

  def genLoadFromValue(block : IrBlockBuilder)(valueCell : IrValue) : IrValue = {
    val valuePointer = genPointerToValue(block)(valueCell)
    block.load("value")(valuePointer, tbaaIndex=Some(tbaaIndex))
  }
}

sealed trait InexactRationalFields extends NumericFields {
  val valueIrType = DoubleType

  def genPointerToValue(block : IrBlockBuilder)(valueCell : IrValue) : IrValue
  def genStoreToValue(block : IrBlockBuilder)(toStore : IrValue, valueCell : IrValue) : Unit
  def genLoadFromValue(block : IrBlockBuilder)(valueCell : IrValue) : IrValue
}

object InexactRationalCell extends ConcreteCellType with InexactRationalFields {
  val name = "inexactRational"
  val irType = UserDefinedType("inexactRational")
  val supertype = Some(NumericCell)
  val directSubtypes = Set[CellType]()
  val isAbstract = false
  val tbaaIndex = 11
  val typeId = 7

  def createConstant(value : IrConstant) : StructureConstant = {
    if (value.irType != valueIrType) {
      throw new InternalCompilerErrorException("Unexpected type for field value")
    }

    StructureConstant(List(
      supertype.get.createConstant(
        typeId=typeId
      ),
      value
    ), userDefinedType=Some(irType))
  }

  def genTypeCheck(startBlock : IrBlockBuilder)(valueCell : IrValue, successBlock : IrBranchTarget, failBlock : IrBranchTarget) {
    val datumValue = DatumCell.genPointerBitcast(startBlock)(valueCell)
    val typeId = DatumCell.genLoadFromTypeId(startBlock)(datumValue)
    startBlock.switch(typeId, failBlock, (7L -> successBlock))
  }

  def genPointerToTypeId(block : IrBlockBuilder)(valueCell : IrValue) : IrValue = {
    if (valueCell.irType != PointerType(UserDefinedType("inexactRational"))) {
       throw new InternalCompilerErrorException(s"Unexpected type for cell value. Passed ${valueCell.irType}, expected %inexactRational*")
    }

    block.getelementptr("typeIdPtr")(
      elementType=typeIdIrType,
      basePointer=valueCell,
      indices=List(0, 0, 0, 0).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genStoreToTypeId(block : IrBlockBuilder)(toStore : IrValue, valueCell : IrValue) : Unit = {
    val typeIdPointer = genPointerToTypeId(block)(valueCell)
    block.store(toStore, typeIdPointer, tbaaIndex=Some(tbaaIndex))
  }

  def genLoadFromTypeId(block : IrBlockBuilder)(valueCell : IrValue) : IrValue = {
    val typeIdPointer = genPointerToTypeId(block)(valueCell)
    block.load("typeId")(typeIdPointer, tbaaIndex=Some(tbaaIndex))
  }

  def genPointerToGcState(block : IrBlockBuilder)(valueCell : IrValue) : IrValue = {
    if (valueCell.irType != PointerType(UserDefinedType("inexactRational"))) {
       throw new InternalCompilerErrorException(s"Unexpected type for cell value. Passed ${valueCell.irType}, expected %inexactRational*")
    }

    block.getelementptr("gcStatePtr")(
      elementType=gcStateIrType,
      basePointer=valueCell,
      indices=List(0, 0, 0, 1).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genStoreToGcState(block : IrBlockBuilder)(toStore : IrValue, valueCell : IrValue) : Unit = {
    val gcStatePointer = genPointerToGcState(block)(valueCell)
    block.store(toStore, gcStatePointer, tbaaIndex=Some(tbaaIndex))
  }

  def genLoadFromGcState(block : IrBlockBuilder)(valueCell : IrValue) : IrValue = {
    val gcStatePointer = genPointerToGcState(block)(valueCell)
    block.load("gcState")(gcStatePointer, tbaaIndex=Some(tbaaIndex))
  }

  def genPointerToValue(block : IrBlockBuilder)(valueCell : IrValue) : IrValue = {
    if (valueCell.irType != PointerType(UserDefinedType("inexactRational"))) {
       throw new InternalCompilerErrorException(s"Unexpected type for cell value. Passed ${valueCell.irType}, expected %inexactRational*")
    }

    block.getelementptr("valuePtr")(
      elementType=valueIrType,
      basePointer=valueCell,
      indices=List(0, 1).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genStoreToValue(block : IrBlockBuilder)(toStore : IrValue, valueCell : IrValue) : Unit = {
    val valuePointer = genPointerToValue(block)(valueCell)
    block.store(toStore, valuePointer, tbaaIndex=Some(tbaaIndex))
  }

  def genLoadFromValue(block : IrBlockBuilder)(valueCell : IrValue) : IrValue = {
    val valuePointer = genPointerToValue(block)(valueCell)
    block.load("value")(valuePointer, tbaaIndex=Some(tbaaIndex))
  }
}

sealed trait CharacterFields extends DatumFields {
  val unicodeCharIrType = IntegerType(32)

  def genPointerToUnicodeChar(block : IrBlockBuilder)(valueCell : IrValue) : IrValue
  def genStoreToUnicodeChar(block : IrBlockBuilder)(toStore : IrValue, valueCell : IrValue) : Unit
  def genLoadFromUnicodeChar(block : IrBlockBuilder)(valueCell : IrValue) : IrValue
}

object CharacterCell extends ConcreteCellType with CharacterFields {
  val name = "character"
  val irType = UserDefinedType("character")
  val supertype = Some(DatumCell)
  val directSubtypes = Set[CellType]()
  val isAbstract = false
  val tbaaIndex = 12
  val typeId = 8

  def createConstant(unicodeChar : IrConstant) : StructureConstant = {
    if (unicodeChar.irType != unicodeCharIrType) {
      throw new InternalCompilerErrorException("Unexpected type for field unicodeChar")
    }

    StructureConstant(List(
      supertype.get.createConstant(
        typeId=typeId
      ),
      unicodeChar
    ), userDefinedType=Some(irType))
  }

  def genTypeCheck(startBlock : IrBlockBuilder)(valueCell : IrValue, successBlock : IrBranchTarget, failBlock : IrBranchTarget) {
    val datumValue = DatumCell.genPointerBitcast(startBlock)(valueCell)
    val typeId = DatumCell.genLoadFromTypeId(startBlock)(datumValue)
    startBlock.switch(typeId, failBlock, (8L -> successBlock))
  }

  def genPointerToTypeId(block : IrBlockBuilder)(valueCell : IrValue) : IrValue = {
    if (valueCell.irType != PointerType(UserDefinedType("character"))) {
       throw new InternalCompilerErrorException(s"Unexpected type for cell value. Passed ${valueCell.irType}, expected %character*")
    }

    block.getelementptr("typeIdPtr")(
      elementType=typeIdIrType,
      basePointer=valueCell,
      indices=List(0, 0, 0).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genStoreToTypeId(block : IrBlockBuilder)(toStore : IrValue, valueCell : IrValue) : Unit = {
    val typeIdPointer = genPointerToTypeId(block)(valueCell)
    block.store(toStore, typeIdPointer, tbaaIndex=Some(tbaaIndex))
  }

  def genLoadFromTypeId(block : IrBlockBuilder)(valueCell : IrValue) : IrValue = {
    val typeIdPointer = genPointerToTypeId(block)(valueCell)
    block.load("typeId")(typeIdPointer, tbaaIndex=Some(tbaaIndex))
  }

  def genPointerToGcState(block : IrBlockBuilder)(valueCell : IrValue) : IrValue = {
    if (valueCell.irType != PointerType(UserDefinedType("character"))) {
       throw new InternalCompilerErrorException(s"Unexpected type for cell value. Passed ${valueCell.irType}, expected %character*")
    }

    block.getelementptr("gcStatePtr")(
      elementType=gcStateIrType,
      basePointer=valueCell,
      indices=List(0, 0, 1).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genStoreToGcState(block : IrBlockBuilder)(toStore : IrValue, valueCell : IrValue) : Unit = {
    val gcStatePointer = genPointerToGcState(block)(valueCell)
    block.store(toStore, gcStatePointer, tbaaIndex=Some(tbaaIndex))
  }

  def genLoadFromGcState(block : IrBlockBuilder)(valueCell : IrValue) : IrValue = {
    val gcStatePointer = genPointerToGcState(block)(valueCell)
    block.load("gcState")(gcStatePointer, tbaaIndex=Some(tbaaIndex))
  }

  def genPointerToUnicodeChar(block : IrBlockBuilder)(valueCell : IrValue) : IrValue = {
    if (valueCell.irType != PointerType(UserDefinedType("character"))) {
       throw new InternalCompilerErrorException(s"Unexpected type for cell value. Passed ${valueCell.irType}, expected %character*")
    }

    block.getelementptr("unicodeCharPtr")(
      elementType=unicodeCharIrType,
      basePointer=valueCell,
      indices=List(0, 1).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genStoreToUnicodeChar(block : IrBlockBuilder)(toStore : IrValue, valueCell : IrValue) : Unit = {
    val unicodeCharPointer = genPointerToUnicodeChar(block)(valueCell)
    block.store(toStore, unicodeCharPointer, tbaaIndex=Some(tbaaIndex))
  }

  def genLoadFromUnicodeChar(block : IrBlockBuilder)(valueCell : IrValue) : IrValue = {
    val unicodeCharPointer = genPointerToUnicodeChar(block)(valueCell)
    block.load("unicodeChar")(unicodeCharPointer, tbaaIndex=Some(tbaaIndex))
  }
}

sealed trait VectorFields extends DatumFields {
  val lengthIrType = IntegerType(32)
  val elementsIrType = PointerType(PointerType(UserDefinedType("datum")))

  def genPointerToLength(block : IrBlockBuilder)(valueCell : IrValue) : IrValue
  def genStoreToLength(block : IrBlockBuilder)(toStore : IrValue, valueCell : IrValue) : Unit
  def genLoadFromLength(block : IrBlockBuilder)(valueCell : IrValue) : IrValue

  def genPointerToElements(block : IrBlockBuilder)(valueCell : IrValue) : IrValue
  def genStoreToElements(block : IrBlockBuilder)(toStore : IrValue, valueCell : IrValue) : Unit
  def genLoadFromElements(block : IrBlockBuilder)(valueCell : IrValue) : IrValue
}

object VectorCell extends ConcreteCellType with VectorFields {
  val name = "vector"
  val irType = UserDefinedType("vector")
  val supertype = Some(DatumCell)
  val directSubtypes = Set[CellType]()
  val isAbstract = false
  val tbaaIndex = 13
  val typeId = 9

  def createConstant(length : Long, elements : IrConstant) : StructureConstant = {
    if (elements.irType != elementsIrType) {
      throw new InternalCompilerErrorException("Unexpected type for field elements")
    }

    StructureConstant(List(
      supertype.get.createConstant(
        typeId=typeId
      ),
      IntegerConstant(lengthIrType, length),
      elements
    ), userDefinedType=Some(irType))
  }

  def genTypeCheck(startBlock : IrBlockBuilder)(valueCell : IrValue, successBlock : IrBranchTarget, failBlock : IrBranchTarget) {
    val datumValue = DatumCell.genPointerBitcast(startBlock)(valueCell)
    val typeId = DatumCell.genLoadFromTypeId(startBlock)(datumValue)
    startBlock.switch(typeId, failBlock, (9L -> successBlock))
  }

  def genPointerToTypeId(block : IrBlockBuilder)(valueCell : IrValue) : IrValue = {
    if (valueCell.irType != PointerType(UserDefinedType("vector"))) {
       throw new InternalCompilerErrorException(s"Unexpected type for cell value. Passed ${valueCell.irType}, expected %vector*")
    }

    block.getelementptr("typeIdPtr")(
      elementType=typeIdIrType,
      basePointer=valueCell,
      indices=List(0, 0, 0).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genStoreToTypeId(block : IrBlockBuilder)(toStore : IrValue, valueCell : IrValue) : Unit = {
    val typeIdPointer = genPointerToTypeId(block)(valueCell)
    block.store(toStore, typeIdPointer, tbaaIndex=Some(tbaaIndex))
  }

  def genLoadFromTypeId(block : IrBlockBuilder)(valueCell : IrValue) : IrValue = {
    val typeIdPointer = genPointerToTypeId(block)(valueCell)
    block.load("typeId")(typeIdPointer, tbaaIndex=Some(tbaaIndex))
  }

  def genPointerToGcState(block : IrBlockBuilder)(valueCell : IrValue) : IrValue = {
    if (valueCell.irType != PointerType(UserDefinedType("vector"))) {
       throw new InternalCompilerErrorException(s"Unexpected type for cell value. Passed ${valueCell.irType}, expected %vector*")
    }

    block.getelementptr("gcStatePtr")(
      elementType=gcStateIrType,
      basePointer=valueCell,
      indices=List(0, 0, 1).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genStoreToGcState(block : IrBlockBuilder)(toStore : IrValue, valueCell : IrValue) : Unit = {
    val gcStatePointer = genPointerToGcState(block)(valueCell)
    block.store(toStore, gcStatePointer, tbaaIndex=Some(tbaaIndex))
  }

  def genLoadFromGcState(block : IrBlockBuilder)(valueCell : IrValue) : IrValue = {
    val gcStatePointer = genPointerToGcState(block)(valueCell)
    block.load("gcState")(gcStatePointer, tbaaIndex=Some(tbaaIndex))
  }

  def genPointerToLength(block : IrBlockBuilder)(valueCell : IrValue) : IrValue = {
    if (valueCell.irType != PointerType(UserDefinedType("vector"))) {
       throw new InternalCompilerErrorException(s"Unexpected type for cell value. Passed ${valueCell.irType}, expected %vector*")
    }

    block.getelementptr("lengthPtr")(
      elementType=lengthIrType,
      basePointer=valueCell,
      indices=List(0, 1).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genStoreToLength(block : IrBlockBuilder)(toStore : IrValue, valueCell : IrValue) : Unit = {
    val lengthPointer = genPointerToLength(block)(valueCell)
    block.store(toStore, lengthPointer, tbaaIndex=Some(tbaaIndex))
  }

  def genLoadFromLength(block : IrBlockBuilder)(valueCell : IrValue) : IrValue = {
    val lengthPointer = genPointerToLength(block)(valueCell)
    block.load("length")(lengthPointer, tbaaIndex=Some(tbaaIndex))
  }

  def genPointerToElements(block : IrBlockBuilder)(valueCell : IrValue) : IrValue = {
    if (valueCell.irType != PointerType(UserDefinedType("vector"))) {
       throw new InternalCompilerErrorException(s"Unexpected type for cell value. Passed ${valueCell.irType}, expected %vector*")
    }

    block.getelementptr("elementsPtr")(
      elementType=elementsIrType,
      basePointer=valueCell,
      indices=List(0, 2).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genStoreToElements(block : IrBlockBuilder)(toStore : IrValue, valueCell : IrValue) : Unit = {
    val elementsPointer = genPointerToElements(block)(valueCell)
    block.store(toStore, elementsPointer, tbaaIndex=Some(tbaaIndex))
  }

  def genLoadFromElements(block : IrBlockBuilder)(valueCell : IrValue) : IrValue = {
    val elementsPointer = genPointerToElements(block)(valueCell)
    block.load("elements")(elementsPointer, tbaaIndex=Some(tbaaIndex))
  }
}

sealed trait BytevectorFields extends DatumFields {
  val lengthIrType = IntegerType(32)
  val dataIrType = PointerType(IntegerType(8))

  def genPointerToLength(block : IrBlockBuilder)(valueCell : IrValue) : IrValue
  def genStoreToLength(block : IrBlockBuilder)(toStore : IrValue, valueCell : IrValue) : Unit
  def genLoadFromLength(block : IrBlockBuilder)(valueCell : IrValue) : IrValue

  def genPointerToData(block : IrBlockBuilder)(valueCell : IrValue) : IrValue
  def genStoreToData(block : IrBlockBuilder)(toStore : IrValue, valueCell : IrValue) : Unit
  def genLoadFromData(block : IrBlockBuilder)(valueCell : IrValue) : IrValue
}

object BytevectorCell extends ConcreteCellType with BytevectorFields {
  val name = "bytevector"
  val irType = UserDefinedType("bytevector")
  val supertype = Some(DatumCell)
  val directSubtypes = Set[CellType]()
  val isAbstract = false
  val tbaaIndex = 14
  val typeId = 10

  def createConstant(length : Long, data : IrConstant) : StructureConstant = {
    if (data.irType != dataIrType) {
      throw new InternalCompilerErrorException("Unexpected type for field data")
    }

    StructureConstant(List(
      supertype.get.createConstant(
        typeId=typeId
      ),
      IntegerConstant(lengthIrType, length),
      data
    ), userDefinedType=Some(irType))
  }

  def genTypeCheck(startBlock : IrBlockBuilder)(valueCell : IrValue, successBlock : IrBranchTarget, failBlock : IrBranchTarget) {
    val datumValue = DatumCell.genPointerBitcast(startBlock)(valueCell)
    val typeId = DatumCell.genLoadFromTypeId(startBlock)(datumValue)
    startBlock.switch(typeId, failBlock, (10L -> successBlock))
  }

  def genPointerToTypeId(block : IrBlockBuilder)(valueCell : IrValue) : IrValue = {
    if (valueCell.irType != PointerType(UserDefinedType("bytevector"))) {
       throw new InternalCompilerErrorException(s"Unexpected type for cell value. Passed ${valueCell.irType}, expected %bytevector*")
    }

    block.getelementptr("typeIdPtr")(
      elementType=typeIdIrType,
      basePointer=valueCell,
      indices=List(0, 0, 0).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genStoreToTypeId(block : IrBlockBuilder)(toStore : IrValue, valueCell : IrValue) : Unit = {
    val typeIdPointer = genPointerToTypeId(block)(valueCell)
    block.store(toStore, typeIdPointer, tbaaIndex=Some(tbaaIndex))
  }

  def genLoadFromTypeId(block : IrBlockBuilder)(valueCell : IrValue) : IrValue = {
    val typeIdPointer = genPointerToTypeId(block)(valueCell)
    block.load("typeId")(typeIdPointer, tbaaIndex=Some(tbaaIndex))
  }

  def genPointerToGcState(block : IrBlockBuilder)(valueCell : IrValue) : IrValue = {
    if (valueCell.irType != PointerType(UserDefinedType("bytevector"))) {
       throw new InternalCompilerErrorException(s"Unexpected type for cell value. Passed ${valueCell.irType}, expected %bytevector*")
    }

    block.getelementptr("gcStatePtr")(
      elementType=gcStateIrType,
      basePointer=valueCell,
      indices=List(0, 0, 1).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genStoreToGcState(block : IrBlockBuilder)(toStore : IrValue, valueCell : IrValue) : Unit = {
    val gcStatePointer = genPointerToGcState(block)(valueCell)
    block.store(toStore, gcStatePointer, tbaaIndex=Some(tbaaIndex))
  }

  def genLoadFromGcState(block : IrBlockBuilder)(valueCell : IrValue) : IrValue = {
    val gcStatePointer = genPointerToGcState(block)(valueCell)
    block.load("gcState")(gcStatePointer, tbaaIndex=Some(tbaaIndex))
  }

  def genPointerToLength(block : IrBlockBuilder)(valueCell : IrValue) : IrValue = {
    if (valueCell.irType != PointerType(UserDefinedType("bytevector"))) {
       throw new InternalCompilerErrorException(s"Unexpected type for cell value. Passed ${valueCell.irType}, expected %bytevector*")
    }

    block.getelementptr("lengthPtr")(
      elementType=lengthIrType,
      basePointer=valueCell,
      indices=List(0, 1).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genStoreToLength(block : IrBlockBuilder)(toStore : IrValue, valueCell : IrValue) : Unit = {
    val lengthPointer = genPointerToLength(block)(valueCell)
    block.store(toStore, lengthPointer, tbaaIndex=Some(tbaaIndex))
  }

  def genLoadFromLength(block : IrBlockBuilder)(valueCell : IrValue) : IrValue = {
    val lengthPointer = genPointerToLength(block)(valueCell)
    block.load("length")(lengthPointer, tbaaIndex=Some(tbaaIndex))
  }

  def genPointerToData(block : IrBlockBuilder)(valueCell : IrValue) : IrValue = {
    if (valueCell.irType != PointerType(UserDefinedType("bytevector"))) {
       throw new InternalCompilerErrorException(s"Unexpected type for cell value. Passed ${valueCell.irType}, expected %bytevector*")
    }

    block.getelementptr("dataPtr")(
      elementType=dataIrType,
      basePointer=valueCell,
      indices=List(0, 2).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genStoreToData(block : IrBlockBuilder)(toStore : IrValue, valueCell : IrValue) : Unit = {
    val dataPointer = genPointerToData(block)(valueCell)
    block.store(toStore, dataPointer, tbaaIndex=Some(tbaaIndex))
  }

  def genLoadFromData(block : IrBlockBuilder)(valueCell : IrValue) : IrValue = {
    val dataPointer = genPointerToData(block)(valueCell)
    block.load("data")(dataPointer, tbaaIndex=Some(tbaaIndex))
  }
}

sealed trait RecordLikeFields extends DatumFields {
  val recordClassIdIrType = IntegerType(32)
  val recordDataIrType = PointerType(IntegerType(8))

  def genPointerToRecordClassId(block : IrBlockBuilder)(valueCell : IrValue) : IrValue
  def genStoreToRecordClassId(block : IrBlockBuilder)(toStore : IrValue, valueCell : IrValue) : Unit
  def genLoadFromRecordClassId(block : IrBlockBuilder)(valueCell : IrValue) : IrValue

  def genPointerToRecordData(block : IrBlockBuilder)(valueCell : IrValue) : IrValue
  def genStoreToRecordData(block : IrBlockBuilder)(toStore : IrValue, valueCell : IrValue) : Unit
  def genLoadFromRecordData(block : IrBlockBuilder)(valueCell : IrValue) : IrValue
}

object RecordLikeCell extends CellType with RecordLikeFields {
  val name = "recordLike"
  val irType = UserDefinedType("recordLike")
  val supertype = Some(DatumCell)
  val directSubtypes = Set[CellType](ProcedureCell, RecordCell)
  val isAbstract = true
  val tbaaIndex = 15

  def createConstant(recordClassId : Long, recordData : IrConstant, typeId : Long) : StructureConstant = {
    if (recordData.irType != recordDataIrType) {
      throw new InternalCompilerErrorException("Unexpected type for field recordData")
    }

    StructureConstant(List(
      supertype.get.createConstant(
        typeId=typeId
      ),
      IntegerConstant(recordClassIdIrType, recordClassId),
      recordData
    ), userDefinedType=Some(irType))
  }

  def genTypeCheck(startBlock : IrBlockBuilder)(valueCell : IrValue, successBlock : IrBranchTarget, failBlock : IrBranchTarget) {
    val datumValue = DatumCell.genPointerBitcast(startBlock)(valueCell)
    val typeId = DatumCell.genLoadFromTypeId(startBlock)(datumValue)
    startBlock.switch(typeId, failBlock, (11L -> successBlock), (12L -> successBlock))
  }

  def genPointerToTypeId(block : IrBlockBuilder)(valueCell : IrValue) : IrValue = {
    if (valueCell.irType != PointerType(UserDefinedType("recordLike"))) {
       throw new InternalCompilerErrorException(s"Unexpected type for cell value. Passed ${valueCell.irType}, expected %recordLike*")
    }

    block.getelementptr("typeIdPtr")(
      elementType=typeIdIrType,
      basePointer=valueCell,
      indices=List(0, 0, 0).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genStoreToTypeId(block : IrBlockBuilder)(toStore : IrValue, valueCell : IrValue) : Unit = {
    val typeIdPointer = genPointerToTypeId(block)(valueCell)
    block.store(toStore, typeIdPointer, tbaaIndex=Some(tbaaIndex))
  }

  def genLoadFromTypeId(block : IrBlockBuilder)(valueCell : IrValue) : IrValue = {
    val typeIdPointer = genPointerToTypeId(block)(valueCell)
    block.load("typeId")(typeIdPointer, tbaaIndex=Some(tbaaIndex))
  }

  def genPointerToGcState(block : IrBlockBuilder)(valueCell : IrValue) : IrValue = {
    if (valueCell.irType != PointerType(UserDefinedType("recordLike"))) {
       throw new InternalCompilerErrorException(s"Unexpected type for cell value. Passed ${valueCell.irType}, expected %recordLike*")
    }

    block.getelementptr("gcStatePtr")(
      elementType=gcStateIrType,
      basePointer=valueCell,
      indices=List(0, 0, 1).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genStoreToGcState(block : IrBlockBuilder)(toStore : IrValue, valueCell : IrValue) : Unit = {
    val gcStatePointer = genPointerToGcState(block)(valueCell)
    block.store(toStore, gcStatePointer, tbaaIndex=Some(tbaaIndex))
  }

  def genLoadFromGcState(block : IrBlockBuilder)(valueCell : IrValue) : IrValue = {
    val gcStatePointer = genPointerToGcState(block)(valueCell)
    block.load("gcState")(gcStatePointer, tbaaIndex=Some(tbaaIndex))
  }

  def genPointerToRecordClassId(block : IrBlockBuilder)(valueCell : IrValue) : IrValue = {
    if (valueCell.irType != PointerType(UserDefinedType("recordLike"))) {
       throw new InternalCompilerErrorException(s"Unexpected type for cell value. Passed ${valueCell.irType}, expected %recordLike*")
    }

    block.getelementptr("recordClassIdPtr")(
      elementType=recordClassIdIrType,
      basePointer=valueCell,
      indices=List(0, 1).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genStoreToRecordClassId(block : IrBlockBuilder)(toStore : IrValue, valueCell : IrValue) : Unit = {
    val recordClassIdPointer = genPointerToRecordClassId(block)(valueCell)
    block.store(toStore, recordClassIdPointer, tbaaIndex=Some(tbaaIndex))
  }

  def genLoadFromRecordClassId(block : IrBlockBuilder)(valueCell : IrValue) : IrValue = {
    val recordClassIdPointer = genPointerToRecordClassId(block)(valueCell)
    block.load("recordClassId")(recordClassIdPointer, tbaaIndex=Some(tbaaIndex))
  }

  def genPointerToRecordData(block : IrBlockBuilder)(valueCell : IrValue) : IrValue = {
    if (valueCell.irType != PointerType(UserDefinedType("recordLike"))) {
       throw new InternalCompilerErrorException(s"Unexpected type for cell value. Passed ${valueCell.irType}, expected %recordLike*")
    }

    block.getelementptr("recordDataPtr")(
      elementType=recordDataIrType,
      basePointer=valueCell,
      indices=List(0, 2).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genStoreToRecordData(block : IrBlockBuilder)(toStore : IrValue, valueCell : IrValue) : Unit = {
    val recordDataPointer = genPointerToRecordData(block)(valueCell)
    block.store(toStore, recordDataPointer, tbaaIndex=Some(tbaaIndex))
  }

  def genLoadFromRecordData(block : IrBlockBuilder)(valueCell : IrValue) : IrValue = {
    val recordDataPointer = genPointerToRecordData(block)(valueCell)
    block.load("recordData")(recordDataPointer, tbaaIndex=Some(tbaaIndex))
  }
}

sealed trait ProcedureFields extends RecordLikeFields {
  val entryPointIrType = PointerType(FunctionType(PointerType(UserDefinedType("datum")), List(PointerType(UserDefinedType("procedure")), PointerType(UserDefinedType("listElement")) )))

  def genPointerToEntryPoint(block : IrBlockBuilder)(valueCell : IrValue) : IrValue
  def genStoreToEntryPoint(block : IrBlockBuilder)(toStore : IrValue, valueCell : IrValue) : Unit
  def genLoadFromEntryPoint(block : IrBlockBuilder)(valueCell : IrValue) : IrValue
}

object ProcedureCell extends ConcreteCellType with ProcedureFields {
  val name = "procedure"
  val irType = UserDefinedType("procedure")
  val supertype = Some(RecordLikeCell)
  val directSubtypes = Set[CellType]()
  val isAbstract = false
  val tbaaIndex = 16
  val typeId = 11

  def createConstant(entryPoint : IrConstant, recordClassId : Long, recordData : IrConstant) : StructureConstant = {
    if (entryPoint.irType != entryPointIrType) {
      throw new InternalCompilerErrorException("Unexpected type for field entryPoint")
    }

    StructureConstant(List(
      supertype.get.createConstant(
        recordClassId=recordClassId,
        recordData=recordData,
        typeId=typeId
      ),
      entryPoint
    ), userDefinedType=Some(irType))
  }

  def genTypeCheck(startBlock : IrBlockBuilder)(valueCell : IrValue, successBlock : IrBranchTarget, failBlock : IrBranchTarget) {
    val datumValue = DatumCell.genPointerBitcast(startBlock)(valueCell)
    val typeId = DatumCell.genLoadFromTypeId(startBlock)(datumValue)
    startBlock.switch(typeId, failBlock, (11L -> successBlock))
  }

  def genPointerToTypeId(block : IrBlockBuilder)(valueCell : IrValue) : IrValue = {
    if (valueCell.irType != PointerType(UserDefinedType("procedure"))) {
       throw new InternalCompilerErrorException(s"Unexpected type for cell value. Passed ${valueCell.irType}, expected %procedure*")
    }

    block.getelementptr("typeIdPtr")(
      elementType=typeIdIrType,
      basePointer=valueCell,
      indices=List(0, 0, 0, 0).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genStoreToTypeId(block : IrBlockBuilder)(toStore : IrValue, valueCell : IrValue) : Unit = {
    val typeIdPointer = genPointerToTypeId(block)(valueCell)
    block.store(toStore, typeIdPointer, tbaaIndex=Some(tbaaIndex))
  }

  def genLoadFromTypeId(block : IrBlockBuilder)(valueCell : IrValue) : IrValue = {
    val typeIdPointer = genPointerToTypeId(block)(valueCell)
    block.load("typeId")(typeIdPointer, tbaaIndex=Some(tbaaIndex))
  }

  def genPointerToGcState(block : IrBlockBuilder)(valueCell : IrValue) : IrValue = {
    if (valueCell.irType != PointerType(UserDefinedType("procedure"))) {
       throw new InternalCompilerErrorException(s"Unexpected type for cell value. Passed ${valueCell.irType}, expected %procedure*")
    }

    block.getelementptr("gcStatePtr")(
      elementType=gcStateIrType,
      basePointer=valueCell,
      indices=List(0, 0, 0, 1).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genStoreToGcState(block : IrBlockBuilder)(toStore : IrValue, valueCell : IrValue) : Unit = {
    val gcStatePointer = genPointerToGcState(block)(valueCell)
    block.store(toStore, gcStatePointer, tbaaIndex=Some(tbaaIndex))
  }

  def genLoadFromGcState(block : IrBlockBuilder)(valueCell : IrValue) : IrValue = {
    val gcStatePointer = genPointerToGcState(block)(valueCell)
    block.load("gcState")(gcStatePointer, tbaaIndex=Some(tbaaIndex))
  }

  def genPointerToRecordClassId(block : IrBlockBuilder)(valueCell : IrValue) : IrValue = {
    if (valueCell.irType != PointerType(UserDefinedType("procedure"))) {
       throw new InternalCompilerErrorException(s"Unexpected type for cell value. Passed ${valueCell.irType}, expected %procedure*")
    }

    block.getelementptr("recordClassIdPtr")(
      elementType=recordClassIdIrType,
      basePointer=valueCell,
      indices=List(0, 0, 1).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genStoreToRecordClassId(block : IrBlockBuilder)(toStore : IrValue, valueCell : IrValue) : Unit = {
    val recordClassIdPointer = genPointerToRecordClassId(block)(valueCell)
    block.store(toStore, recordClassIdPointer, tbaaIndex=Some(tbaaIndex))
  }

  def genLoadFromRecordClassId(block : IrBlockBuilder)(valueCell : IrValue) : IrValue = {
    val recordClassIdPointer = genPointerToRecordClassId(block)(valueCell)
    block.load("recordClassId")(recordClassIdPointer, tbaaIndex=Some(tbaaIndex))
  }

  def genPointerToRecordData(block : IrBlockBuilder)(valueCell : IrValue) : IrValue = {
    if (valueCell.irType != PointerType(UserDefinedType("procedure"))) {
       throw new InternalCompilerErrorException(s"Unexpected type for cell value. Passed ${valueCell.irType}, expected %procedure*")
    }

    block.getelementptr("recordDataPtr")(
      elementType=recordDataIrType,
      basePointer=valueCell,
      indices=List(0, 0, 2).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genStoreToRecordData(block : IrBlockBuilder)(toStore : IrValue, valueCell : IrValue) : Unit = {
    val recordDataPointer = genPointerToRecordData(block)(valueCell)
    block.store(toStore, recordDataPointer, tbaaIndex=Some(tbaaIndex))
  }

  def genLoadFromRecordData(block : IrBlockBuilder)(valueCell : IrValue) : IrValue = {
    val recordDataPointer = genPointerToRecordData(block)(valueCell)
    block.load("recordData")(recordDataPointer, tbaaIndex=Some(tbaaIndex))
  }

  def genPointerToEntryPoint(block : IrBlockBuilder)(valueCell : IrValue) : IrValue = {
    if (valueCell.irType != PointerType(UserDefinedType("procedure"))) {
       throw new InternalCompilerErrorException(s"Unexpected type for cell value. Passed ${valueCell.irType}, expected %procedure*")
    }

    block.getelementptr("entryPointPtr")(
      elementType=entryPointIrType,
      basePointer=valueCell,
      indices=List(0, 1).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genStoreToEntryPoint(block : IrBlockBuilder)(toStore : IrValue, valueCell : IrValue) : Unit = {
    val entryPointPointer = genPointerToEntryPoint(block)(valueCell)
    block.store(toStore, entryPointPointer, tbaaIndex=Some(tbaaIndex))
  }

  def genLoadFromEntryPoint(block : IrBlockBuilder)(valueCell : IrValue) : IrValue = {
    val entryPointPointer = genPointerToEntryPoint(block)(valueCell)
    block.load("entryPoint")(entryPointPointer, tbaaIndex=Some(tbaaIndex))
  }
}

sealed trait RecordFields extends RecordLikeFields {
}

object RecordCell extends ConcreteCellType with RecordFields {
  val name = "record"
  val irType = UserDefinedType("record")
  val supertype = Some(RecordLikeCell)
  val directSubtypes = Set[CellType]()
  val isAbstract = false
  val tbaaIndex = 17
  val typeId = 12

  def createConstant(recordClassId : Long, recordData : IrConstant) : StructureConstant = {
    StructureConstant(List(
      supertype.get.createConstant(
        recordClassId=recordClassId,
        recordData=recordData,
        typeId=typeId
      )
    ), userDefinedType=Some(irType))
  }

  def genTypeCheck(startBlock : IrBlockBuilder)(valueCell : IrValue, successBlock : IrBranchTarget, failBlock : IrBranchTarget) {
    val datumValue = DatumCell.genPointerBitcast(startBlock)(valueCell)
    val typeId = DatumCell.genLoadFromTypeId(startBlock)(datumValue)
    startBlock.switch(typeId, failBlock, (12L -> successBlock))
  }

  def genPointerToTypeId(block : IrBlockBuilder)(valueCell : IrValue) : IrValue = {
    if (valueCell.irType != PointerType(UserDefinedType("record"))) {
       throw new InternalCompilerErrorException(s"Unexpected type for cell value. Passed ${valueCell.irType}, expected %record*")
    }

    block.getelementptr("typeIdPtr")(
      elementType=typeIdIrType,
      basePointer=valueCell,
      indices=List(0, 0, 0, 0).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genStoreToTypeId(block : IrBlockBuilder)(toStore : IrValue, valueCell : IrValue) : Unit = {
    val typeIdPointer = genPointerToTypeId(block)(valueCell)
    block.store(toStore, typeIdPointer, tbaaIndex=Some(tbaaIndex))
  }

  def genLoadFromTypeId(block : IrBlockBuilder)(valueCell : IrValue) : IrValue = {
    val typeIdPointer = genPointerToTypeId(block)(valueCell)
    block.load("typeId")(typeIdPointer, tbaaIndex=Some(tbaaIndex))
  }

  def genPointerToGcState(block : IrBlockBuilder)(valueCell : IrValue) : IrValue = {
    if (valueCell.irType != PointerType(UserDefinedType("record"))) {
       throw new InternalCompilerErrorException(s"Unexpected type for cell value. Passed ${valueCell.irType}, expected %record*")
    }

    block.getelementptr("gcStatePtr")(
      elementType=gcStateIrType,
      basePointer=valueCell,
      indices=List(0, 0, 0, 1).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genStoreToGcState(block : IrBlockBuilder)(toStore : IrValue, valueCell : IrValue) : Unit = {
    val gcStatePointer = genPointerToGcState(block)(valueCell)
    block.store(toStore, gcStatePointer, tbaaIndex=Some(tbaaIndex))
  }

  def genLoadFromGcState(block : IrBlockBuilder)(valueCell : IrValue) : IrValue = {
    val gcStatePointer = genPointerToGcState(block)(valueCell)
    block.load("gcState")(gcStatePointer, tbaaIndex=Some(tbaaIndex))
  }

  def genPointerToRecordClassId(block : IrBlockBuilder)(valueCell : IrValue) : IrValue = {
    if (valueCell.irType != PointerType(UserDefinedType("record"))) {
       throw new InternalCompilerErrorException(s"Unexpected type for cell value. Passed ${valueCell.irType}, expected %record*")
    }

    block.getelementptr("recordClassIdPtr")(
      elementType=recordClassIdIrType,
      basePointer=valueCell,
      indices=List(0, 0, 1).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genStoreToRecordClassId(block : IrBlockBuilder)(toStore : IrValue, valueCell : IrValue) : Unit = {
    val recordClassIdPointer = genPointerToRecordClassId(block)(valueCell)
    block.store(toStore, recordClassIdPointer, tbaaIndex=Some(tbaaIndex))
  }

  def genLoadFromRecordClassId(block : IrBlockBuilder)(valueCell : IrValue) : IrValue = {
    val recordClassIdPointer = genPointerToRecordClassId(block)(valueCell)
    block.load("recordClassId")(recordClassIdPointer, tbaaIndex=Some(tbaaIndex))
  }

  def genPointerToRecordData(block : IrBlockBuilder)(valueCell : IrValue) : IrValue = {
    if (valueCell.irType != PointerType(UserDefinedType("record"))) {
       throw new InternalCompilerErrorException(s"Unexpected type for cell value. Passed ${valueCell.irType}, expected %record*")
    }

    block.getelementptr("recordDataPtr")(
      elementType=recordDataIrType,
      basePointer=valueCell,
      indices=List(0, 0, 2).map(IntegerConstant(IntegerType(32), _)),
      inbounds=true
    )
  }

  def genStoreToRecordData(block : IrBlockBuilder)(toStore : IrValue, valueCell : IrValue) : Unit = {
    val recordDataPointer = genPointerToRecordData(block)(valueCell)
    block.store(toStore, recordDataPointer, tbaaIndex=Some(tbaaIndex))
  }

  def genLoadFromRecordData(block : IrBlockBuilder)(valueCell : IrValue) : IrValue = {
    val recordDataPointer = genPointerToRecordData(block)(valueCell)
    block.load("recordData")(recordDataPointer, tbaaIndex=Some(tbaaIndex))
  }
}

