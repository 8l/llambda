/************************************************************
 * This file is generated by typegen. Do not edit manually. *
 ************************************************************/

package io.llambda.compiler.valuetype
import io.llambda.compiler

import compiler.{celltype => ct}

object UnitType extends SchemeTypeAtom(ct.UnitCell)
object ListElementType extends UnionType(Set(SchemeTypeAtom(ct.PairCell), SchemeTypeAtom(ct.EmptyListCell)))
object EmptyListType extends SchemeTypeAtom(ct.EmptyListCell)
object StringType extends SchemeTypeAtom(ct.StringCell)
object SymbolType extends SchemeTypeAtom(ct.SymbolCell)
object BooleanType extends SchemeTypeAtom(ct.BooleanCell)
object NumericType extends UnionType(Set(SchemeTypeAtom(ct.ExactIntegerCell), SchemeTypeAtom(ct.InexactRationalCell)))
object ExactIntegerType extends SchemeTypeAtom(ct.ExactIntegerCell)
object InexactRationalType extends SchemeTypeAtom(ct.InexactRationalCell)
object CharacterType extends SchemeTypeAtom(ct.CharacterCell)
object VectorType extends SchemeTypeAtom(ct.VectorCell)
object BytevectorType extends SchemeTypeAtom(ct.BytevectorCell)
object ProcedureType extends SchemeTypeAtom(ct.ProcedureCell)
object ErrorObjectType extends SchemeTypeAtom(ct.ErrorObjectCell)
object PortType extends SchemeTypeAtom(ct.PortCell)

object IntrinsicSchemeTypes {
  def apply() : Map[String, SchemeType] = Map(
    (ct.UnitCell.schemeName -> UnitType),
    (ct.ListElementCell.schemeName -> ListElementType),
    (ct.EmptyListCell.schemeName -> EmptyListType),
    (ct.StringCell.schemeName -> StringType),
    (ct.SymbolCell.schemeName -> SymbolType),
    (ct.BooleanCell.schemeName -> BooleanType),
    (ct.NumericCell.schemeName -> NumericType),
    (ct.ExactIntegerCell.schemeName -> ExactIntegerType),
    (ct.InexactRationalCell.schemeName -> InexactRationalType),
    (ct.CharacterCell.schemeName -> CharacterType),
    (ct.VectorCell.schemeName -> VectorType),
    (ct.BytevectorCell.schemeName -> BytevectorType),
    (ct.ProcedureCell.schemeName -> ProcedureType),
    (ct.ErrorObjectCell.schemeName -> ErrorObjectType),
    (ct.PortCell.schemeName -> PortType)
  )
}
