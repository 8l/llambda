// The runtime has a UnicodeChar class that provides access to Unicode utility
// methods
fieldtype UnicodeChar : uint32 {
	extern cppname = UnicodeChar;
};

fieldtype ios : uint8 {
	extern cppname = std::ios;
};

// Entry point for adapted procedures
cell Datum;
cell Procedure;
cell ListElement;
fieldtype ProcedureEntryPoint : Datum* (*)(World&, Procedure*, ListElement*) {
	cppname = ProcedureEntryPoint;
};

// This is a special type
fieldtype TypeId : uint8 {
	cppname = CellTypeId;
};

// C++ garbage collector defines the meaning of this field
fieldtype GarbageState : uint8 {
	extern cppname = GarbageState;
};

root cell Datum typetag typeId {
	TypeId typeId;
	// This is GarbageState::GlobalConstant
	GarbageState gcState = 1;
};

preconstructed cell Unit : Datum {
};

abstract cell ListElement : Datum {
};

concrete cell Pair : ListElement {
	TypeId memberTypeId;
	uint32 listLength;
	Datum* car;
	Datum* cdr;
};

preconstructed cell EmptyList : ListElement {
};

concrete cell String : Datum {
	uint16 allocSlackBytes;
	uint32 charLength;
	uint32 byteLength;
};

variant cell InlineString : String {
	uint8 inlineData[12];
};

variant cell HeapString : String {
	SharedByteArray* heapByteArray;
};

concrete cell Symbol : Datum { 
	uint32 charLength;
	uint32 byteLength;
};

variant cell InlineSymbol : Symbol {
	uint8 inlineData[12];
};

variant cell HeapSymbol : Symbol {
	SharedByteArray* heapByteArray;
};

preconstructed cell Boolean : Datum {
	bool value;
};

abstract cell Numeric : Datum {
};

concrete cell ExactInteger : Numeric {
	int64 value;
};

concrete cell InexactRational : Numeric {
	double value;
};

concrete cell Character : Datum {
	UnicodeChar unicodeChar;
};

concrete cell Vector : Datum {
	uint32 length;
	Datum** elements;
};

concrete cell Bytevector : Datum {
	uint32 length;
	SharedByteArray* byteArray;
};

abstract internal cell RecordLike : Datum {
	bool dataIsInline;
	bool isUndefined;
	uint32 recordClassId;
	untypedptr recordData;
};

concrete cell Procedure : RecordLike {
	ProcedureEntryPoint entryPoint;
};

// Records are internal because each record class is exposed as its own 
// first-class type in Scheme
concrete internal cell Record : RecordLike {
	untypedptr extraData;
};

concrete cell ErrorObject : Datum {
	String* message;
	ListElement* irritants;
};

concrete cell Port : Datum {
	bool isOwned;
	ios *stream;
};
