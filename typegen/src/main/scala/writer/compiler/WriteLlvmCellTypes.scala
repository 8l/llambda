package io.llambda.typegen.writer.compiler

import collection.mutable.StringBuilder

import io.llambda.typegen._
import io.llambda.llvmir

object WriteLlvmCellTypes extends writer.OutputWriter {
  def apply(processedTypes : ProcessedTypes) : Map[String, String] = {
    val sourceString = new collection.mutable.StringBuilder

    sourceString ++= ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n"
    sourceString ++= ";; This file is generated by typegen. Do not edit manually. ;;\n"
    sourceString ++= ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n"

    for(cellClass <- processedTypes.cellClasses.values) {
      sourceString ++= "\n"

      // Build the description chunks for our comment
      val fieldDescriptions = cellClass.fields.toList map { case (name, field) =>
        field.fieldType match {
          case PrimitiveFieldType(_, _, "bool")      => s"bool ${name}"
          case PrimitiveFieldType(Some(false), _, _) => s"unsigned ${name}"
          case PrimitiveFieldType(Some(true), _, _)  => s"signed ${name}"
          case _ => name
        }
      }

      sourceString ++= "; {" + ("supertype" :: fieldDescriptions).mkString(", ") + "}\n" 
    
      // Find the LLVM types for our fields
      val fieldLlvmTypes = cellClass.fields.values.toList map { field =>
        FieldTypeToLlvm(field.fieldType)
      }

      // Find the LLVM type pointer to your supertype
      val superLlvmType = cellClass.optionalParent.map { parent =>
        llvmir.UserDefinedType(parent.names.llvmName)
      }

      // Define our type
      val allMemberTypes = superLlvmType.toList ++ fieldLlvmTypes
      val cellClassLlvmType = llvmir.StructureType(allMemberTypes)

      sourceString ++= llvmir.UserDefinedType(cellClass.names.llvmName) + " = type " + cellClassLlvmType.toString + "\n" 

      // Define our TBAA nodes
      for(tbaaNode <- cellClass.fieldTbaaNodes.values) {
        sourceString ++= tbaaNode.toIr + "\n"
      }
    }
    
    
    
    Map("compiler/src/main/resources/generated/cellTypes.ll" -> sourceString.toString)
  }
}
